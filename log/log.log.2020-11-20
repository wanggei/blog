
 2020-11-20 10:33:00,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-850} connected  
 
 2020-11-20 10:33:00,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-851} connected  
 
 2020-11-20 10:33:00,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-852} connected  
 
 2020-11-20 10:33:00,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-853} connected  
 
 2020-11-20 10:33:00,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-854} connected  
 
 2020-11-20 10:33:00,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 10:33:01,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-20 10:33:01,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 10:33:01,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 10:33:01,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 36.9934 millis. select * from t_types  
 
 2020-11-20 10:33:01,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 10:33:01,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-20 10:33:01,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-20 10:33:01,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-20 10:33:01,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-20 10:33:01,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-20 10:33:01,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-20 10:33:01,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-20 10:33:01,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 10:33:01,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 10:33:01,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 10:33:01,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 10:33:01,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-20 10:33:01,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 10:33:01,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 10:33:01,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7821 millis. select * from t_tages  
 
 2020-11-20 10:33:01,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 10:33:01,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-20 10:33:01,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-20 10:33:01,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-20 10:33:01,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-20 10:33:01,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-20 10:33:01,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-20 10:33:01,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-20 10:33:01,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-20 10:33:01,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 10:33:01,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 10:33:01,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 10:33:01,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 10:33:01,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 10:33:01,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 10:33:01,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 10:33:01,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 10:33:01,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 10:33:01,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.8587 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 10:33:01,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 10:33:01,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-20 10:33:01,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-20 10:33:01,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 10:33:01,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 10:33:01,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 10:33:01,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 10:33:01,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 10:33:01,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2094 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 10:33:01,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-20 10:33:01,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 10:33:01,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 10:33:01,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 10:33:01,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-20 10:33:01,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 10:33:01,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 10:33:02,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 10:33:02,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 10:33:02,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 10:33:02,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.3753 millis. select * from t_types  
 
 2020-11-20 10:33:02,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-20 10:33:02,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-20 10:33:02,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-20 10:33:02,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-20 10:33:02,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-20 10:33:02,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-20 10:33:02,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-20 10:33:02,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-20 10:33:02,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-20 10:33:02,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 10:33:02,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 10:33:02,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 10:33:02,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 10:33:02,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 10:33:02,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.6191 millis. select * from t_tages  
 
 2020-11-20 10:33:02,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-20 10:33:02,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-20 10:33:02,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-20 10:33:02,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-20 10:33:02,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-20 10:33:02,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-20 10:33:02,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-20 10:33:02,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-20 10:33:02,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-20 10:33:02,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-20 10:33:02,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 10:33:02,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 10:33:02,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 10:33:02,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 10:33:02,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 10:33:02,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 9.0855 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 10:33:02,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-20 10:33:02,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-20 10:33:02,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-20 10:33:02,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-20 10:33:02,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 10:33:02,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 10:33:02,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 10:33:02,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.588 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 10:33:02,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-20 10:33:02,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 10:33:02,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 10:33:02,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 10:33:02,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-20 10:33:02,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 10:33:02,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 10:33:03,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 10:33:03,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 10:33:03,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-20 10:33:03,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 10:33:03,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 14.8635 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 10:33:03,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-20 10:33:03,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 10:33:03,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 10:33:03,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-20 10:33:03,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 10:33:03,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 11:00:21,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-855} connected  
 
 2020-11-20 11:00:21,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-856} connected  
 
 2020-11-20 11:00:21,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-857} connected  
 
 2020-11-20 11:00:21,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-858} connected  
 
 2020-11-20 11:00:21,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-859} connected  
 
 2020-11-20 11:00:21,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 11:00:21,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:00:21,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 11:00:21,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 11:00:21,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 22.3485 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:00:21,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 11:00:21,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 11:00:21,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 11:00:21,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 11:00:21,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 11:00:21,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 11:07:14,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-860} connected  
 
 2020-11-20 11:07:14,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-861} connected  
 
 2020-11-20 11:07:15,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-862} connected  
 
 2020-11-20 11:07:15,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-863} connected  
 
 2020-11-20 11:07:15,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-864} connected  
 
 2020-11-20 11:07:15,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 11:07:15,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:07:15,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 11:07:15,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 11:07:15,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 22.0449 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:07:15,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 11:07:15,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 11:07:15,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 11:07:15,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 11:07:15,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 11:07:15,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 11:07:54,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-865} connected  
 
 2020-11-20 11:07:54,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-866} connected  
 
 2020-11-20 11:07:54,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-867} connected  
 
 2020-11-20 11:07:54,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-868} connected  
 
 2020-11-20 11:07:54,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-869} connected  
 
 2020-11-20 11:07:54,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 11:07:55,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:07:55,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 11:07:55,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 11:07:55,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 20.7533 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:07:55,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 11:07:55,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 11:07:55,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 11:07:55,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 11:07:55,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 11:07:55,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 11:08:43,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 11:08:43,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 11:08:43,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 11:08:43,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.0116 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:08:43,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 11:08:43,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 11:08:43,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 11:08:43,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 11:08:43,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 11:08:43,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 11:11:51,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-870} connected  
 
 2020-11-20 11:11:51,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-871} connected  
 
 2020-11-20 11:11:51,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-872} connected  
 
 2020-11-20 11:11:51,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-873} connected  
 
 2020-11-20 11:11:51,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-874} connected  
 
 2020-11-20 11:11:51,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 11:11:51,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:11:51,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 11:11:51,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 11:11:51,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 28.2861 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 11:11:51,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 11:11:51,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 11:11:51,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 11:11:51,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 11:11:51,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 11:11:51,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 13:55:41,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-887} connected  
 
 2020-11-20 13:55:41,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-888} connected  
 
 2020-11-20 13:55:41,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-889} connected  
 
 2020-11-20 13:55:41,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-890} connected  
 
 2020-11-20 13:55:41,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-891} connected  
 
 2020-11-20 13:55:41,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 13:55:41,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-20 13:55:41,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 13:55:41,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 13:55:41,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.4065 millis. select * from t_types  
 
 2020-11-20 13:55:41,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 13:55:41,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-20 13:55:41,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-20 13:55:41,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-20 13:55:41,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-20 13:55:41,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-20 13:55:41,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-20 13:55:41,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-20 13:55:41,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 13:55:41,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 13:55:41,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 13:55:41,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 13:55:41,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-20 13:55:41,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 13:55:41,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 13:55:41,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8352 millis. select * from t_tages  
 
 2020-11-20 13:55:41,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 13:55:41,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-20 13:55:41,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-20 13:55:41,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-20 13:55:41,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-20 13:55:41,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-20 13:55:41,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-20 13:55:41,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-20 13:55:41,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-20 13:55:41,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 13:55:41,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 13:55:41,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 13:55:41,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 13:55:41,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 13:55:41,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 13:55:41,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 13:55:41,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 13:55:41,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 13:55:41,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.38 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 13:55:41,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 13:55:41,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-20 13:55:41,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-20 13:55:41,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 13:55:41,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 13:55:41,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 13:55:41,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 13:55:41,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 13:55:41,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.8404 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 13:55:41,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-20 13:55:41,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 13:55:41,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 13:55:41,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 13:55:41,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-20 13:55:41,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 13:55:41,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 13:55:44,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 13:55:44,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 13:55:44,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-20 13:55:44,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 13:55:44,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.5293 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 13:55:44,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-20 13:55:44,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 13:55:44,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 13:55:44,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-20 13:55:44,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 13:55:44,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 13:56:50,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-892} connected  
 
 2020-11-20 13:56:50,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-893} connected  
 
 2020-11-20 13:56:50,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-894} connected  
 
 2020-11-20 13:56:50,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-895} connected  
 
 2020-11-20 13:56:50,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-896} connected  
 
 2020-11-20 13:56:50,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 13:56:51,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 13:56:51,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 13:56:51,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 13:56:51,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 23.8306 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 13:56:51,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 13:56:51,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 13:56:51,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 13:56:51,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 13:56:51,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 13:56:51,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:06:01,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-897} connected  
 
 2020-11-20 14:06:01,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-898} connected  
 
 2020-11-20 14:06:01,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-899} connected  
 
 2020-11-20 14:06:01,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-900} connected  
 
 2020-11-20 14:06:01,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-901} connected  
 
 2020-11-20 14:06:01,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:06:01,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:01,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:06:01,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:06:01,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 23.5455 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:01,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:06:01,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:01,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:01,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:06:01,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:06:01,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:06:18,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:06:18,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:06:18,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:06:18,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.6525 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:18,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:06:18,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:18,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:18,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:06:18,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:06:18,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:06:35,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:06:35,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:06:35,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:06:35,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.2891 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:35,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} open  
 
 2020-11-20 14:06:35,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:35,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:35,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} closed  
 
 2020-11-20 14:06:35,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:06:35,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:06:35,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:06:35,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:06:35,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:06:35,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.3504 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:35,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-20 14:06:35,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:35,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:35,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-20 14:06:35,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:06:35,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:06:35,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:06:35,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:06:35,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:06:35,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.6386 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:35,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-20 14:06:35,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 14:06:35,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:35,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:35,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:35,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} Parameters : [11]  
 
 2020-11-20 14:06:35,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 14:06:35,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-20 14:06:35,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:06:35,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:06:35,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:06:35,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:06:35,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:06:35,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} executed. 6.5058 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:35,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.324 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:35,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50005} open  
 
 2020-11-20 14:06:35,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} open  
 
 2020-11-20 14:06:35,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50005} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:35,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:35,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:35,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:35,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} pool-connect  
 
 2020-11-20 14:06:35,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50005} closed  
 
 2020-11-20 14:06:35,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} closed  
 
 2020-11-20 14:06:35,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:35,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:06:35,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} clearParameters.   
 
 2020-11-20 14:06:36,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} Parameters : [11]  
 
 2020-11-20 14:06:36,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:06:36,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 14:06:36,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 14:06:36,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} executed. 5.9893 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:36,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10003, pstmt-20002, rs-50007} open  
 
 2020-11-20 14:06:36,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10003, pstmt-20002, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:36,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10003, pstmt-20002, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:36,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10003, pstmt-20002, rs-50007} closed  
 
 2020-11-20 14:06:36,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} clearParameters.   
 
 2020-11-20 14:06:36,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} pool-recycle  
 
 2020-11-20 14:06:37,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} pool-connect  
 
 2020-11-20 14:06:37,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} Parameters : [11]  
 
 2020-11-20 14:06:37,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 14:06:37,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} executed. 4.8527 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:06:37,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10003, pstmt-20002, rs-50008} open  
 
 2020-11-20 14:06:37,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10003, pstmt-20002, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:06:37,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10003, pstmt-20002, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:06:37,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10003, pstmt-20002, rs-50008} closed  
 
 2020-11-20 14:06:37,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10003, pstmt-20002} clearParameters.   
 
 2020-11-20 14:06:37,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} pool-recycle  
 
 2020-11-20 14:08:27,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-902} connected  
 
 2020-11-20 14:08:27,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-903} connected  
 
 2020-11-20 14:08:28,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-904} connected  
 
 2020-11-20 14:08:28,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-905} connected  
 
 2020-11-20 14:08:28,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-906} connected  
 
 2020-11-20 14:08:28,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:28,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-20 14:08:28,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 14:08:28,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 14:08:28,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 22.8671 millis. select * from t_types  
 
 2020-11-20 14:08:28,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:08:28,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-20 14:08:28,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-20 14:08:28,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-20 14:08:28,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-20 14:08:28,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-20 14:08:28,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-20 14:08:28,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-20 14:08:28,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:08:28,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:08:28,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:08:28,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:28,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-20 14:08:28,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 14:08:28,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 14:08:28,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.0899 millis. select * from t_tages  
 
 2020-11-20 14:08:28,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 14:08:28,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-20 14:08:28,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-20 14:08:28,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-20 14:08:28,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-20 14:08:28,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-20 14:08:28,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-20 14:08:28,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-20 14:08:28,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-20 14:08:28,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 14:08:28,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:08:28,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:08:28,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:28,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:08:28,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:28,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 14:08:28,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 14:08:28,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 14:08:28,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.4865 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 14:08:28,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 14:08:28,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-20 14:08:28,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-20 14:08:28,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 14:08:28,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:08:28,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 14:08:28,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 14:08:28,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 14:08:28,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.1322 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 14:08:28,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-20 14:08:28,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 14:08:28,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 14:08:28,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 14:08:28,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-20 14:08:28,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 14:08:28,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:08:28,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:28,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 14:08:28,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 14:08:28,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 6.1063 millis. select * from t_types  
 
 2020-11-20 14:08:28,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-20 14:08:28,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-20 14:08:28,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-20 14:08:28,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-20 14:08:28,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-20 14:08:28,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-20 14:08:28,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-20 14:08:28,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-20 14:08:28,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-20 14:08:28,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:08:28,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:08:28,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:28,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 14:08:28,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 14:08:28,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.3486 millis. select * from t_tages  
 
 2020-11-20 14:08:28,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-20 14:08:28,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-20 14:08:28,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-20 14:08:28,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-20 14:08:28,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-20 14:08:28,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-20 14:08:28,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-20 14:08:28,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-20 14:08:28,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-20 14:08:28,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-20 14:08:28,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:08:28,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:08:28,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:28,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 14:08:28,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 14:08:28,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.5172 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 14:08:28,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-20 14:08:28,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-20 14:08:28,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-20 14:08:28,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-20 14:08:28,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:08:28,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 14:08:28,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 14:08:28,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.9176 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 14:08:28,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-20 14:08:28,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 14:08:28,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 14:08:28,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 14:08:28,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-20 14:08:28,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 14:08:28,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:08:31,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:31,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:08:31,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-20 14:08:31,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 14:08:31,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.0973 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:08:31,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-20 14:08:31,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:08:31,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:08:31,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-20 14:08:31,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 14:08:31,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:08:57,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:08:57,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-20 14:08:57,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 14:08:57,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2803 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:08:57,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} open  
 
 2020-11-20 14:08:57,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:08:57,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:08:57,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} closed  
 
 2020-11-20 14:08:57,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 14:08:57,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:19,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-907} connected  
 
 2020-11-20 14:14:19,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-908} connected  
 
 2020-11-20 14:14:19,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-909} connected  
 
 2020-11-20 14:14:19,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-910} connected  
 
 2020-11-20 14:14:19,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-911} connected  
 
 2020-11-20 14:14:19,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:19,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-20 14:14:19,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 14:14:19,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 14:14:19,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.4966 millis. select * from t_types  
 
 2020-11-20 14:14:19,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:14:19,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-20 14:14:19,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-20 14:14:19,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-20 14:14:19,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-20 14:14:19,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-20 14:14:19,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-20 14:14:19,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-20 14:14:19,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:14:19,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:14:19,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:19,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:19,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-20 14:14:19,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 14:14:19,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 14:14:19,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4834 millis. select * from t_tages  
 
 2020-11-20 14:14:19,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 14:14:19,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-20 14:14:19,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-20 14:14:19,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-20 14:14:19,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-20 14:14:19,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-20 14:14:19,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-20 14:14:19,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-20 14:14:19,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-20 14:14:19,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 14:14:19,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:14:19,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:19,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:19,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:19,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:19,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 14:14:19,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 14:14:19,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 14:14:19,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.2304 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 14:14:19,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 14:14:19,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-20 14:14:19,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-20 14:14:19,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 14:14:19,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:14:19,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 14:14:19,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 14:14:19,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 14:14:19,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.8761 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 14:14:19,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-20 14:14:19,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 14:14:19,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 14:14:19,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 14:14:19,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-20 14:14:19,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 14:14:19,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:20,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:20,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 14:14:20,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 14:14:20,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.5081 millis. select * from t_types  
 
 2020-11-20 14:14:20,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-20 14:14:20,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-20 14:14:20,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-20 14:14:20,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-20 14:14:20,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-20 14:14:20,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-20 14:14:20,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-20 14:14:20,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-20 14:14:20,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-20 14:14:20,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:14:20,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:20,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:20,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 14:14:20,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 14:14:20,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.9944 millis. select * from t_tages  
 
 2020-11-20 14:14:20,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-20 14:14:20,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-20 14:14:20,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-20 14:14:20,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-20 14:14:20,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-20 14:14:20,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-20 14:14:20,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-20 14:14:20,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-20 14:14:20,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-20 14:14:20,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-20 14:14:20,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:14:20,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:20,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:20,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 14:14:20,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 14:14:20,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.9212 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 14:14:20,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-20 14:14:20,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-20 14:14:20,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-20 14:14:20,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-20 14:14:20,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:14:20,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 14:14:20,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 14:14:20,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.1217 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 14:14:20,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-20 14:14:20,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 14:14:20,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 14:14:20,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 14:14:20,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-20 14:14:20,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 14:14:20,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:23,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:23,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:14:23,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-20 14:14:23,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 14:14:23,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.652 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:14:23,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-20 14:14:23,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:14:23,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:14:23,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-20 14:14:23,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 14:14:23,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:14:42,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:14:42,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-20 14:14:42,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 14:14:42,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.7381 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:14:42,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} open  
 
 2020-11-20 14:14:42,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:14:42,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:14:42,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} closed  
 
 2020-11-20 14:14:42,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 14:14:42,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:16:02,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-912} connected  
 
 2020-11-20 14:16:02,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-913} connected  
 
 2020-11-20 14:16:02,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-914} connected  
 
 2020-11-20 14:16:02,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-915} connected  
 
 2020-11-20 14:16:02,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-916} connected  
 
 2020-11-20 14:16:02,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:16:03,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:16:03,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:16:03,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:16:03,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.8954 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:16:03,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:16:03,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:16:03,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:16:03,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:16:03,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:16:03,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:16:15,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:16:15,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:16:15,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:16:15,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.5898 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:16:15,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:16:15,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:16:15,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:16:15,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:16:15,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:16:15,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:18:37,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-917} connected  
 
 2020-11-20 14:18:37,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-918} connected  
 
 2020-11-20 14:18:37,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-919} connected  
 
 2020-11-20 14:18:37,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-920} connected  
 
 2020-11-20 14:18:37,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-921} connected  
 
 2020-11-20 14:18:37,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:18:38,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:18:38,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:18:38,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:18:38,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 23.902 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:18:38,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:18:38,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:18:38,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:18:38,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:18:38,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:18:38,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:18:49,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:18:49,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:18:49,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:18:49,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.9224 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:18:49,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:18:49,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:18:49,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:18:49,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:18:49,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:18:49,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:27:44,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-922} connected  
 
 2020-11-20 14:27:44,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-923} connected  
 
 2020-11-20 14:27:44,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-924} connected  
 
 2020-11-20 14:27:44,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-925} connected  
 
 2020-11-20 14:27:44,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-926} connected  
 
 2020-11-20 14:27:44,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:27:44,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:27:44,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:27:44,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:27:44,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 18.763 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:27:44,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:27:44,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:27:44,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:27:44,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:27:44,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:27:44,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:29:46,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-927} connected  
 
 2020-11-20 14:29:46,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-928} connected  
 
 2020-11-20 14:29:46,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-929} connected  
 
 2020-11-20 14:29:46,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-930} connected  
 
 2020-11-20 14:29:46,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-931} connected  
 
 2020-11-20 14:29:46,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:29:46,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:29:46,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:29:46,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:29:46,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 18.0232 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:29:46,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:29:46,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:29:46,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:29:46,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:29:46,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:29:46,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:30:48,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-932} connected  
 
 2020-11-20 14:30:48,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-933} connected  
 
 2020-11-20 14:30:48,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-934} connected  
 
 2020-11-20 14:30:48,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-935} connected  
 
 2020-11-20 14:30:48,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-936} connected  
 
 2020-11-20 14:30:48,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:30:49,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:30:49,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:30:49,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:30:49,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 56.7742 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:30:49,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:30:49,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:30:49,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:30:49,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:30:49,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:30:49,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:31:02,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:31:02,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:31:02,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:31:02,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 4.2129 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:31:02,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:31:02,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:31:02,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:31:02,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:31:02,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:31:02,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:33:06,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-937} connected  
 
 2020-11-20 14:33:06,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-938} connected  
 
 2020-11-20 14:33:06,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-939} connected  
 
 2020-11-20 14:33:06,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-940} connected  
 
 2020-11-20 14:33:06,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-941} connected  
 
 2020-11-20 14:33:06,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:33:07,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:33:07,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:33:07,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:33:07,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 57.7753 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:33:07,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:33:07,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:33:07,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:33:07,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:33:07,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:33:07,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:33:25,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:33:25,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:33:25,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:33:25,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.3627 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:33:25,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:33:25,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:33:25,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:33:25,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:33:25,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:33:25,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:33:25,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:33:25,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:33:25,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:33:25.213, 11]  
 
 2020-11-20 14:33:25,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 14:33:25,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 7.3661 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:33:25,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:33:25,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:35:48,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-942} connected  
 
 2020-11-20 14:35:48,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-943} connected  
 
 2020-11-20 14:35:48,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-944} connected  
 
 2020-11-20 14:35:48,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-945} connected  
 
 2020-11-20 14:35:48,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-946} connected  
 
 2020-11-20 14:35:48,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:35:48,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:35:48,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:35:48,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:35:48,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.0901 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:35:48,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:35:48,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:35:48,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:35:48,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:35:48,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:35:48,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:36:55,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-20 14:36:55,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-20 14:36:55,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-20 14:36:55,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-20 14:36:55,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-20 14:36:55,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-947} connected  
 
 2020-11-20 14:36:55,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 14:36:55,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:36:55,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} Parameters : [11]  
 
 2020-11-20 14:36:55,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 14:36:55,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} executed. 3.0189 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:36:55,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20001, rs-50001} open  
 
 2020-11-20 14:36:55,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20001, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:36:55,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20001, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:36:55,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20001, rs-50001} closed  
 
 2020-11-20 14:36:55,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} clearParameters.   
 
 2020-11-20 14:36:55,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 14:36:55,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 14:36:55,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:36:55,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:36:55.894, 11]  
 
 2020-11-20 14:36:55,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 14:36:55,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} executed. 10.4969 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:36:55,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} clearParameters.   
 
 2020-11-20 14:36:55,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 14:41:32,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-948} connected  
 
 2020-11-20 14:41:32,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-949} connected  
 
 2020-11-20 14:41:32,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-950} connected  
 
 2020-11-20 14:41:32,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-951} connected  
 
 2020-11-20 14:41:32,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-952} connected  
 
 2020-11-20 14:41:32,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:41:32,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:41:32,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:41:32,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:41:32,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 24.1888 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:41:32,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:41:32,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:41:32,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:41:32,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:41:32,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:41:32,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:41:51,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:41:51,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:41:51,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:41:51,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.1892 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:41:51,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:41:51,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:41:51,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:41:51,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:41:51,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:41:51,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:41:51,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:41:51,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:41:51,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:41:51.876, 11]  
 
 2020-11-20 14:41:51,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 14:41:51,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.6267 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:41:51,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:41:51,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:41:51,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:41:51,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where blog_id=?  
 
 2020-11-20 14:41:51,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 14:41:51,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 14:41:51,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.9071 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 14:41:51,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 14:41:51,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcommment_id]  
 
 2020-11-20 14:41:51,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:41:52.0, 11, null]  
 
 2020-11-20 14:41:51,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 14:41:51,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:41:51,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:42:50,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-953} connected  
 
 2020-11-20 14:42:50,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-954} connected  
 
 2020-11-20 14:42:50,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-955} connected  
 
 2020-11-20 14:42:50,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-956} connected  
 
 2020-11-20 14:42:50,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-957} connected  
 
 2020-11-20 14:42:50,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:42:51,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:42:51,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:42:51,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:42:51,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.8739 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:42:51,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:42:51,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:42:51,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:42:51,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:42:51,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:42:51,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:43:07,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:43:07,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:43:07,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:43:07,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.4741 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:43:07,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:43:07,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:43:07,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:43:07,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:43:07,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:43:07,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:43:07,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:43:07,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:43:07,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:43:07.227, 11]  
 
 2020-11-20 14:43:07,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 14:43:07,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 7.1088 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:43:07,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:43:07,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:43:07,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:43:07,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where blog_id=?  
 
 2020-11-20 14:43:07,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 14:43:07,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 14:43:07,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.7445 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 14:43:07,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 14:43:07,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcommment_id]  
 
 2020-11-20 14:43:07,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [4, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:43:07.0, 11, null]  
 
 2020-11-20 14:43:07,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 14:43:07,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:43:07,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:44:12,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-958} connected  
 
 2020-11-20 14:44:12,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-959} connected  
 
 2020-11-20 14:44:12,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-960} connected  
 
 2020-11-20 14:44:12,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-961} connected  
 
 2020-11-20 14:44:12,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-962} connected  
 
 2020-11-20 14:44:12,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:44:12,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:44:12,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:44:12,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:44:12,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 26.1811 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:44:12,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:44:12,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:44:12,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:44:12,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:44:12,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:44:12,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:44:12,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:44:12,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:44:12,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:44:12.808, 11]  
 
 2020-11-20 14:44:12,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 14:44:12,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 13.9678 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:44:12,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:44:12,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:44:12,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:44:12,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where blog_id=?  
 
 2020-11-20 14:44:12,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 14:44:12,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 14:44:12,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.749 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 14:44:12,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} open  
 
 2020-11-20 14:44:12,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcommment_id]  
 
 2020-11-20 14:44:12,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} Result: [5, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:44:13.0, 11, null]  
 
 2020-11-20 14:44:12,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} closed  
 
 2020-11-20 14:44:12,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:44:12,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:44:18,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:44:18,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:44:18,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:44:18,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 5.5404 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:44:18,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} open  
 
 2020-11-20 14:44:18,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:44:18,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:44:18,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} closed  
 
 2020-11-20 14:44:18,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:44:18,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:45:32,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-20 14:45:32,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-20 14:45:32,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-20 14:45:32,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-20 14:45:32,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-20 14:45:32,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-963} connected  
 
 2020-11-20 14:45:32,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 14:45:32,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:45:32,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : [11]  
 
 2020-11-20 14:45:32,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 14:45:32,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} executed. 3.0892 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:45:32,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} open  
 
 2020-11-20 14:45:32,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:45:32,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:45:32,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} closed  
 
 2020-11-20 14:45:32,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-20 14:45:32,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 14:45:49,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 14:45:49,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : [11]  
 
 2020-11-20 14:45:49,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 14:45:49,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} executed. 3.0597 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:45:49,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50004} open  
 
 2020-11-20 14:45:49,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:45:49,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:45:49,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50004} closed  
 
 2020-11-20 14:45:49,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-20 14:45:49,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 14:45:49,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 14:45:49,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:45:49,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:45:49.656, 11]  
 
 2020-11-20 14:45:49,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 14:45:49,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} executed. 13.6727 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:45:49,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} clearParameters.   
 
 2020-11-20 14:45:49,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 14:45:49,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 14:45:49,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. select * from t_comment where blog_id=?  
 
 2020-11-20 14:45:49,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : [11]  
 
 2020-11-20 14:45:49,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : [INTEGER]  
 
 2020-11-20 14:45:49,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 1.8364 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 14:45:49,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} open  
 
 2020-11-20 14:45:49,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcommment_id]  
 
 2020-11-20 14:45:49,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [6, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:45:50.0, 11, null]  
 
 2020-11-20 14:45:49,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} closed  
 
 2020-11-20 14:45:49,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-20 14:45:49,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 14:49:47,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-964} connected  
 
 2020-11-20 14:49:47,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-965} connected  
 
 2020-11-20 14:49:47,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-966} connected  
 
 2020-11-20 14:49:47,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-967} connected  
 
 2020-11-20 14:49:47,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-968} connected  
 
 2020-11-20 14:49:47,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:49:48,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:49:48,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:49:48,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:49:48,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.8849 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:49:48,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:49:48,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:49:48,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:49:48,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:49:48,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:49:48,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:49:58,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:49:58,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:49:58,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:49:58,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.0173 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:49:58,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:49:58,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:49:58,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:49:58,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:49:58,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:49:58,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:49:58,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:49:58,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:49:58,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:49:58.399, 11]  
 
 2020-11-20 14:49:58,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 14:49:58,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 15.42 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:49:58,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:49:58,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:49:58,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:49:58,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where blog_id=?  
 
 2020-11-20 14:49:58,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 14:49:58,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 14:49:58,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.6294 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 14:49:58,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 14:49:58,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcommment_id]  
 
 2020-11-20 14:49:58,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [7, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:49:58.0, 11, null]  
 
 2020-11-20 14:49:58,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 14:49:58,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:49:58,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:50:12,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:50:12,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:50:12,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:50:12,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 4.0777 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:50:12,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-20 14:50:12,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:50:12,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:50:12,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-20 14:50:12,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:50:12,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:50:12,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:50:12,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_comment where id=?  
 
 2020-11-20 14:50:12,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [7]  
 
 2020-11-20 14:50:12,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 14:50:12,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.6904 millis. select * from t_comment where id=?  
 
 2020-11-20 14:50:12,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-20 14:50:12,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcommment_id]  
 
 2020-11-20 14:50:12,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [7, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:49:58.0, 11, null]  
 
 2020-11-20 14:50:12,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-20 14:50:12,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 14:50:12,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:50:12,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:50:12,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:50:12,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [null, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 14:50:12.75, 11, 7]  
 
 2020-11-20 14:50:12,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER, INTEGER]  
 
 2020-11-20 14:50:12,813 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20004} execute error. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 java.sql.SQLSyntaxErrorException: Unknown column 'parentcomment_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy113.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.addForNotMath(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.addForNotMath(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.addForNotMath(BaseServiceImpl.java:66)
	at com.example.blog.service.CommentServiceImpl.addComment(CommentServiceImpl.java:37)
	at com.example.blog.controller.CommentController.post(CommentController.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-20 14:50:12,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 14:50:12,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} closed  
 
 2020-11-20 14:50:12,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:50:12,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:50:12,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:52:17,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-969} connected  
 
 2020-11-20 14:52:17,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-970} connected  
 
 2020-11-20 14:52:17,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-971} connected  
 
 2020-11-20 14:52:17,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-972} connected  
 
 2020-11-20 14:52:17,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-973} connected  
 
 2020-11-20 14:52:17,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:52:17,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:52:17,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:52:17,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:52:17,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.4406 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:52:17,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 14:52:17,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:52:17,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:52:17,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 14:52:17,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:52:17,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:53:00,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:53:00,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:53:00,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:53:00,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.5685 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:53:00,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 14:53:00,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:53:00,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:53:00,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 14:53:00,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:53:00,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:53:00,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:53:00,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:53:00,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:53:00.602, 11]  
 
 2020-11-20 14:53:00,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 14:53:00,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 13.8719 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:53:00,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 14:53:00,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:53:00,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:53:00,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where blog_id=?  
 
 2020-11-20 14:53:00,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 14:53:00,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 14:53:00,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.639 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 14:53:00,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 14:53:00,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id,  parentcomment_id]  
 
 2020-11-20 14:53:00,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:53:01.0, 11, null]  
 
 2020-11-20 14:53:00,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 14:53:00,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 14:53:00,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:53:11,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:53:11,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 14:53:11,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 14:53:11,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.3299 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 14:53:11,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-20 14:53:11,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 14:53:11,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 14:53:11,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-20 14:53:11,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 14:53:11,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:53:11,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:53:11,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_comment where id=?  
 
 2020-11-20 14:53:11,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [8]  
 
 2020-11-20 14:53:11,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 14:53:11,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.3148 millis. select * from t_comment where id=?  
 
 2020-11-20 14:53:11,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-20 14:53:11,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, nickename, email, content, avator, creattime, blog_id,  parentcomment_id]  
 
 2020-11-20 14:53:11,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [8, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 14:53:01.0, 11, null]  
 
 2020-11-20 14:53:11,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-20 14:53:11,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 14:53:11,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:53:11,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:53:11,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 14:53:11,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [null, 小红, cf1799749389@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 14:53:11.398, 11, 8]  
 
 2020-11-20 14:53:11,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER, INTEGER]  
 
 2020-11-20 14:53:11,450 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20004} execute error. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 java.sql.SQLSyntaxErrorException: Unknown column 'parentcomment_id' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy113.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.addForNotMath(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.addForNotMath(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.addForNotMath(BaseServiceImpl.java:66)
	at com.example.blog.service.CommentServiceImpl.addComment(CommentServiceImpl.java:37)
	at com.example.blog.controller.CommentController.post(CommentController.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-20 14:53:11,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 14:53:11,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} closed  
 
 2020-11-20 14:53:11,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 14:53:11,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 14:53:11,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:01:09,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-980} connected  
 
 2020-11-20 15:01:09,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-981} connected  
 
 2020-11-20 15:01:09,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-982} connected  
 
 2020-11-20 15:01:09,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-983} connected  
 
 2020-11-20 15:01:09,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-984} connected  
 
 2020-11-20 15:01:09,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:01:10,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:01:10,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 15:01:10,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 15:01:10,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 39.0288 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:01:10,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 15:01:10,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:01:10,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:01:10,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 15:01:10,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 15:01:10,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:01:21,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:01:21,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 15:01:21,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 15:01:21,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.9243 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:01:21,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} open  
 
 2020-11-20 15:01:21,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:01:21,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:01:21,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50001} closed  
 
 2020-11-20 15:01:21,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 15:01:21,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:01:21,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:01:21,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 15:01:21,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [null, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.293, 11]  
 
 2020-11-20 15:01:21,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 15:01:21,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 12.7899 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 15:01:21,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 15:01:21,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:01:21,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:01:21,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where blog_id=?  
 
 2020-11-20 15:01:21,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 15:01:21,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 15:01:21,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.6877 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 15:01:21,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 15:01:21,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:01:21,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 15:01:21,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 15:01:21,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 15:01:21,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:01:31,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:01:31,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 15:01:31,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 15:01:31,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.1228 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:01:31,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-20 15:01:31,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:01:31,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:01:31,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-20 15:01:31,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 15:01:31,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:01:31,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:01:31,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_comment where id=?  
 
 2020-11-20 15:01:31,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [9]  
 
 2020-11-20 15:01:31,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 15:01:31,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.0715 millis. select * from t_comment where id=?  
 
 2020-11-20 15:01:31,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-20 15:01:31,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:01:31,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 15:01:31,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-20 15:01:31,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 15:01:31,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:01:31,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:01:31,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 15:01:31,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [null, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.21, 11, 9]  
 
 2020-11-20 15:01:31,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER, INTEGER]  
 
 2020-11-20 15:01:31,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 7.0883 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 15:01:31,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 15:01:31,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:01:31,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:01:31,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 15:01:31,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 15:01:31,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2858 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 15:01:31,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-20 15:01:31,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:01:31,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 15:01:31,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 15:01:31,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-20 15:01:31,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 15:01:31,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:12:33,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-985} connected  
 
 2020-11-20 15:12:34,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-986} connected  
 
 2020-11-20 15:12:34,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-987} connected  
 
 2020-11-20 15:12:34,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-988} connected  
 
 2020-11-20 15:12:34,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-989} connected  
 
 2020-11-20 15:12:34,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:12:34,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:34,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} created. select * from t_types  
 
 2020-11-20 15:12:34,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_types  
 
 2020-11-20 15:12:34,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 15:12:34,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} Parameters : []  
 
 2020-11-20 15:12:34,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 15:12:34,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} Types : []  
 
 2020-11-20 15:12:34,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} executed. 25.7107 millis. select * from t_types  
 
 2020-11-20 15:12:34,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 25.7107 millis. select * from t_types  
 
 2020-11-20 15:12:34,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} open  
 
 2020-11-20 15:12:34,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} open  
 
 2020-11-20 15:12:34,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} Header: [id, name]  
 
 2020-11-20 15:12:34,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} Header: [id, name]  
 
 2020-11-20 15:12:34,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} Result: [8, 方法论]  
 
 2020-11-20 15:12:34,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} Result: [8, 方法论]  
 
 2020-11-20 15:12:34,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} Result: [9, 理论类]  
 
 2020-11-20 15:12:34,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} Result: [9, 理论类]  
 
 2020-11-20 15:12:34,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} Result: [21, 错误日记]  
 
 2020-11-20 15:12:34,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} Result: [21, 错误日记]  
 
 2020-11-20 15:12:34,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} Result: [23, 开发日记]  
 
 2020-11-20 15:12:34,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} Result: [23, 开发日记]  
 
 2020-11-20 15:12:34,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} Result: [24, 实践论]  
 
 2020-11-20 15:12:34,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} Result: [24, 实践论]  
 
 2020-11-20 15:12:34,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} Result: [25, 想法论]  
 
 2020-11-20 15:12:34,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} Result: [25, 想法论]  
 
 2020-11-20 15:12:34,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50001} closed  
 
 2020-11-20 15:12:34,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50000} closed  
 
 2020-11-20 15:12:34,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} clearParameters.   
 
 2020-11-20 15:12:34,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 15:12:34,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:34,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:12:34,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:12:34,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:34,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_tages  
 
 2020-11-20 15:12:34,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} created. select * from t_tages  
 
 2020-11-20 15:12:34,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 15:12:34,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 15:12:34,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : []  
 
 2020-11-20 15:12:34,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : []  
 
 2020-11-20 15:12:34,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.1314 millis. select * from t_tages  
 
 2020-11-20 15:12:34,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 15:12:34,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, tage]  
 
 2020-11-20 15:12:34,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 3.5951 millis. select * from t_tages  
 
 2020-11-20 15:12:34,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, 学习日记]  
 
 2020-11-20 15:12:34,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} open  
 
 2020-11-20 15:12:34,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Header: [id, tage]  
 
 2020-11-20 15:12:34,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2, 错误笔记]  
 
 2020-11-20 15:12:34,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [1, 学习日记]  
 
 2020-11-20 15:12:34,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3, 数据库笔记]  
 
 2020-11-20 15:12:34,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-20 15:12:34,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [4, 程序运行日记]  
 
 2020-11-20 15:12:34,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-20 15:12:34,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [5, 开发日记]  
 
 2020-11-20 15:12:34,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-20 15:12:34,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 开发手册]  
 
 2020-11-20 15:12:34,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [5, 开发日记]  
 
 2020-11-20 15:12:34,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 搭建日记]  
 
 2020-11-20 15:12:34,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [8, 开发手册]  
 
 2020-11-20 15:12:34,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 15:12:34,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [10, 搭建日记]  
 
 2020-11-20 15:12:34,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 15:12:34,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} closed  
 
 2020-11-20 15:12:34,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:12:34,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-20 15:12:34,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:34,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:12:34,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:34,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:12:34,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:34,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:12:34,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:34,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:12:34,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:12:34,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-20 15:12:34,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : []  
 
 2020-11-20 15:12:34,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-20 15:12:34,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : []  
 
 2020-11-20 15:12:34,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.4054 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:12:34,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-20 15:12:34,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 6.1252 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:12:34,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [count(0)]  
 
 2020-11-20 15:12:34,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} open  
 
 2020-11-20 15:12:34,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [2]  
 
 2020-11-20 15:12:34,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-20 15:12:34,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} Result: [2]  
 
 2020-11-20 15:12:34,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-20 15:12:34,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} closed  
 
 2020-11-20 15:12:34,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 15:12:34,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-20 15:12:34,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:12:34,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:12:34,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [4]  
 
 2020-11-20 15:12:34,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : [4]  
 
 2020-11-20 15:12:34,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 15:12:34,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-20 15:12:34,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 6.3751 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:12:34,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 6.3985 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:12:34,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} open  
 
 2020-11-20 15:12:34,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} open  
 
 2020-11-20 15:12:34,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 15:12:34,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 15:12:34,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 15:12:34,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 15:12:34,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 15:12:34,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 15:12:34,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} closed  
 
 2020-11-20 15:12:34,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} closed  
 
 2020-11-20 15:12:34,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-20 15:12:34,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-20 15:12:34,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:12:34,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:40,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:40,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:12:40,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : [11]  
 
 2020-11-20 15:12:40,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 15:12:40,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 2.8495 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:12:40,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} open  
 
 2020-11-20 15:12:40,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:12:40,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:12:40,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} closed  
 
 2020-11-20 15:12:40,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-20 15:12:40,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:41,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:41,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} created. select * from t_comment where blog_id=?  
 
 2020-11-20 15:12:41,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [11]  
 
 2020-11-20 15:12:41,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [INTEGER]  
 
 2020-11-20 15:12:41,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 3.2229 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 15:12:41,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} open  
 
 2020-11-20 15:12:41,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:12:41,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 15:12:41,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 15:12:41,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} closed  
 
 2020-11-20 15:12:41,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-20 15:12:41,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:46,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:46,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} Parameters : []  
 
 2020-11-20 15:12:46,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} Types : []  
 
 2020-11-20 15:12:46,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} executed. 1.8795 millis. select * from t_types  
 
 2020-11-20 15:12:46,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} open  
 
 2020-11-20 15:12:46,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} Header: [id, name]  
 
 2020-11-20 15:12:46,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} Result: [8, 方法论]  
 
 2020-11-20 15:12:46,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} Result: [9, 理论类]  
 
 2020-11-20 15:12:46,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} Result: [21, 错误日记]  
 
 2020-11-20 15:12:46,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} Result: [23, 开发日记]  
 
 2020-11-20 15:12:46,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} Result: [24, 实践论]  
 
 2020-11-20 15:12:46,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} Result: [25, 想法论]  
 
 2020-11-20 15:12:46,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50010} closed  
 
 2020-11-20 15:12:46,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} clearParameters.   
 
 2020-11-20 15:12:46,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:46,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:46,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : []  
 
 2020-11-20 15:12:46,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : []  
 
 2020-11-20 15:12:46,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 2.043 millis. select * from t_tages  
 
 2020-11-20 15:12:46,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} open  
 
 2020-11-20 15:12:46,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Header: [id, tage]  
 
 2020-11-20 15:12:46,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [1, 学习日记]  
 
 2020-11-20 15:12:46,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [2, 错误笔记]  
 
 2020-11-20 15:12:46,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [3, 数据库笔记]  
 
 2020-11-20 15:12:46,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [4, 程序运行日记]  
 
 2020-11-20 15:12:46,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [5, 开发日记]  
 
 2020-11-20 15:12:46,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [8, 开发手册]  
 
 2020-11-20 15:12:46,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [10, 搭建日记]  
 
 2020-11-20 15:12:46,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} closed  
 
 2020-11-20 15:12:46,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-20 15:12:46,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:46,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:46,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : []  
 
 2020-11-20 15:12:46,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : []  
 
 2020-11-20 15:12:46,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 2.3897 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:12:46,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} open  
 
 2020-11-20 15:12:46,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} Header: [count(0)]  
 
 2020-11-20 15:12:46,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} Result: [2]  
 
 2020-11-20 15:12:46,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} closed  
 
 2020-11-20 15:12:46,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-20 15:12:46,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : [4]  
 
 2020-11-20 15:12:46,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 15:12:46,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 4.0144 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:12:46,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} open  
 
 2020-11-20 15:12:46,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 15:12:46,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 15:12:46,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 15:12:46,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} closed  
 
 2020-11-20 15:12:46,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-20 15:12:46,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:47,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:47,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : [12]  
 
 2020-11-20 15:12:47,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 15:12:47,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 3.6747 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:12:47,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50014} open  
 
 2020-11-20 15:12:47,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50014} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:12:47,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50014} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:12:47,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50014} closed  
 
 2020-11-20 15:12:47,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-20 15:12:47,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:48,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:48,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [12]  
 
 2020-11-20 15:12:48,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [INTEGER]  
 
 2020-11-20 15:12:48,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 2.3924 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 15:12:48,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} open  
 
 2020-11-20 15:12:48,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:12:48,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} closed  
 
 2020-11-20 15:12:48,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-20 15:12:48,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:51,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:51,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} Parameters : []  
 
 2020-11-20 15:12:51,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} Types : []  
 
 2020-11-20 15:12:51,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} executed. 1.8928 millis. select * from t_types  
 
 2020-11-20 15:12:51,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} open  
 
 2020-11-20 15:12:51,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} Header: [id, name]  
 
 2020-11-20 15:12:51,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} Result: [8, 方法论]  
 
 2020-11-20 15:12:51,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} Result: [9, 理论类]  
 
 2020-11-20 15:12:51,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} Result: [21, 错误日记]  
 
 2020-11-20 15:12:51,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} Result: [23, 开发日记]  
 
 2020-11-20 15:12:51,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} Result: [24, 实践论]  
 
 2020-11-20 15:12:51,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} Result: [25, 想法论]  
 
 2020-11-20 15:12:51,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20000, rs-50016} closed  
 
 2020-11-20 15:12:51,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20000} clearParameters.   
 
 2020-11-20 15:12:51,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:51,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:51,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : []  
 
 2020-11-20 15:12:51,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : []  
 
 2020-11-20 15:12:51,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 1.4569 millis. select * from t_tages  
 
 2020-11-20 15:12:51,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} open  
 
 2020-11-20 15:12:51,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} Header: [id, tage]  
 
 2020-11-20 15:12:51,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} Result: [1, 学习日记]  
 
 2020-11-20 15:12:51,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} Result: [2, 错误笔记]  
 
 2020-11-20 15:12:51,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} Result: [3, 数据库笔记]  
 
 2020-11-20 15:12:51,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} Result: [4, 程序运行日记]  
 
 2020-11-20 15:12:51,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} Result: [5, 开发日记]  
 
 2020-11-20 15:12:51,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} Result: [8, 开发手册]  
 
 2020-11-20 15:12:51,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} Result: [10, 搭建日记]  
 
 2020-11-20 15:12:51,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50017} closed  
 
 2020-11-20 15:12:51,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-20 15:12:51,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:51,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:51,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : []  
 
 2020-11-20 15:12:51,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : []  
 
 2020-11-20 15:12:51,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 2.4229 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:12:51,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50018} open  
 
 2020-11-20 15:12:51,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50018} Header: [count(0)]  
 
 2020-11-20 15:12:51,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50018} Result: [2]  
 
 2020-11-20 15:12:51,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50018} closed  
 
 2020-11-20 15:12:51,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-20 15:12:51,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : [4]  
 
 2020-11-20 15:12:51,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 15:12:51,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 2.0038 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:12:51,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50019} open  
 
 2020-11-20 15:12:51,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50019} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 15:12:51,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 15:12:51,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 15:12:51,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50019} closed  
 
 2020-11-20 15:12:51,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-20 15:12:51,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:52,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:52,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : [11]  
 
 2020-11-20 15:12:52,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 15:12:52,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 2.3522 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:12:52,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50020} open  
 
 2020-11-20 15:12:52,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50020} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:12:52,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50020} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:12:52,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50020} closed  
 
 2020-11-20 15:12:52,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-20 15:12:52,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:12:53,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-20 15:12:53,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [11]  
 
 2020-11-20 15:12:53,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [INTEGER]  
 
 2020-11-20 15:12:53,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 1.5694 millis. select * from t_comment where blog_id=?  
 
 2020-11-20 15:12:53,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50021} open  
 
 2020-11-20 15:12:53,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50021} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:12:53,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50021} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 15:12:53,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50021} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 15:12:53,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50021} closed  
 
 2020-11-20 15:12:53,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-20 15:12:53,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-20 15:23:36,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-990} connected  
 
 2020-11-20 15:23:36,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-991} connected  
 
 2020-11-20 15:23:36,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-992} connected  
 
 2020-11-20 15:23:36,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-993} connected  
 
 2020-11-20 15:23:36,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-994} connected  
 
 2020-11-20 15:23:36,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:23:36,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:23:36,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 15:23:36,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 15:23:36,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.3182 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:23:36,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 15:23:36,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:23:36,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:23:36,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 15:23:36,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 15:23:36,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:23:37,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:23:37,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 15:23:37,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 15:23:37,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 15:23:37,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8804 millis. select * from t_comment where blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 15:23:37,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 15:23:37,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:23:37,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 15:23:37,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 15:23:37,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 15:23:37,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 15:23:37,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:32,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-998} connected  
 
 2020-11-20 15:35:32,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-999} connected  
 
 2020-11-20 15:35:32,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1000} connected  
 
 2020-11-20 15:35:32,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1001} connected  
 
 2020-11-20 15:35:32,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1002} connected  
 
 2020-11-20 15:35:32,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:32,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:35:32,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 15:35:32,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 15:35:32,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.758 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:35:32,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 15:35:32,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:35:32,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:35:32,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 15:35:32,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 15:35:32,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:33,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:33,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 15:35:33,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 15:35:33,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 15:35:33,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3682 millis. select * from t_comment where blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 15:35:33,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 15:35:33,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:35:33,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 15:35:33,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 15:35:33,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 15:35:33,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 15:35:33,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:35,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:35,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_types  
 
 2020-11-20 15:35:35,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 15:35:35,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 15:35:35,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.3622 millis. select * from t_types  
 
 2020-11-20 15:35:35,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 15:35:35,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, name]  
 
 2020-11-20 15:35:35,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 方法论]  
 
 2020-11-20 15:35:35,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [9, 理论类]  
 
 2020-11-20 15:35:35,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [21, 错误日记]  
 
 2020-11-20 15:35:35,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [23, 开发日记]  
 
 2020-11-20 15:35:35,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [24, 实践论]  
 
 2020-11-20 15:35:35,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [25, 想法论]  
 
 2020-11-20 15:35:35,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 15:35:35,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 15:35:35,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:35,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:35,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_tages  
 
 2020-11-20 15:35:35,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-20 15:35:35,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-20 15:35:35,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.5927 millis. select * from t_tages  
 
 2020-11-20 15:35:35,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-20 15:35:35,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [id, tage]  
 
 2020-11-20 15:35:35,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [1, 学习日记]  
 
 2020-11-20 15:35:35,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-20 15:35:35,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-20 15:35:35,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-20 15:35:35,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [5, 开发日记]  
 
 2020-11-20 15:35:35,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [8, 开发手册]  
 
 2020-11-20 15:35:35,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [10, 搭建日记]  
 
 2020-11-20 15:35:35,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-20 15:35:35,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 15:35:35,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:35,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:35,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:35,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:35,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:35:35,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-20 15:35:35,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-20 15:35:35,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.4241 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:35:35,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-20 15:35:35,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [count(0)]  
 
 2020-11-20 15:35:35,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [2]  
 
 2020-11-20 15:35:35,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-20 15:35:35,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 15:35:35,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:35:35,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [4]  
 
 2020-11-20 15:35:35,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-20 15:35:35,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.9195 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:35:35,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-20 15:35:35,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 15:35:35,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 15:35:35,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 15:35:35,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-20 15:35:35,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-20 15:35:35,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:37,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:37,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 15:35:37,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 15:35:37,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8671 millis. select * from t_types  
 
 2020-11-20 15:35:37,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-20 15:35:37,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [id, name]  
 
 2020-11-20 15:35:37,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [8, 方法论]  
 
 2020-11-20 15:35:37,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [9, 理论类]  
 
 2020-11-20 15:35:37,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [21, 错误日记]  
 
 2020-11-20 15:35:37,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [23, 开发日记]  
 
 2020-11-20 15:35:37,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [24, 实践论]  
 
 2020-11-20 15:35:37,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [25, 想法论]  
 
 2020-11-20 15:35:37,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-20 15:35:37,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 15:35:37,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:37,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:37,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-20 15:35:37,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-20 15:35:37,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.5705 millis. select * from t_tages  
 
 2020-11-20 15:35:37,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-20 15:35:37,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [id, tage]  
 
 2020-11-20 15:35:37,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [1, 学习日记]  
 
 2020-11-20 15:35:37,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [2, 错误笔记]  
 
 2020-11-20 15:35:37,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [3, 数据库笔记]  
 
 2020-11-20 15:35:37,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [4, 程序运行日记]  
 
 2020-11-20 15:35:37,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [5, 开发日记]  
 
 2020-11-20 15:35:37,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [8, 开发手册]  
 
 2020-11-20 15:35:37,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [10, 搭建日记]  
 
 2020-11-20 15:35:37,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-20 15:35:37,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 15:35:37,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:37,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:37,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-20 15:35:37,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-20 15:35:37,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.7962 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 15:35:37,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-20 15:35:37,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [count(0)]  
 
 2020-11-20 15:35:37,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [2]  
 
 2020-11-20 15:35:37,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-20 15:35:37,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 15:35:37,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [4]  
 
 2020-11-20 15:35:37,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-20 15:35:37,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.0834 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 15:35:37,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-20 15:35:37,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 15:35:37,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 15:35:37,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 15:35:37,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-20 15:35:37,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-20 15:35:37,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:43,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:43,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 15:35:43,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 15:35:43,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.4082 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 15:35:43,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} open  
 
 2020-11-20 15:35:43,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 15:35:43,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 15:35:43,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} closed  
 
 2020-11-20 15:35:43,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 15:35:43,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 15:35:44,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 15:35:44,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 15:35:44,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 15:35:44,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4881 millis. select * from t_comment where blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 15:35:44,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} open  
 
 2020-11-20 15:35:44,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 15:35:44,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 15:35:44,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 15:35:44,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} closed  
 
 2020-11-20 15:35:44,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 15:35:44,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:25,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1003} connected  
 
 2020-11-20 16:39:25,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1004} connected  
 
 2020-11-20 16:39:25,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1005} connected  
 
 2020-11-20 16:39:25,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1006} connected  
 
 2020-11-20 16:39:25,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1007} connected  
 
 2020-11-20 16:39:25,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:25,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-20 16:39:25,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 16:39:25,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 16:39:25,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.104 millis. select * from t_types  
 
 2020-11-20 16:39:25,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 16:39:25,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-20 16:39:25,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-20 16:39:25,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-20 16:39:25,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-20 16:39:25,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-20 16:39:25,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-20 16:39:25,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-20 16:39:25,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 16:39:25,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 16:39:25,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:25,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:25,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-20 16:39:25,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 16:39:25,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 16:39:25,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8935 millis. select * from t_tages  
 
 2020-11-20 16:39:25,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 16:39:25,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-20 16:39:25,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-20 16:39:25,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-20 16:39:25,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-20 16:39:25,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-20 16:39:25,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-20 16:39:25,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-20 16:39:25,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-20 16:39:25,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 16:39:25,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 16:39:25,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:25,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:25,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:25,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:25,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 16:39:25,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 16:39:25,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 16:39:25,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.6867 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 16:39:25,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 16:39:25,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-20 16:39:25,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-20 16:39:25,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 16:39:25,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 16:39:25,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 16:39:25,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 16:39:25,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 16:39:25,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.6794 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 16:39:25,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-20 16:39:25,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 16:39:25,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 16:39:25,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 16:39:25,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-20 16:39:25,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 16:39:25,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:26,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:26,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 16:39:26,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 16:39:26,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 4.4912 millis. select * from t_types  
 
 2020-11-20 16:39:26,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-20 16:39:26,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-20 16:39:26,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-20 16:39:26,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-20 16:39:26,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-20 16:39:26,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-20 16:39:26,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-20 16:39:26,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-20 16:39:26,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-20 16:39:26,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 16:39:26,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:26,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:26,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 16:39:26,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 16:39:26,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0518 millis. select * from t_tages  
 
 2020-11-20 16:39:26,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-20 16:39:26,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-20 16:39:26,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-20 16:39:26,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-20 16:39:26,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-20 16:39:26,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-20 16:39:26,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-20 16:39:26,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-20 16:39:26,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-20 16:39:26,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-20 16:39:26,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 16:39:26,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:26,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:26,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 16:39:26,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 16:39:26,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.1382 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 16:39:26,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-20 16:39:26,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-20 16:39:26,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-20 16:39:26,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-20 16:39:26,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 16:39:26,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 16:39:26,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 16:39:26,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6532 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 16:39:26,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-20 16:39:26,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 16:39:26,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 16:39:26,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 16:39:26,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-20 16:39:26,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 16:39:26,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:28,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:28,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:39:28,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-20 16:39:28,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 16:39:28,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.1159 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:39:28,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-20 16:39:28,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 16:39:28,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 16:39:28,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-20 16:39:28,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 16:39:28,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:28,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:28,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_comment where blog_id=? and ParentCommment_id IS NULL ORDER BY creatTime desc  
 
 2020-11-20 16:39:28,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-20 16:39:28,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-20 16:39:28,557 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20005} execute error. select * from t_comment where blog_id=? and ParentCommment_id IS NULL ORDER BY creatTime desc  
 java.sql.SQLSyntaxErrorException: Unknown column 'ParentCommment_id' in 'where clause'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy112.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy92.getAllList(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy93.getAllList(Unknown Source)
	at com.example.blog.service.CommentServiceImpl.getAllComment(CommentServiceImpl.java:30)
	at com.example.blog.controller.CommentController.comments(CommentController.java:29)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-20 16:39:28,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-20 16:39:28,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} closed  
 
 2020-11-20 16:39:28,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:28,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:28,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:32,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:32,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 16:39:32,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 16:39:32,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.2319 millis. select * from t_types  
 
 2020-11-20 16:39:32,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} open  
 
 2020-11-20 16:39:32,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Header: [id, name]  
 
 2020-11-20 16:39:32,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [8, 方法论]  
 
 2020-11-20 16:39:32,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [9, 理论类]  
 
 2020-11-20 16:39:32,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [21, 错误日记]  
 
 2020-11-20 16:39:32,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [23, 开发日记]  
 
 2020-11-20 16:39:32,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [24, 实践论]  
 
 2020-11-20 16:39:32,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [25, 想法论]  
 
 2020-11-20 16:39:32,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} closed  
 
 2020-11-20 16:39:32,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 16:39:32,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:32,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:32,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 16:39:32,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 16:39:32,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.1686 millis. select * from t_tages  
 
 2020-11-20 16:39:32,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} open  
 
 2020-11-20 16:39:32,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Header: [id, tage]  
 
 2020-11-20 16:39:32,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [1, 学习日记]  
 
 2020-11-20 16:39:32,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-20 16:39:32,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-20 16:39:32,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-20 16:39:32,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [5, 开发日记]  
 
 2020-11-20 16:39:32,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [8, 开发手册]  
 
 2020-11-20 16:39:32,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [10, 搭建日记]  
 
 2020-11-20 16:39:32,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} closed  
 
 2020-11-20 16:39:32,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 16:39:32,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:32,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:32,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 16:39:32,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 16:39:32,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.3805 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 16:39:32,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} open  
 
 2020-11-20 16:39:32,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Header: [count(0)]  
 
 2020-11-20 16:39:32,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [2]  
 
 2020-11-20 16:39:32,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} closed  
 
 2020-11-20 16:39:32,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 16:39:32,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 16:39:32,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 16:39:32,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.1454 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 16:39:32,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} open  
 
 2020-11-20 16:39:32,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 16:39:32,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 16:39:32,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 16:39:32,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} closed  
 
 2020-11-20 16:39:32,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 16:39:32,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:34,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:34,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-20 16:39:34,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 16:39:34,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.7239 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:39:34,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} open  
 
 2020-11-20 16:39:34,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 16:39:34,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 16:39:34,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} closed  
 
 2020-11-20 16:39:34,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 16:39:34,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:39:34,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:39:34,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_comment where blog_id=? and ParentCommment_id IS NULL ORDER BY creatTime desc  
 
 2020-11-20 16:39:34,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-20 16:39:34,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 16:39:34,402 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. select * from t_comment where blog_id=? and ParentCommment_id IS NULL ORDER BY creatTime desc  
 java.sql.SQLSyntaxErrorException: Unknown column 'ParentCommment_id' in 'where clause'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy112.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy92.getAllList(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy93.getAllList(Unknown Source)
	at com.example.blog.service.CommentServiceImpl.getAllComment(CommentServiceImpl.java:30)
	at com.example.blog.controller.CommentController.comments(CommentController.java:29)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-20 16:39:34,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-20 16:39:34,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-20 16:39:34,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:40:16,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1008} connected  
 
 2020-11-20 16:40:16,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1009} connected  
 
 2020-11-20 16:40:16,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1010} connected  
 
 2020-11-20 16:40:16,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1011} connected  
 
 2020-11-20 16:40:16,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1012} connected  
 
 2020-11-20 16:40:16,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:40:16,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:40:16,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [12]  
 
 2020-11-20 16:40:16,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 16:40:16,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 26.0314 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:40:16,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 16:40:16,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 16:40:16,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 16:40:16,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 16:40:16,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 16:40:16,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:40:17,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:40:17,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where blog_id=? and ParentCommment_id=null ORDER BY creatTime desc  
 
 2020-11-20 16:40:17,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [12]  
 
 2020-11-20 16:40:17,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 16:40:17,344 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20001} execute error. select * from t_comment where blog_id=? and ParentCommment_id=null ORDER BY creatTime desc  
 java.sql.SQLSyntaxErrorException: Unknown column 'ParentCommment_id' in 'where clause'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy113.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy92.getAllList(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy93.getAllList(Unknown Source)
	at com.example.blog.service.CommentServiceImpl.getAllComment(CommentServiceImpl.java:30)
	at com.example.blog.controller.CommentController.comments(CommentController.java:29)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-20 16:40:17,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 16:40:17,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} closed  
 
 2020-11-20 16:40:17,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:40:17,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:40:17,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:42:48,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1013} connected  
 
 2020-11-20 16:42:48,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1014} connected  
 
 2020-11-20 16:42:48,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1015} connected  
 
 2020-11-20 16:42:48,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1016} connected  
 
 2020-11-20 16:42:48,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1017} connected  
 
 2020-11-20 16:42:48,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:42:48,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:42:48,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [12]  
 
 2020-11-20 16:42:48,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 16:42:48,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.2518 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:42:48,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 16:42:48,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 16:42:48,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 16:42:48,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 16:42:48,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 16:42:48,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:42:49,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:42:49,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where  ParentCommment_id==null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 16:42:49,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [12]  
 
 2020-11-20 16:42:49,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 16:42:49,384 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20001} execute error. select * from t_comment where  ParentCommment_id==null and blog_id=? ORDER BY creatTime desc  
 java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '==null and blog_id=12 ORDER BY creatTime desc' at line 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:143)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy113.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy92.getAllList(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy93.getAllList(Unknown Source)
	at com.example.blog.service.CommentServiceImpl.getAllComment(CommentServiceImpl.java:30)
	at com.example.blog.controller.CommentController.comments(CommentController.java:29)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-20 16:42:49,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 16:42:49,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} closed  
 
 2020-11-20 16:42:49,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:42:49,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:42:49,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:51,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1020} connected  
 
 2020-11-20 16:46:51,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1021} connected  
 
 2020-11-20 16:46:51,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1022} connected  
 
 2020-11-20 16:46:51,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1023} connected  
 
 2020-11-20 16:46:51,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1024} connected  
 
 2020-11-20 16:46:51,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:51,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-20 16:46:51,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 16:46:51,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 16:46:51,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.2098 millis. select * from t_types  
 
 2020-11-20 16:46:51,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 16:46:51,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-20 16:46:51,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-20 16:46:51,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-20 16:46:51,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-20 16:46:51,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-20 16:46:51,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-20 16:46:51,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-20 16:46:51,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 16:46:51,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 16:46:51,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:51,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:51,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-20 16:46:51,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 16:46:51,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 16:46:51,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9777 millis. select * from t_tages  
 
 2020-11-20 16:46:51,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 16:46:51,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-20 16:46:51,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-20 16:46:51,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-20 16:46:51,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-20 16:46:51,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-20 16:46:51,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-20 16:46:51,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-20 16:46:51,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-20 16:46:51,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 16:46:51,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 16:46:51,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:51,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:51,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:52,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:52,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 16:46:52,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 16:46:52,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 16:46:52,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7434 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 16:46:52,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 16:46:52,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-20 16:46:52,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-20 16:46:52,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 16:46:52,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 16:46:52,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 16:46:52,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 16:46:52,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 16:46:52,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.8315 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 16:46:52,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-20 16:46:52,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 16:46:52,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 16:46:52,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 16:46:52,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-20 16:46:52,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 16:46:52,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:52,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:52,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 16:46:52,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 16:46:52,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 5.4587 millis. select * from t_types  
 
 2020-11-20 16:46:52,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-20 16:46:52,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-20 16:46:52,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-20 16:46:52,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-20 16:46:52,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-20 16:46:52,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-20 16:46:52,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-20 16:46:52,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-20 16:46:52,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-20 16:46:52,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 16:46:52,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:52,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:52,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 16:46:52,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 16:46:52,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8649 millis. select * from t_tages  
 
 2020-11-20 16:46:52,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-20 16:46:52,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-20 16:46:52,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-20 16:46:52,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-20 16:46:52,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-20 16:46:52,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-20 16:46:52,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-20 16:46:52,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-20 16:46:52,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-20 16:46:52,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-20 16:46:52,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 16:46:52,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:52,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:52,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 16:46:52,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 16:46:52,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3403 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 16:46:52,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-20 16:46:52,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-20 16:46:52,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-20 16:46:52,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-20 16:46:52,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 16:46:52,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 16:46:52,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 16:46:52,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.7596 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 16:46:52,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-20 16:46:52,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 16:46:52,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 16:46:52,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 16:46:52,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-20 16:46:52,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 16:46:52,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:54,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:54,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:46:54,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-20 16:46:54,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 16:46:54,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2655 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:46:54,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-20 16:46:54,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 16:46:54,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 16:46:54,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-20 16:46:54,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 16:46:54,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:46:54,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:46:54,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 16:46:54,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-20 16:46:54,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-20 16:46:54,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.711 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 16:46:54,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-20 16:46:54,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 16:46:54,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 16:46:54,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-20 16:46:54,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-20 16:46:54,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:48:49,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1025} connected  
 
 2020-11-20 16:48:49,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1026} connected  
 
 2020-11-20 16:48:49,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1027} connected  
 
 2020-11-20 16:48:49,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1028} connected  
 
 2020-11-20 16:48:49,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1029} connected  
 
 2020-11-20 16:48:49,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:48:50,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:48:50,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 16:48:50,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 16:48:50,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.4321 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 16:48:50,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 16:48:50,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 16:48:50,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 16:48:50,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 16:48:50,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 16:48:50,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 16:48:50,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 16:48:50,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 16:48:50,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 16:48:50,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 16:48:50,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4425 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 16:48:50,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 16:48:50,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 16:48:50,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 16:48:50,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 16:48:50,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 16:48:50,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:34,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1031} connected  
 
 2020-11-20 20:46:35,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1032} connected  
 
 2020-11-20 20:46:35,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1033} connected  
 
 2020-11-20 20:46:35,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1034} connected  
 
 2020-11-20 20:46:35,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1035} connected  
 
 2020-11-20 20:46:35,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:35,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-20 20:46:35,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 20:46:35,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 20:46:35,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 77.616 millis. select * from t_types  
 
 2020-11-20 20:46:35,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 20:46:35,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-20 20:46:35,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-20 20:46:35,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-20 20:46:35,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-20 20:46:35,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-20 20:46:35,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-20 20:46:35,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-20 20:46:35,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 20:46:35,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 20:46:35,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:35,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:35,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-20 20:46:35,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 20:46:35,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 20:46:35,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 8.1421 millis. select * from t_tages  
 
 2020-11-20 20:46:35,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 20:46:35,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-20 20:46:35,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-20 20:46:35,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-20 20:46:35,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-20 20:46:35,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-20 20:46:35,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-20 20:46:35,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-20 20:46:35,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-20 20:46:35,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 20:46:35,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 20:46:35,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:35,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:35,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:35,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:36,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 20:46:36,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 20:46:36,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 20:46:36,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 10.6838 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 20:46:36,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 20:46:36,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-20 20:46:36,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-20 20:46:36,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 20:46:36,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 20:46:36,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 20:46:36,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 20:46:36,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 20:46:36,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.7003 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 20:46:36,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-20 20:46:36,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 20:46:36,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 20:46:36,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 20:46:36,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-20 20:46:36,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 20:46:36,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:36,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:36,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 20:46:36,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 20:46:36,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 29.6569 millis. select * from t_types  
 
 2020-11-20 20:46:36,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-20 20:46:36,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-20 20:46:36,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-20 20:46:36,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-20 20:46:36,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-20 20:46:36,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-20 20:46:36,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-20 20:46:36,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-20 20:46:36,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-20 20:46:36,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 20:46:36,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:36,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:36,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 20:46:36,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 20:46:36,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8891 millis. select * from t_tages  
 
 2020-11-20 20:46:36,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-20 20:46:36,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-20 20:46:36,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-20 20:46:36,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-20 20:46:36,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-20 20:46:36,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-20 20:46:36,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-20 20:46:36,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-20 20:46:36,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-20 20:46:36,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-20 20:46:36,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 20:46:36,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:36,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:36,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 20:46:36,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 20:46:36,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.709 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 20:46:36,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-20 20:46:36,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-20 20:46:36,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-20 20:46:36,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-20 20:46:36,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 20:46:36,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 20:46:36,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 20:46:36,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0869 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 20:46:36,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-20 20:46:36,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 20:46:36,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 20:46:36,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 20:46:36,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-20 20:46:36,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 20:46:36,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:41,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:41,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 20:46:41,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-20 20:46:41,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 20:46:41,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 9.1893 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 20:46:41,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-20 20:46:41,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 20:46:41,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 20:46:41,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-20 20:46:41,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 20:46:41,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:46:42,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:46:42,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 20:46:42,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [12]  
 
 2020-11-20 20:46:42,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-20 20:46:42,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 18.1619 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 20:46:42,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-20 20:46:42,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 20:46:42,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-20 20:46:42,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-20 20:46:42,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:47:15,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:47:15,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-20 20:47:15,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-20 20:47:15,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.6475 millis. select * from t_types  
 
 2020-11-20 20:47:15,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} open  
 
 2020-11-20 20:47:15,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Header: [id, name]  
 
 2020-11-20 20:47:15,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [8, 方法论]  
 
 2020-11-20 20:47:15,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [9, 理论类]  
 
 2020-11-20 20:47:15,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [21, 错误日记]  
 
 2020-11-20 20:47:15,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [23, 开发日记]  
 
 2020-11-20 20:47:15,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [24, 实践论]  
 
 2020-11-20 20:47:15,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [25, 想法论]  
 
 2020-11-20 20:47:15,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} closed  
 
 2020-11-20 20:47:15,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 20:47:15,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:47:15,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:47:15,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-20 20:47:15,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-20 20:47:15,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0677 millis. select * from t_tages  
 
 2020-11-20 20:47:15,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} open  
 
 2020-11-20 20:47:15,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Header: [id, tage]  
 
 2020-11-20 20:47:15,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [1, 学习日记]  
 
 2020-11-20 20:47:15,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [2, 错误笔记]  
 
 2020-11-20 20:47:15,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [3, 数据库笔记]  
 
 2020-11-20 20:47:15,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [4, 程序运行日记]  
 
 2020-11-20 20:47:15,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [5, 开发日记]  
 
 2020-11-20 20:47:15,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [8, 开发手册]  
 
 2020-11-20 20:47:15,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [10, 搭建日记]  
 
 2020-11-20 20:47:15,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} closed  
 
 2020-11-20 20:47:15,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 20:47:15,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:47:15,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:47:15,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-20 20:47:15,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-20 20:47:15,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3772 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-20 20:47:15,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} open  
 
 2020-11-20 20:47:15,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} Header: [count(0)]  
 
 2020-11-20 20:47:15,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} Result: [2]  
 
 2020-11-20 20:47:15,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} closed  
 
 2020-11-20 20:47:15,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 20:47:15,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-20 20:47:15,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 20:47:15,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.8463 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-20 20:47:15,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} open  
 
 2020-11-20 20:47:15,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-20 20:47:15,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-20 20:47:15,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-20 20:47:15,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} closed  
 
 2020-11-20 20:47:15,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 20:47:15,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:47:16,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:47:16,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-20 20:47:16,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 20:47:16,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 11.8004 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 20:47:16,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} open  
 
 2020-11-20 20:47:16,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 20:47:16,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 20:47:16,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} closed  
 
 2020-11-20 20:47:16,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 20:47:16,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:47:16,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:47:16,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-20 20:47:16,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-20 20:47:16,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.9625 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 20:47:16,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} open  
 
 2020-11-20 20:47:16,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 20:47:16,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 20:47:16,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} closed  
 
 2020-11-20 20:47:16,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-20 20:47:16,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:47:16,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:47:16,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 20:47:16,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-20 20:47:16,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 20:47:16,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.0011 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 20:47:16,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} open  
 
 2020-11-20 20:47:16,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 20:47:16,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 20:47:16,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} closed  
 
 2020-11-20 20:47:16,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-20 20:47:16,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:54:26,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1036} connected  
 
 2020-11-20 20:54:26,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1037} connected  
 
 2020-11-20 20:54:26,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1038} connected  
 
 2020-11-20 20:54:26,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1039} connected  
 
 2020-11-20 20:54:26,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1040} connected  
 
 2020-11-20 20:54:26,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:54:27,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 20:54:27,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 20:54:27,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 20:54:27,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.1753 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 20:54:27,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 20:54:27,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 20:54:27,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 20:54:27,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 20:54:27,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 20:54:27,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:54:27,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:54:27,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 20:54:27,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 20:54:27,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 20:54:27,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.0112 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 20:54:27,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 20:54:27,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 20:54:27,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 20:54:27,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 20:54:27,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 20:54:27,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:54:27,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:54:27,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 20:54:27,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 20:54:27,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 20:54:27,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8025 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 20:54:27,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 20:54:27,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 20:54:27,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 20:54:27,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 20:54:27,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 20:54:27,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:59:53,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1041} connected  
 
 2020-11-20 20:59:53,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1042} connected  
 
 2020-11-20 20:59:53,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1043} connected  
 
 2020-11-20 20:59:53,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1044} connected  
 
 2020-11-20 20:59:53,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1045} connected  
 
 2020-11-20 20:59:53,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:59:53,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 20:59:53,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 20:59:53,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 20:59:53,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 27.205 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 20:59:53,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 20:59:53,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 20:59:53,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 20:59:53,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 20:59:53,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 20:59:53,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:59:54,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:59:54,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 20:59:54,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 20:59:54,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 20:59:54,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 8.3583 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 20:59:54,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 20:59:54,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 20:59:54,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 20:59:54,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 20:59:54,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 20:59:54,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 20:59:54,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 20:59:54,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 20:59:54,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 20:59:54,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 20:59:54,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 5.4911 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 20:59:54,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 20:59:54,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 20:59:54,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 20:59:54,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 20:59:54,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 20:59:54,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:00:52,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1046} connected  
 
 2020-11-20 21:00:52,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1047} connected  
 
 2020-11-20 21:00:52,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1048} connected  
 
 2020-11-20 21:00:52,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1049} connected  
 
 2020-11-20 21:00:53,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1050} connected  
 
 2020-11-20 21:00:53,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:00:53,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:00:53,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:00:53,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:00:53,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.5134 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:00:53,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 21:00:53,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:00:53,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:00:53,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 21:00:53,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:00:53,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:00:53,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:00:53,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:00:53,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:00:53,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:00:53,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.6459 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:00:53,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 21:00:53,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:00:53,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:00:53,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 21:00:53,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:00:53,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:00:53,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:00:53,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:00:53,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:00:53,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:00:53,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.2689 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:00:53,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 21:00:53,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:00:53,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:00:53,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 21:00:53,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:00:53,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:13:13,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1051} connected  
 
 2020-11-20 21:13:13,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1052} connected  
 
 2020-11-20 21:13:13,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1053} connected  
 
 2020-11-20 21:13:13,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1054} connected  
 
 2020-11-20 21:13:13,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1055} connected  
 
 2020-11-20 21:13:13,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:13:13,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:13:13,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:13:13,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:13:13,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.6807 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:13:13,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 21:13:13,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:13:14,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:13:14,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 21:13:14,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:13:14,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:13:14,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:13:14,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:13:14,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:13:14,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:13:14,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.238 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:13:14,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 21:13:14,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:13:14,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:13:14,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 21:13:14,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:13:14,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:13:14,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:13:14,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:13:14,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:13:14,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:13:14,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7686 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:13:14,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 21:13:14,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:13:14,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:13:14,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 21:13:14,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:13:14,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:14:00,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1056} connected  
 
 2020-11-20 21:14:00,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1057} connected  
 
 2020-11-20 21:14:00,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1058} connected  
 
 2020-11-20 21:14:00,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1059} connected  
 
 2020-11-20 21:14:00,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1060} connected  
 
 2020-11-20 21:14:00,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:14:00,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:14:00,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:14:00,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:14:00,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.059 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:14:00,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 21:14:00,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:14:00,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:14:00,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 21:14:00,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:14:00,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:14:01,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:14:01,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:14:01,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:14:01,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:14:01,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.2716 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:14:01,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 21:14:01,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:14:01,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:14:01,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 21:14:01,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:14:01,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:14:01,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:14:01,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:14:01,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:14:01,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:14:01,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8657 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:14:01,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 21:14:01,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:14:01,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:14:01,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 21:14:01,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:14:01,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:15:27,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1061} connected  
 
 2020-11-20 21:15:27,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1062} connected  
 
 2020-11-20 21:15:27,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1063} connected  
 
 2020-11-20 21:15:27,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1064} connected  
 
 2020-11-20 21:15:27,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1065} connected  
 
 2020-11-20 21:15:27,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:15:27,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:15:27,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:15:27,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:15:27,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.8898 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:15:27,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 21:15:27,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:15:27,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:15:27,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 21:15:27,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:15:27,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:15:28,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:15:28,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:15:28,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:15:28,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:15:28,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.0524 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:15:28,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 21:15:28,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:15:28,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:15:28,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 21:15:28,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:15:28,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:15:28,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:15:28,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:15:28,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:15:28,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:15:28,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7455 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:15:28,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 21:15:28,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:15:28,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:15:28,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 21:15:28,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:15:28,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:17:07,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1066} connected  
 
 2020-11-20 21:17:07,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1067} connected  
 
 2020-11-20 21:17:07,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1068} connected  
 
 2020-11-20 21:17:07,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1069} connected  
 
 2020-11-20 21:17:07,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1070} connected  
 
 2020-11-20 21:17:07,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:17:08,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:17:08,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:17:08,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:17:08,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 28.2438 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:17:08,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 21:17:08,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:17:08,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:17:08,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 21:17:08,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:17:08,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:17:09,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:17:09,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:17:09,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:17:09,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:17:09,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.2662 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:17:09,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 21:17:09,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:17:09,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:17:09,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 21:17:09,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:17:09,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:17:09,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:17:09,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:17:09,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:17:09,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:17:09,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8937 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:17:09,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 21:17:09,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:17:09,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:17:09,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 21:17:09,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:17:09,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:17:27,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:17:27,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:17:27,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:17:27,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.7734 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:17:27,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-20 21:17:27,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:17:27,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:17:27,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-20 21:17:27,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:17:27,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:17:27,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:17:27,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 21:17:27,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [null, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.225, 11]  
 
 2020-11-20 21:17:27,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER]  
 
 2020-11-20 21:17:27,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 32.3054 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 21:17:27,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-20 21:17:27,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:17:27,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:17:27,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:17:27,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:17:27,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.7514 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:17:27,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} open  
 
 2020-11-20 21:17:27,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:17:27,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:17:27,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:17:27,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} closed  
 
 2020-11-20 21:17:27,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:17:27,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:17:27,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:17:27,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 21:17:27,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:17:27,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.3271 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:17:27,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-20 21:17:27,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:17:27,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-20 21:17:27,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:17:27,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:17:27,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:17:27,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:17:27,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:17:27,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.2658 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:17:27,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-20 21:17:27,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:17:27,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:17:27,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-20 21:17:27,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:17:27,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:04,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:04,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:18:04,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:18:04,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.6647 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:18:04,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-20 21:18:04,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:18:04,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:18:04,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-20 21:18:04,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:18:04,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:04,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:04,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_comment where id=?  
 
 2020-11-20 21:18:04,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-20 21:18:04,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 21:18:04,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.5841 millis. select * from t_comment where id=?  
 
 2020-11-20 21:18:04,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-20 21:18:04,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:18:04,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:18:04,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-20 21:18:04,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 21:18:04,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:04,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:04,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 21:18:04,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [null, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.41, 11, 11]  
 
 2020-11-20 21:18:04,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER, INTEGER]  
 
 2020-11-20 21:18:04,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 14.8665 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 21:18:04,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-20 21:18:04,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:04,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:04,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:18:04,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:18:04,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2777 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:18:04,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} open  
 
 2020-11-20 21:18:04,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:18:04,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:18:04,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:18:04,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} closed  
 
 2020-11-20 21:18:04,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:18:04,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:04,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:04,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 21:18:04,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:18:04,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3841 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:18:04,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} open  
 
 2020-11-20 21:18:04,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:18:04,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-20 21:18:04,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} closed  
 
 2020-11-20 21:18:04,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:18:04,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:04,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:04,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:18:04,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:18:04,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3968 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:18:04,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} open  
 
 2020-11-20 21:18:04,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:18:04,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:18:04,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} closed  
 
 2020-11-20 21:18:04,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:18:04,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:36,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:36,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:18:36,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:18:36,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.9096 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:18:36,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} open  
 
 2020-11-20 21:18:36,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:18:36,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:18:36,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} closed  
 
 2020-11-20 21:18:36,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:18:36,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:36,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:36,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [10]  
 
 2020-11-20 21:18:36,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 21:18:36,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.447 millis. select * from t_comment where id=?  
 
 2020-11-20 21:18:36,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} open  
 
 2020-11-20 21:18:36,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:18:36,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:18:36,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} closed  
 
 2020-11-20 21:18:36,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-20 21:18:36,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:36,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:36,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [null, 小白, 1799749389@qq.com, 小白回复小红的, /image/weixin.jpg, 2020-11-20 21:18:36.264, 11, 10]  
 
 2020-11-20 21:18:36,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER, INTEGER]  
 
 2020-11-20 21:18:36,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 9.331 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 21:18:36,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-20 21:18:36,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:36,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:36,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:18:36,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:18:36,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8699 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:18:36,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} open  
 
 2020-11-20 21:18:36,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:18:36,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:18:36,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:18:36,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} closed  
 
 2020-11-20 21:18:36,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:18:36,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:36,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:36,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 21:18:36,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:18:36,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.1221 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:18:36,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50015} open  
 
 2020-11-20 21:18:36,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50015} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:18:36,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50015} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-20 21:18:36,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50015} closed  
 
 2020-11-20 21:18:36,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:18:36,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:18:36,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:18:36,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:18:36,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:18:36,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.1624 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:18:36,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50016} open  
 
 2020-11-20 21:18:36,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50016} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:18:36,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50016} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:18:36,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50016} closed  
 
 2020-11-20 21:18:36,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:18:36,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:20:15,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-20 21:20:15,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-20 21:20:15,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-20 21:20:15,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-20 21:20:15,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-20 21:20:15,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-1072} connected  
 
 2020-11-20 21:20:15,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:15,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:20:15,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [11]  
 
 2020-11-20 21:20:15,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 21:20:16,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 3.1886 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:20:16,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} open  
 
 2020-11-20 21:20:16,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:20:16,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:20:16,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} closed  
 
 2020-11-20 21:20:16,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-20 21:20:16,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:16,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:16,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:20:16,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [11]  
 
 2020-11-20 21:20:16,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER]  
 
 2020-11-20 21:20:16,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 1.8055 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:20:16,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50018} open  
 
 2020-11-20 21:20:16,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50018} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:16,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50018} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:20:16,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50018} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:20:16,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50018} closed  
 
 2020-11-20 21:20:16,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-20 21:20:16,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:16,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:16,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:16,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [11]  
 
 2020-11-20 21:20:16,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 21:20:16,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 1.8202 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:16,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50019} open  
 
 2020-11-20 21:20:16,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50019} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:16,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50019} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-20 21:20:16,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50019} closed  
 
 2020-11-20 21:20:16,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-20 21:20:16,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:16,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:16,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [9]  
 
 2020-11-20 21:20:16,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 21:20:16,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 1.2446 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:16,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50020} open  
 
 2020-11-20 21:20:16,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50020} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:16,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50020} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:20:16,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50020} closed  
 
 2020-11-20 21:20:16,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-20 21:20:16,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:18,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:18,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [11]  
 
 2020-11-20 21:20:18,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 21:20:18,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.2405 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:20:18,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50021} open  
 
 2020-11-20 21:20:18,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50021} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:20:18,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50021} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:20:18,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50021} closed  
 
 2020-11-20 21:20:18,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-20 21:20:18,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:18,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:18,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [11]  
 
 2020-11-20 21:20:18,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER]  
 
 2020-11-20 21:20:18,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 1.9526 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:20:18,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50022} open  
 
 2020-11-20 21:20:18,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50022} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:18,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50022} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:20:18,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50022} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:20:18,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50022} closed  
 
 2020-11-20 21:20:18,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-20 21:20:18,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:18,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:18,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [11]  
 
 2020-11-20 21:20:18,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 21:20:18,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 1.6737 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:18,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50023} open  
 
 2020-11-20 21:20:18,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50023} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:18,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50023} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-20 21:20:18,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50023} closed  
 
 2020-11-20 21:20:18,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-20 21:20:18,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:18,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:18,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [9]  
 
 2020-11-20 21:20:18,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 21:20:18,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 1.4484 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:18,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} open  
 
 2020-11-20 21:20:18,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:18,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:20:18,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} closed  
 
 2020-11-20 21:20:18,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-20 21:20:18,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:19,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:19,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [11]  
 
 2020-11-20 21:20:19,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 21:20:19,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.745 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:20:19,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} open  
 
 2020-11-20 21:20:19,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:20:19,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:20:19,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} closed  
 
 2020-11-20 21:20:19,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-20 21:20:19,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:19,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:19,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [11]  
 
 2020-11-20 21:20:19,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER]  
 
 2020-11-20 21:20:19,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 1.4792 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:20:19,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50026} open  
 
 2020-11-20 21:20:19,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50026} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:19,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50026} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:20:19,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50026} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:20:19,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50026} closed  
 
 2020-11-20 21:20:19,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-20 21:20:19,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:19,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:19,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [11]  
 
 2020-11-20 21:20:19,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 21:20:19,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 1.4041 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:19,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50027} open  
 
 2020-11-20 21:20:19,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50027} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:19,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50027} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-20 21:20:19,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50027} closed  
 
 2020-11-20 21:20:19,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-20 21:20:19,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:19,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:20:19,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [9]  
 
 2020-11-20 21:20:19,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-20 21:20:19,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 1.7771 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:19,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50028} open  
 
 2020-11-20 21:20:19,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50028} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:19,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50028} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:20:19,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50028} closed  
 
 2020-11-20 21:20:19,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-20 21:20:19,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:20:37,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1073} connected  
 
 2020-11-20 21:20:37,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1074} connected  
 
 2020-11-20 21:20:37,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1075} connected  
 
 2020-11-20 21:20:37,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1076} connected  
 
 2020-11-20 21:20:37,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1077} connected  
 
 2020-11-20 21:20:38,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:20:38,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:20:38,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-20 21:20:38,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-20 21:20:38,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.712 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:20:38,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-20 21:20:38,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:20:38,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:20:38,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-20 21:20:38,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-20 21:20:38,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:20:38,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:20:38,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:20:38,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-20 21:20:38,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-20 21:20:38,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2592 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:20:38,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-20 21:20:38,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:38,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:20:38,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:20:38,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-20 21:20:38,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-20 21:20:38,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:20:38,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:20:38,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:38,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [11]  
 
 2020-11-20 21:20:38,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:20:38,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.4638 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:38,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-20 21:20:38,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:38,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-20 21:20:38,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-20 21:20:38,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:20:38,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:20:38,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-20 21:20:38,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [9]  
 
 2020-11-20 21:20:38,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-20 21:20:38,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.4942 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:20:38,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} open  
 
 2020-11-20 21:20:38,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:20:38,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:20:38,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} closed  
 
 2020-11-20 21:20:38,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-20 21:20:38,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-20 21:21:57,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-20 21:21:57,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-20 21:21:57,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-20 21:21:57,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-20 21:21:57,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-20 21:21:57,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-1078} connected  
 
 2020-11-20 21:21:57,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:21:57,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:21:57,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : [11]  
 
 2020-11-20 21:21:57,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 21:21:57,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} executed. 6.9722 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:21:57,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50004} open  
 
 2020-11-20 21:21:57,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:21:57,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:21:57,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50004} closed  
 
 2020-11-20 21:21:57,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-20 21:21:57,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:21:57,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:21:57,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} created. select * from t_comment where id=?  
 
 2020-11-20 21:21:57,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Parameters : [9]  
 
 2020-11-20 21:21:57,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Types : [INTEGER]  
 
 2020-11-20 21:21:57,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} executed. 3.069 millis. select * from t_comment where id=?  
 
 2020-11-20 21:21:57,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50005} open  
 
 2020-11-20 21:21:57,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50005} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:21:57,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50005} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:21:57,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50005} closed  
 
 2020-11-20 21:21:57,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} clearParameters.   
 
 2020-11-20 21:21:57,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:21:57,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:21:57,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 21:21:57,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : [null, 小白, cf1799749389@qq.com, 小白回复小红, /image/weixin.jpg, 2020-11-20 21:21:57.184, 11, 9]  
 
 2020-11-20 21:21:57,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, TIMESTAMP, INTEGER, INTEGER]  
 
 2020-11-20 21:21:57,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 5.4814 millis. insert into t_comment
         (  
            id
         , 
            nickename
         , 
            email
         , 
            content
         , 
            avator
         , 
            creattime
         , 
            blog_id
         , 
            parentcomment_id
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-20 21:21:57,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-20 21:21:57,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:21:57,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:21:57,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:21:57,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [11]  
 
 2020-11-20 21:21:57,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 21:21:57,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 3.3478 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:21:57,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} open  
 
 2020-11-20 21:21:57,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:21:57,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:21:57,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:21:57,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} closed  
 
 2020-11-20 21:21:57,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-20 21:21:57,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:21:57,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:21:57,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:21:57,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [11]  
 
 2020-11-20 21:21:57,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER]  
 
 2020-11-20 21:21:57,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.3159 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:21:57,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} open  
 
 2020-11-20 21:21:57,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:21:57,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-20 21:21:57,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} closed  
 
 2020-11-20 21:21:57,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-20 21:21:57,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:21:57,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:21:57,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [9]  
 
 2020-11-20 21:21:57,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER]  
 
 2020-11-20 21:21:57,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.3971 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:21:57,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50008} open  
 
 2020-11-20 21:21:57,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50008} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:21:57,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50008} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:21:57,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50008} Result: [14, 小白, cf1799749389@qq.com, 小白回复小红, /image/weixin.jpg, 2020-11-20 21:21:57.0, 11, 9]  
 
 2020-11-20 21:21:57,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50008} closed  
 
 2020-11-20 21:21:57,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-20 21:21:57,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:22:34,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:22:34,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : [11]  
 
 2020-11-20 21:22:34,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : [INTEGER]  
 
 2020-11-20 21:22:34,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} executed. 3.7744 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-20 21:22:34,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50009} open  
 
 2020-11-20 21:22:34,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-20 21:22:34,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-20 21:22:34,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50009} closed  
 
 2020-11-20 21:22:34,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-20 21:22:34,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:22:35,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:22:35,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [11]  
 
 2020-11-20 21:22:35,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [INTEGER]  
 
 2020-11-20 21:22:35,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 1.7996 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-20 21:22:35,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} open  
 
 2020-11-20 21:22:35,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:22:35,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-20 21:22:35,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-20 21:22:35,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} closed  
 
 2020-11-20 21:22:35,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-20 21:22:35,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:22:35,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:22:35,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [11]  
 
 2020-11-20 21:22:35,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER]  
 
 2020-11-20 21:22:35,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.2133 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:22:35,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} open  
 
 2020-11-20 21:22:35,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:22:35,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-20 21:22:35,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} closed  
 
 2020-11-20 21:22:35,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-20 21:22:35,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-20 21:22:35,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-20 21:22:35,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [9]  
 
 2020-11-20 21:22:35,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER]  
 
 2020-11-20 21:22:35,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 1.443 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-20 21:22:35,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50012} open  
 
 2020-11-20 21:22:35,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50012} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-20 21:22:35,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50012} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-20 21:22:35,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50012} closed  
 
 2020-11-20 21:22:35,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-20 21:22:35,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 