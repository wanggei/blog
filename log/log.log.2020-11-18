
 2020-11-18 08:13:01,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-273} connected  
 
 2020-11-18 08:13:01,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-274} connected  
 
 2020-11-18 08:13:01,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-275} connected  
 
 2020-11-18 08:13:01,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-276} connected  
 
 2020-11-18 08:13:01,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-277} connected  
 
 2020-11-18 08:13:01,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:13:01,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 08:13:01,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 08:13:01,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 08:13:01,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.5174 millis. select * from t_types  
 
 2020-11-18 08:13:01,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 08:13:01,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 08:13:01,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 08:13:01,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 08:13:01,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 08:13:01,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 08:13:01,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 08:13:01,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 08:13:01,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 08:13:01,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 08:13:01,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:13:01,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:13:01,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 08:13:01,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 08:13:01,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 08:13:01,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3689 millis. select * from t_tages  
 
 2020-11-18 08:13:01,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 08:13:01,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 08:13:01,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 08:13:01,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 08:13:01,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 08:13:01,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 08:13:01,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 08:13:01,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 08:13:01,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 08:13:01,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 08:13:01,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:13:01,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:13:01,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 08:13:01,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 08:13:01,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 5.2522 millis. select * from t_types  
 
 2020-11-18 08:13:01,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} open  
 
 2020-11-18 08:13:01,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Header: [id, name]  
 
 2020-11-18 08:13:01,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [8, 方法论]  
 
 2020-11-18 08:13:01,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [9, 理论类]  
 
 2020-11-18 08:13:01,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [21, 错误日记]  
 
 2020-11-18 08:13:01,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [23, 开发日记]  
 
 2020-11-18 08:13:01,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [24, 实践论]  
 
 2020-11-18 08:13:01,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [25, 想法论]  
 
 2020-11-18 08:13:01,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} closed  
 
 2020-11-18 08:13:01,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 08:13:01,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:13:01,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:13:01,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 08:13:01,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 08:13:01,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8067 millis. select * from t_tages  
 
 2020-11-18 08:13:01,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} open  
 
 2020-11-18 08:13:01,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Header: [id, tage]  
 
 2020-11-18 08:13:01,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [1, 学习日记]  
 
 2020-11-18 08:13:01,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-18 08:13:01,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-18 08:13:01,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-18 08:13:01,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [5, 开发日记]  
 
 2020-11-18 08:13:01,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [8, 开发手册]  
 
 2020-11-18 08:13:01,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} closed  
 
 2020-11-18 08:13:01,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 08:13:01,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:13:09,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:13:09,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 08:13:09,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 08:13:09,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 08:13:09,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.4333 millis. select * from t_user where username=?  
 
 2020-11-18 08:13:09,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} open  
 
 2020-11-18 08:13:09,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 08:13:09,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 08:13:09,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} closed  
 
 2020-11-18 08:13:09,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 08:13:09,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:13:13,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:13:13,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:13:13,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:13:13,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:13:13,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 08:13:13,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 08:13:13,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6408 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:13:13,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} open  
 
 2020-11-18 08:13:13,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} Header: [count(0)]  
 
 2020-11-18 08:13:13,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} Result: [2]  
 
 2020-11-18 08:13:13,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} closed  
 
 2020-11-18 08:13:13,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 08:13:13,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:13:13,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 08:13:13,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 08:13:13,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.6854 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:13:13,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} open  
 
 2020-11-18 08:13:13,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 08:13:13,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 08:13:13,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 08:13:13,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} closed  
 
 2020-11-18 08:13:13,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 08:13:13,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:13:16,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:13:16,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:13:16,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [1]  
 
 2020-11-18 08:13:16,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 08:13:16,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 7.7444 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:13:16,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} open  
 
 2020-11-18 08:13:16,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 08:13:16,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 08:13:16,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 08:13:16,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} closed  
 
 2020-11-18 08:13:16,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 08:13:16,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:16:39,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-278} connected  
 
 2020-11-18 08:16:39,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-279} connected  
 
 2020-11-18 08:16:39,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-280} connected  
 
 2020-11-18 08:16:39,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-281} connected  
 
 2020-11-18 08:16:39,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-282} connected  
 
 2020-11-18 08:16:39,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:16:39,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 08:16:39,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 08:16:39,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 08:16:39,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.6085 millis. select * from t_types  
 
 2020-11-18 08:16:39,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 08:16:39,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 08:16:39,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 08:16:39,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 08:16:39,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 08:16:39,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 08:16:39,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 08:16:39,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 08:16:39,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 08:16:39,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 08:16:39,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:16:39,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:16:39,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 08:16:39,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 08:16:39,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 08:16:39,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8256 millis. select * from t_tages  
 
 2020-11-18 08:16:39,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 08:16:39,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 08:16:39,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 08:16:39,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 08:16:39,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 08:16:39,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 08:16:39,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 08:16:39,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 08:16:39,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 08:16:39,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 08:16:39,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:16:51,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:16:51,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 08:16:51,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 08:16:51,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 08:16:51,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.9868 millis. select * from t_user where username=?  
 
 2020-11-18 08:16:51,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 08:16:51,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 08:16:51,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 08:16:51,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 08:16:51,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 08:16:51,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:16:54,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:16:54,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:16:54,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:16:54,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:16:54,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 08:16:54,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 08:16:54,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.7769 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:16:54,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 08:16:54,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 08:16:54,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 08:16:54,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 08:16:54,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 08:16:54,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:16:54,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 08:16:54,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 08:16:54,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.0438 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:16:54,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 08:16:54,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 08:16:54,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 08:16:54,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 08:16:54,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 08:16:54,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 08:16:54,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:16:55,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:16:55,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:16:55,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [1]  
 
 2020-11-18 08:16:55,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 08:16:55,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 13.4034 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:16:55,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 08:16:55,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 08:16:55,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 08:16:55,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 08:16:55,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 08:16:55,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 08:16:55,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:23:26,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-283} connected  
 
 2020-11-18 08:23:26,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-284} connected  
 
 2020-11-18 08:23:26,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-285} connected  
 
 2020-11-18 08:23:26,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-286} connected  
 
 2020-11-18 08:23:26,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-287} connected  
 
 2020-11-18 08:23:26,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:23:27,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 08:23:27,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 08:23:27,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 08:23:27,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.0048 millis. select * from t_types  
 
 2020-11-18 08:23:27,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 08:23:27,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 08:23:27,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 08:23:27,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 08:23:27,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 08:23:27,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 08:23:27,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 08:23:27,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 08:23:27,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 08:23:27,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 08:23:27,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:23:27,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:23:27,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 08:23:27,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 08:23:27,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 08:23:27,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.2559 millis. select * from t_tages  
 
 2020-11-18 08:23:27,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 08:23:27,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 08:23:27,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 08:23:27,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 08:23:27,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 08:23:27,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 08:23:27,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 08:23:27,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 08:23:27,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 08:23:27,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 08:23:27,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:23:39,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:23:39,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 08:23:39,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 08:23:39,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 08:23:39,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 9.6025 millis. select * from t_user where username=?  
 
 2020-11-18 08:23:39,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 08:23:39,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 08:23:39,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 08:23:39,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 08:23:39,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 08:23:39,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:23:43,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:23:43,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:23:43,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:23:43,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:23:43,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 08:23:43,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 08:23:43,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2703 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:23:43,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 08:23:43,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 08:23:43,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 08:23:43,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 08:23:43,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 08:23:43,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:23:43,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 08:23:43,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 08:23:43,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.2545 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:23:43,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 08:23:43,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 08:23:43,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 08:23:43,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 08:23:43,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 08:23:43,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 08:23:43,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:23:44,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:23:44,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:23:44,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [1]  
 
 2020-11-18 08:23:44,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 08:23:44,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 6.8042 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:23:44,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 08:23:44,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 08:23:44,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 08:23:44,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 08:23:44,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 08:23:44,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 08:23:44,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:45:08,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-288} connected  
 
 2020-11-18 08:45:08,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-289} connected  
 
 2020-11-18 08:45:08,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-290} connected  
 
 2020-11-18 08:45:08,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-291} connected  
 
 2020-11-18 08:45:08,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-292} connected  
 
 2020-11-18 08:45:08,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:45:08,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 08:45:08,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 08:45:08,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 08:45:08,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 40.8944 millis. select * from t_types  
 
 2020-11-18 08:45:08,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 08:45:08,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 08:45:08,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 08:45:08,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 08:45:08,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 08:45:08,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 08:45:08,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 08:45:08,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 08:45:08,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 08:45:08,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 08:45:08,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:45:08,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:45:08,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 08:45:08,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 08:45:08,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 08:45:08,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.7311 millis. select * from t_tages  
 
 2020-11-18 08:45:08,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 08:45:08,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 08:45:08,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 08:45:08,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 08:45:08,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 08:45:08,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 08:45:08,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 08:45:08,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 08:45:08,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 08:45:08,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 08:45:08,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:45:15,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:45:15,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 08:45:15,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 08:45:15,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 08:45:15,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.1877 millis. select * from t_user where username=?  
 
 2020-11-18 08:45:15,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 08:45:15,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 08:45:15,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 08:45:15,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 08:45:15,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 08:45:15,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:45:16,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:45:16,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:45:16,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:45:16,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:45:16,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 08:45:16,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 08:45:16,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.0108 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:45:16,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 08:45:16,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 08:45:16,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 08:45:16,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 08:45:16,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 08:45:16,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:45:16,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 08:45:16,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 08:45:16,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.54 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:45:16,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 08:45:16,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 08:45:16,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 08:45:16,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 08:45:16,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 08:45:16,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 08:45:16,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:45:18,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:45:18,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:45:18,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [1]  
 
 2020-11-18 08:45:18,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 08:45:18,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 8.7931 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:45:18,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 08:45:18,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 08:45:18,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 08:45:18,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 08:45:18,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 08:45:18,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 08:45:18,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:45:18,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:45:18,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 08:45:18,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 08:45:18,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8938 millis. select * from t_tages  
 
 2020-11-18 08:45:18,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 08:45:18,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 08:45:18,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 08:45:18,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 08:45:18,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 08:45:18,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 08:45:18,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 08:45:18,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 08:45:18,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 08:45:18,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 08:45:18,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:45:18,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:45:18,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 08:45:18,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 08:45:18,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.2291 millis. select * from t_types  
 
 2020-11-18 08:45:18,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 08:45:18,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 08:45:18,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 08:45:18,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 08:45:18,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 08:45:18,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 08:45:18,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 08:45:18,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 08:45:18,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 08:45:18,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 08:45:18,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:47:52,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-293} connected  
 
 2020-11-18 08:47:52,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-294} connected  
 
 2020-11-18 08:47:52,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-295} connected  
 
 2020-11-18 08:47:52,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-296} connected  
 
 2020-11-18 08:47:52,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-297} connected  
 
 2020-11-18 08:47:52,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:47:52,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 08:47:52,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 08:47:52,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 08:47:52,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 41.8032 millis. select * from t_types  
 
 2020-11-18 08:47:52,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 08:47:53,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 08:47:53,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 08:47:53,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 08:47:53,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 08:47:53,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 08:47:53,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 08:47:53,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 08:47:53,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 08:47:53,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 08:47:53,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:47:53,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:47:53,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 08:47:53,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 08:47:53,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 08:47:53,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.6226 millis. select * from t_tages  
 
 2020-11-18 08:47:53,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 08:47:53,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 08:47:53,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 08:47:53,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 08:47:53,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 08:47:53,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 08:47:53,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 08:47:53,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 08:47:53,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 08:47:53,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 08:47:53,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:47:59,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:47:59,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 08:47:59,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 08:47:59,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 08:47:59,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.18 millis. select * from t_user where username=?  
 
 2020-11-18 08:47:59,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 08:47:59,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 08:47:59,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 08:47:59,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 08:47:59,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 08:47:59,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:48:06,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:48:06,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:48:06,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:48:06,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:48:06,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 08:48:06,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 08:48:06,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.3507 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 08:48:06,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 08:48:06,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 08:48:06,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 08:48:06,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 08:48:06,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 08:48:06,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:48:06,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 08:48:06,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 08:48:06,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.5271 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 08:48:06,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 08:48:06,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 08:48:06,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 08:48:06,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 08:48:06,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 08:48:06,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 08:48:06,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:48:08,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:48:08,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:48:08,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 08:48:08,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 08:48:08,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.0989 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 08:48:08,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 08:48:08,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 08:48:08,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 08:48:08,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 08:48:08,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 08:48:08,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 08:48:08,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:48:08,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:48:08,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 08:48:08,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 08:48:08,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4612 millis. select * from t_tages  
 
 2020-11-18 08:48:08,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 08:48:08,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 08:48:08,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 08:48:08,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 08:48:08,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 08:48:08,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 08:48:08,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 08:48:08,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 08:48:08,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 08:48:08,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 08:48:08,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 08:48:08,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 08:48:08,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 08:48:08,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 08:48:08,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.4231 millis. select * from t_types  
 
 2020-11-18 08:48:08,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 08:48:08,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 08:48:08,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 08:48:08,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 08:48:08,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 08:48:08,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 08:48:08,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 08:48:08,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 08:48:08,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 08:48:08,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 08:48:08,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:13:52,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-301} connected  
 
 2020-11-18 10:13:52,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-302} connected  
 
 2020-11-18 10:13:52,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-303} connected  
 
 2020-11-18 10:13:52,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-304} connected  
 
 2020-11-18 10:13:52,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-305} connected  
 
 2020-11-18 10:13:52,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:13:52,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 10:13:52,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:13:52,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:13:52,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 18.886 millis. select * from t_types  
 
 2020-11-18 10:13:52,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 10:13:52,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 10:13:52,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 10:13:52,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 10:13:52,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 10:13:52,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 10:13:52,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 10:13:52,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 10:13:52,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 10:13:52,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:13:52,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:13:52,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:13:52,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 10:13:52,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:13:52,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:13:52,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3388 millis. select * from t_tages  
 
 2020-11-18 10:13:52,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 10:13:52,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 10:13:52,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 10:13:52,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 10:13:52,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 10:13:52,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 10:13:52,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 10:13:52,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 10:13:52,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 10:13:52,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:13:52,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:14:00,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:14:01,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 10:14:01,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 10:14:01,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 10:14:01,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 11.8112 millis. select * from t_user where username=?  
 
 2020-11-18 10:14:01,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 10:14:01,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 10:14:01,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 10:14:01,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 10:14:01,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 10:14:01,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:14:04,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:14:04,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:14:04,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:14:04,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:14:04,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 10:14:04,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 10:14:04,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 19.8758 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:14:04,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 10:14:04,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 10:14:04,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 10:14:04,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 10:14:04,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 10:14:04,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:14:04,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 10:14:04,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 10:14:04,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.4205 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:14:04,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 10:14:04,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 10:14:04,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 10:14:04,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 10:14:04,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 10:14:04,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 10:14:04,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:14:05,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:14:05,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:14:05,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 10:14:05,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 10:14:05,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 9.8973 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:14:05,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 10:14:05,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 10:14:05,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 10:14:05,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 10:14:05,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 10:14:05,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 10:14:05,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:14:05,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:14:05,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:14:05,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:14:05,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.5784 millis. select * from t_tages  
 
 2020-11-18 10:14:05,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 10:14:05,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 10:14:05,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 10:14:05,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 10:14:05,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 10:14:05,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 10:14:05,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 10:14:05,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 10:14:05,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 10:14:05,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:14:05,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:14:05,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:14:05,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:14:05,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:14:05,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.7893 millis. select * from t_types  
 
 2020-11-18 10:14:05,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 10:14:05,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 10:14:05,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 10:14:05,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 10:14:05,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 10:14:05,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 10:14:05,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 10:14:05,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 10:14:05,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 10:14:05,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:14:05,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:14:27,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:14:27,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='false'
            ,
                recommend='true'
            ,
                types='Types(id=8, name=null, blogs=null)'
            ,
                tages='[Tages(id=1, tage=null, blogs=null)]'
            ,
                tageId='[Ljava.lang.Object;@6aa2e3bb' 
        where id=?  
 
 2020-11-18 10:14:27,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [0]  
 
 2020-11-18 10:14:27,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 10:14:27,787 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='false'
            ,
                recommend='true'
            ,
                types='Types(id=8, name=null, blogs=null)'
            ,
                tages='[Tages(id=1, tage=null, blogs=null)]'
            ,
                tageId='[Ljava.lang.Object;@6aa2e3bb' 
        where id=?  
 java.sql.SQLSyntaxErrorException: Unknown column 'types' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.update(BaseServiceImpl.java:91)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:88)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 10:14:27,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 10:14:27,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 10:14:27,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:14:27,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:14:27,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:11,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-310} connected  
 
 2020-11-18 10:21:11,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-311} connected  
 
 2020-11-18 10:21:12,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-312} connected  
 
 2020-11-18 10:21:12,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-313} connected  
 
 2020-11-18 10:21:12,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-314} connected  
 
 2020-11-18 10:21:12,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:12,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 10:21:12,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:21:12,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:21:12,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 45.8682 millis. select * from t_types  
 
 2020-11-18 10:21:12,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 10:21:12,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 10:21:12,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 10:21:12,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 10:21:12,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 10:21:12,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 10:21:12,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 10:21:12,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 10:21:12,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 10:21:12,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:21:12,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:12,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:12,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 10:21:12,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:21:12,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:21:12,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.6966 millis. select * from t_tages  
 
 2020-11-18 10:21:12,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 10:21:12,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 10:21:12,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 10:21:12,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 10:21:12,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 10:21:12,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 10:21:12,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 10:21:12,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 10:21:12,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 10:21:12,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:21:12,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:30,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:31,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 10:21:31,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 10:21:31,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 10:21:31,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 8.0252 millis. select * from t_user where username=?  
 
 2020-11-18 10:21:31,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 10:21:31,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 10:21:31,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 10:21:31,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 10:21:31,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 10:21:31,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:43,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:43,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:43,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:43,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:21:43,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 10:21:43,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 10:21:43,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.9401 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:21:43,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 10:21:43,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 10:21:43,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 10:21:43,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 10:21:43,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 10:21:43,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:21:43,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 10:21:43,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 10:21:43,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.9611 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:21:43,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 10:21:43,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 10:21:43,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 10:21:43,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 10:21:43,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 10:21:43,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 10:21:43,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:45,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:45,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:21:45,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 10:21:45,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 10:21:45,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 7.5956 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:21:45,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 10:21:45,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 10:21:45,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 10:21:45,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 10:21:45,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 10:21:45,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 10:21:45,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:45,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:45,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:21:45,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:21:45,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7391 millis. select * from t_tages  
 
 2020-11-18 10:21:45,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 10:21:45,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 10:21:45,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 10:21:45,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 10:21:45,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 10:21:45,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 10:21:45,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 10:21:45,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 10:21:45,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 10:21:45,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:21:45,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:45,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:45,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:21:45,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:21:45,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.2266 millis. select * from t_types  
 
 2020-11-18 10:21:45,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 10:21:45,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 10:21:45,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 10:21:45,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 10:21:45,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 10:21:45,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 10:21:45,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 10:21:45,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 10:21:45,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 10:21:45,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:21:45,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:50,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:50,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='false'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 10:21:50,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [0]  
 
 2020-11-18 10:21:50,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 10:21:50,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 5.7675 millis. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='false'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 10:21:50,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 10:21:50,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:50,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:50,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. delete from t_blog_tages where bid=?  
 
 2020-11-18 10:21:50,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [0]  
 
 2020-11-18 10:21:50,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 10:21:50,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.7624 millis. delete from t_blog_tages where bid=?  
 
 2020-11-18 10:21:50,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 10:21:50,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:50,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:50,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. delete from t_blog_type where bid=?  
 
 2020-11-18 10:21:50,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [0]  
 
 2020-11-18 10:21:50,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 10:21:50,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.4793 millis. delete from t_blog_type where bid=?  
 
 2020-11-18 10:21:50,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 10:21:50,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:50,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:50,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 10:21:50,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 1, 0]  
 
 2020-11-18 10:21:50,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 10:21:50,639 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20009} execute error. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 java.sql.SQLIntegrityConstraintViolationException: Cannot add or update a child row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `bid` FOREIGN KEY (`bid`) REFERENCES `t_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy84.addForNotMath(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy85.addForNotMath(Unknown Source)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:94)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 10:21:50,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 10:21:50,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} closed  
 
 2020-11-18 10:21:50,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:21:50,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:21:50,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:41:51,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-316} connected  
 
 2020-11-18 10:41:51,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-317} connected  
 
 2020-11-18 10:41:51,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-318} connected  
 
 2020-11-18 10:41:51,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-319} connected  
 
 2020-11-18 10:41:51,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-320} connected  
 
 2020-11-18 10:41:51,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:41:51,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 10:41:51,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:41:51,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:41:51,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 25.7802 millis. select * from t_types  
 
 2020-11-18 10:41:51,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 10:41:51,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 10:41:51,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 10:41:51,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 10:41:51,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 10:41:51,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 10:41:51,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 10:41:51,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 10:41:51,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 10:41:51,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:41:51,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:41:51,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:41:51,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 10:41:51,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:41:51,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:41:51,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.3536 millis. select * from t_tages  
 
 2020-11-18 10:41:51,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 10:41:51,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 10:41:51,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 10:41:52,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 10:41:52,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 10:41:52,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 10:41:52,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 10:41:52,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 10:41:52,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 10:41:52,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:41:52,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:42:10,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:42:10,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 10:42:10,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 10:42:10,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 10:42:10,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.9721 millis. select * from t_user where username=?  
 
 2020-11-18 10:42:10,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 10:42:10,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 10:42:10,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 10:42:10,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 10:42:10,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 10:42:10,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:42:17,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:42:17,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:42:17,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:42:17,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:42:17,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 10:42:17,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 10:42:17,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.0388 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:42:17,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 10:42:17,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 10:42:17,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 10:42:17,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 10:42:17,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 10:42:17,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:42:17,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 10:42:17,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 10:42:17,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.0198 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:42:17,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 10:42:17,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 10:42:17,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 10:42:17,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 10:42:17,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 10:42:17,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 10:42:17,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:42:18,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:42:18,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:42:18,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 10:42:18,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 10:42:18,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.9842 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:42:18,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 10:42:18,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 10:42:18,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 10:42:18,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 10:42:18,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 10:42:18,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 10:42:18,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:42:18,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:42:18,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:42:18,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:42:18,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1004 millis. select * from t_tages  
 
 2020-11-18 10:42:18,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 10:42:18,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 10:42:18,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 10:42:18,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 10:42:18,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 10:42:18,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 10:42:18,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 10:42:18,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 10:42:18,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 10:42:18,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:42:18,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:42:18,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:42:18,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:42:18,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:42:18,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.0767 millis. select * from t_types  
 
 2020-11-18 10:42:18,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 10:42:18,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 10:42:18,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 10:42:18,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 10:42:18,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 10:42:18,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 10:42:18,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 10:42:18,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 10:42:18,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 10:42:18,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:42:18,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:42:23,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:42:23,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='false'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 10:42:23,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 10:42:23,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 10:42:23,658 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='false'
            ,
                recommend='true' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'appreciation' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.updateBlog(BaseServiceImpl.java:119)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:88)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 10:42:23,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 10:42:23,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 10:42:23,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:42:23,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:42:23,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:51:48,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-321} connected  
 
 2020-11-18 10:51:48,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-322} connected  
 
 2020-11-18 10:51:48,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-323} connected  
 
 2020-11-18 10:51:48,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-324} connected  
 
 2020-11-18 10:51:48,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-325} connected  
 
 2020-11-18 10:51:48,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:51:48,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 10:51:48,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:51:48,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:51:48,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 45.3233 millis. select * from t_types  
 
 2020-11-18 10:51:48,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 10:51:48,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 10:51:48,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 10:51:48,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 10:51:48,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 10:51:48,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 10:51:48,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 10:51:48,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 10:51:48,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 10:51:48,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:51:48,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:51:48,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:51:48,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 10:51:48,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:51:48,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:51:48,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.5171 millis. select * from t_tages  
 
 2020-11-18 10:51:48,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 10:51:48,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 10:51:48,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 10:51:48,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 10:51:48,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 10:51:48,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 10:51:48,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 10:51:48,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 10:51:48,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 10:51:48,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:51:48,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:51:55,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:51:55,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 10:51:55,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 10:51:55,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 10:51:55,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 8.9937 millis. select * from t_user where username=?  
 
 2020-11-18 10:51:55,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 10:51:55,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 10:51:55,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 10:51:55,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 10:51:55,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 10:51:55,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:51:57,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:51:57,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:51:57,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:51:57,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:51:57,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 10:51:57,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 10:51:57,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.5016 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:51:57,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 10:51:57,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 10:51:57,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 10:51:57,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 10:51:57,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 10:51:57,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:51:57,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 10:51:57,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 10:51:57,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2315 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:51:57,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 10:51:57,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 10:51:57,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 10:51:57,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 10:51:57,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 10:51:57,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 10:51:57,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:51:59,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:51:59,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:51:59,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 10:51:59,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 10:51:59,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.191 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:51:59,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 10:51:59,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 10:51:59,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 10:51:59,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 10:51:59,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 10:51:59,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 10:51:59,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:51:59,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:51:59,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:51:59,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:51:59,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3113 millis. select * from t_tages  
 
 2020-11-18 10:51:59,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 10:51:59,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 10:51:59,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 10:51:59,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 10:51:59,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 10:51:59,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 10:51:59,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 10:51:59,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 10:51:59,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 10:51:59,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:51:59,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:51:59,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:51:59,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:51:59,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:51:59,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.1227 millis. select * from t_types  
 
 2020-11-18 10:51:59,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 10:51:59,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 10:51:59,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 10:51:59,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 10:51:59,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 10:51:59,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 10:51:59,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 10:51:59,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 10:51:59,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 10:51:59,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:51:59,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:52:02,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:52:02,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 10:52:02,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 10:52:02,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 10:52:02,715 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'appreciation' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.updateBlog(BaseServiceImpl.java:119)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:88)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 10:52:02,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 10:52:02,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 10:52:02,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:52:02,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:52:02,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:00,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-329} connected  
 
 2020-11-18 10:55:00,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-330} connected  
 
 2020-11-18 10:55:00,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-331} connected  
 
 2020-11-18 10:55:00,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-332} connected  
 
 2020-11-18 10:55:00,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-333} connected  
 
 2020-11-18 10:55:00,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:01,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 10:55:01,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:55:01,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:55:01,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 48.5859 millis. select * from t_types  
 
 2020-11-18 10:55:01,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 10:55:01,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 10:55:01,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 10:55:01,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 10:55:01,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 10:55:01,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 10:55:01,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 10:55:01,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 10:55:01,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 10:55:01,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:55:01,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:01,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:01,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 10:55:01,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:55:01,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:55:01,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.0081 millis. select * from t_tages  
 
 2020-11-18 10:55:01,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 10:55:01,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 10:55:01,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 10:55:01,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 10:55:01,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 10:55:01,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 10:55:01,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 10:55:01,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 10:55:01,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 10:55:01,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:55:01,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:14,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:14,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 10:55:14,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 10:55:14,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 10:55:14,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.8846 millis. select * from t_user where username=?  
 
 2020-11-18 10:55:14,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 10:55:14,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 10:55:14,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 10:55:14,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 10:55:14,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 10:55:14,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:17,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:17,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:17,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:17,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:55:17,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 10:55:17,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 10:55:17,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.5412 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:55:17,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 10:55:17,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 10:55:17,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 10:55:17,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 10:55:17,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 10:55:17,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:55:17,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 10:55:17,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 10:55:17,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 7.0792 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:55:17,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 10:55:17,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 10:55:17,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 10:55:17,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 10:55:17,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 10:55:17,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 10:55:17,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:18,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:18,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:55:18,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 10:55:18,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 10:55:18,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 5.0256 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:55:18,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 10:55:18,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 10:55:18,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 10:55:18,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 10:55:18,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 10:55:18,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 10:55:18,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:18,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:18,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:55:18,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:55:18,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0387 millis. select * from t_tages  
 
 2020-11-18 10:55:18,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 10:55:18,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 10:55:18,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 10:55:18,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 10:55:18,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 10:55:18,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 10:55:18,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 10:55:18,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 10:55:18,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 10:55:18,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:55:18,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:18,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:18,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:55:18,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:55:18,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.8509 millis. select * from t_types  
 
 2020-11-18 10:55:18,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 10:55:18,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 10:55:18,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 10:55:18,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 10:55:18,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 10:55:18,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 10:55:18,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 10:55:18,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 10:55:18,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 10:55:18,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:55:18,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:21,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:21,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 10:55:21,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 10:55:21,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 10:55:21,574 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'appreciation' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.updateBlog(BaseServiceImpl.java:120)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:88)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 10:55:21,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 10:55:21,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 10:55:21,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:55:21,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:55:21,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:13,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-334} connected  
 
 2020-11-18 10:58:13,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-335} connected  
 
 2020-11-18 10:58:13,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-336} connected  
 
 2020-11-18 10:58:13,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-337} connected  
 
 2020-11-18 10:58:13,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-338} connected  
 
 2020-11-18 10:58:13,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:13,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 10:58:13,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:58:13,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:58:13,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.0601 millis. select * from t_types  
 
 2020-11-18 10:58:13,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 10:58:13,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 10:58:13,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 10:58:13,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 10:58:13,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 10:58:13,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 10:58:13,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 10:58:13,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 10:58:13,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 10:58:13,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:58:13,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:13,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:13,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 10:58:13,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:58:13,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:58:13,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9035 millis. select * from t_tages  
 
 2020-11-18 10:58:13,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 10:58:13,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 10:58:13,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 10:58:13,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 10:58:13,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 10:58:13,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 10:58:13,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 10:58:13,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 10:58:13,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 10:58:13,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:58:13,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:19,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:19,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 10:58:19,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 10:58:19,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 10:58:19,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 8.1486 millis. select * from t_user where username=?  
 
 2020-11-18 10:58:19,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 10:58:19,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 10:58:19,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 10:58:19,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 10:58:19,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 10:58:19,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:25,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:25,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:25,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:25,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:58:25,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 10:58:25,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 10:58:25,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6926 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:58:25,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 10:58:25,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 10:58:25,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 10:58:25,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 10:58:25,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 10:58:25,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:58:25,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 10:58:25,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 10:58:25,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.2533 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:58:25,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 10:58:25,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 10:58:25,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 10:58:25,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 10:58:25,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 10:58:25,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 10:58:25,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:26,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:26,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:58:26,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 10:58:26,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 10:58:26,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.723 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:58:26,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 10:58:26,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 10:58:26,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 10:58:26,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 10:58:26,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 10:58:26,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 10:58:26,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:26,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:26,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:58:27,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:58:27,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.026 millis. select * from t_tages  
 
 2020-11-18 10:58:27,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 10:58:27,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 10:58:27,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 10:58:27,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 10:58:27,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 10:58:27,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 10:58:27,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 10:58:27,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 10:58:27,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 10:58:27,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:58:27,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:27,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:27,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:58:27,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:58:27,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.4697 millis. select * from t_types  
 
 2020-11-18 10:58:27,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 10:58:27,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 10:58:27,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 10:58:27,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 10:58:27,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 10:58:27,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 10:58:27,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 10:58:27,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 10:58:27,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 10:58:27,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:58:27,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:30,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:30,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 10:58:30,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 10:58:30,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 10:58:30,098 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'appreciation' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.updateBlog(BaseServiceImpl.java:120)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:88)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 10:58:30,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 10:58:30,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 10:58:30,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:58:30,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:58:30,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:30,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-339} connected  
 
 2020-11-18 10:59:30,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-340} connected  
 
 2020-11-18 10:59:30,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-341} connected  
 
 2020-11-18 10:59:30,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-342} connected  
 
 2020-11-18 10:59:30,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-343} connected  
 
 2020-11-18 10:59:30,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:30,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 10:59:30,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:59:30,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:59:30,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 12.6077 millis. select * from t_types  
 
 2020-11-18 10:59:30,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 10:59:30,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 10:59:30,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 10:59:30,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 10:59:30,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 10:59:30,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 10:59:30,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 10:59:30,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 10:59:30,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 10:59:30,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:59:30,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:30,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:30,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 10:59:30,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:59:30,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:59:30,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4216 millis. select * from t_tages  
 
 2020-11-18 10:59:30,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 10:59:30,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 10:59:30,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 10:59:30,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 10:59:30,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 10:59:30,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 10:59:30,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 10:59:30,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 10:59:30,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 10:59:30,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:59:30,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:37,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:37,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 10:59:37,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 10:59:37,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 10:59:37,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 9.5272 millis. select * from t_user where username=?  
 
 2020-11-18 10:59:37,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 10:59:37,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 10:59:37,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 10:59:37,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 10:59:37,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 10:59:37,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:40,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:40,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:40,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:40,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:59:40,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 10:59:40,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 10:59:40,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.9742 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 10:59:40,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 10:59:40,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 10:59:40,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 10:59:40,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 10:59:40,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 10:59:40,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:59:40,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 10:59:40,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 10:59:40,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.2967 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 10:59:40,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 10:59:40,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 10:59:40,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 10:59:40,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 10:59:40,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 10:59:40,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 10:59:40,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:42,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:42,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:59:42,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 10:59:42,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 10:59:42,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.3759 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 10:59:42,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 10:59:42,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 10:59:42,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 10:59:42,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 10:59:42,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 10:59:42,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 10:59:42,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:42,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:42,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 10:59:42,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 10:59:42,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8172 millis. select * from t_tages  
 
 2020-11-18 10:59:42,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 10:59:42,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 10:59:42,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 10:59:42,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 10:59:42,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 10:59:42,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 10:59:42,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 10:59:42,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 10:59:42,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 10:59:42,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 10:59:42,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:42,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:42,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 10:59:42,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 10:59:42,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.9809 millis. select * from t_types  
 
 2020-11-18 10:59:42,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 10:59:42,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 10:59:42,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 10:59:42,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 10:59:42,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 10:59:42,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 10:59:42,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 10:59:42,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 10:59:42,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 10:59:42,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 10:59:42,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:44,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:44,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 10:59:44,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 10:59:44,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 10:59:44,982 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'appreciation' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.updateBlog(BaseServiceImpl.java:120)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:88)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 10:59:44,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 10:59:44,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 10:59:44,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 10:59:45,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 10:59:45,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:21,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-344} connected  
 
 2020-11-18 11:02:21,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-345} connected  
 
 2020-11-18 11:02:21,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-346} connected  
 
 2020-11-18 11:02:21,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-347} connected  
 
 2020-11-18 11:02:21,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-348} connected  
 
 2020-11-18 11:02:21,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:21,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 11:02:21,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:02:21,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:02:21,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 26.2723 millis. select * from t_types  
 
 2020-11-18 11:02:21,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 11:02:21,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 11:02:21,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 11:02:21,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 11:02:21,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 11:02:21,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 11:02:21,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 11:02:21,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 11:02:21,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 11:02:21,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:02:21,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:21,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:21,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 11:02:21,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:02:21,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:02:21,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7085 millis. select * from t_tages  
 
 2020-11-18 11:02:21,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 11:02:21,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 11:02:21,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 11:02:21,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 11:02:21,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 11:02:21,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 11:02:21,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 11:02:21,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 11:02:21,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 11:02:21,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:02:21,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:27,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:27,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 11:02:27,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 11:02:27,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 11:02:27,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.427 millis. select * from t_user where username=?  
 
 2020-11-18 11:02:27,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 11:02:27,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 11:02:27,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 11:02:27,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 11:02:27,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 11:02:27,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:32,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:32,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:32,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:32,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:02:32,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 11:02:32,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 11:02:32,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0033 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:02:32,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 11:02:32,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 11:02:32,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 11:02:32,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 11:02:32,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:02:32,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:02:32,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 11:02:32,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:02:32,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.3162 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:02:32,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 11:02:32,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:02:32,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:02:32,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:02:32,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 11:02:32,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:02:32,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:33,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:33,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:02:33,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 11:02:33,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 11:02:33,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.5165 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:02:33,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 11:02:33,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:02:33,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 11:02:33,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 11:02:33,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 11:02:33,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 11:02:33,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:33,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:33,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:02:33,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:02:33,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3372 millis. select * from t_tages  
 
 2020-11-18 11:02:33,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 11:02:33,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 11:02:33,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 11:02:33,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 11:02:33,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 11:02:33,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 11:02:33,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 11:02:33,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 11:02:33,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 11:02:33,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:02:33,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:33,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:33,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:02:33,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:02:33,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.6414 millis. select * from t_types  
 
 2020-11-18 11:02:33,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 11:02:33,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 11:02:33,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 11:02:33,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 11:02:33,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 11:02:33,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 11:02:33,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 11:02:33,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 11:02:33,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 11:02:33,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:02:33,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:35,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:35,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true'
            ,
                types='Types(id=8, name=null, blogs=null)'
            ,
                tages='[Tages(id=1, tage=null, blogs=null)]' 
        where id=?  
 
 2020-11-18 11:02:35,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 11:02:35,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 11:02:35,929 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true'
            ,
                types='Types(id=8, name=null, blogs=null)'
            ,
                tages='[Tages(id=1, tage=null, blogs=null)]' 
        where id=?  
 java.sql.SQLSyntaxErrorException: Unknown column 'types' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.update(BaseServiceImpl.java:91)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:90)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 11:02:35,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 11:02:35,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 11:02:35,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:02:35,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:02:35,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:03:53,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-349} connected  
 
 2020-11-18 11:03:54,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-350} connected  
 
 2020-11-18 11:03:54,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-351} connected  
 
 2020-11-18 11:03:54,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-352} connected  
 
 2020-11-18 11:03:54,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-353} connected  
 
 2020-11-18 11:03:54,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:03:54,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 11:03:54,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:03:54,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:03:54,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 30.3381 millis. select * from t_types  
 
 2020-11-18 11:03:54,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 11:03:54,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 11:03:54,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 11:03:54,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 11:03:54,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 11:03:54,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 11:03:54,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 11:03:54,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 11:03:54,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 11:03:54,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:03:54,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:03:54,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:03:54,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 11:03:54,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:03:54,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:03:54,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.6282 millis. select * from t_tages  
 
 2020-11-18 11:03:54,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 11:03:54,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 11:03:54,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 11:03:54,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 11:03:54,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 11:03:54,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 11:03:54,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 11:03:54,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 11:03:54,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 11:03:54,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:03:54,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:04:00,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:04:00,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 11:04:00,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 11:04:00,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 11:04:00,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 8.8087 millis. select * from t_user where username=?  
 
 2020-11-18 11:04:00,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 11:04:00,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 11:04:00,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 11:04:00,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 11:04:00,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 11:04:00,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:04:06,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:04:06,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:04:06,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:04:06,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:04:06,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 11:04:06,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 11:04:06,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.3458 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:04:06,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 11:04:06,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 11:04:06,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 11:04:06,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 11:04:06,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:04:06,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:04:06,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 11:04:06,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:04:06,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.757 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:04:06,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 11:04:06,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:04:06,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:04:06,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:04:06,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 11:04:06,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:04:06,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:04:08,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:04:08,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:04:08,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 11:04:08,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 11:04:08,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.9738 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:04:08,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 11:04:08,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:04:08,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 11:04:08,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 11:04:08,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 11:04:08,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 11:04:08,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:04:08,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:04:08,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:04:08,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:04:08,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.848 millis. select * from t_tages  
 
 2020-11-18 11:04:08,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 11:04:08,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 11:04:08,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 11:04:08,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 11:04:08,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 11:04:08,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 11:04:08,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 11:04:08,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 11:04:08,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 11:04:08,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:04:08,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:04:08,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:04:08,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:04:08,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:04:08,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.4594 millis. select * from t_types  
 
 2020-11-18 11:04:08,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 11:04:08,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 11:04:08,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 11:04:08,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 11:04:09,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 11:04:09,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 11:04:09,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 11:04:09,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 11:04:09,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 11:04:09,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:04:09,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:04:13,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:04:13,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 11:04:13,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 11:04:13,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 11:04:13,290 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'appreciation' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.update(BaseServiceImpl.java:93)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:90)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 11:04:13,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 11:04:13,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 11:04:13,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:04:13,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:04:13,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:24,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-354} connected  
 
 2020-11-18 11:24:24,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-355} connected  
 
 2020-11-18 11:24:24,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-356} connected  
 
 2020-11-18 11:24:24,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-357} connected  
 
 2020-11-18 11:24:24,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-358} connected  
 
 2020-11-18 11:24:24,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:24,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 11:24:24,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:24:24,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:24:24,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 23.2056 millis. select * from t_types  
 
 2020-11-18 11:24:24,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 11:24:24,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 11:24:24,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 11:24:24,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 11:24:24,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 11:24:24,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 11:24:24,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 11:24:24,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 11:24:24,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 11:24:24,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:24:24,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:24,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:24,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 11:24:24,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:24:24,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:24:24,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.7068 millis. select * from t_tages  
 
 2020-11-18 11:24:24,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 11:24:24,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 11:24:24,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 11:24:24,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 11:24:24,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 11:24:24,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 11:24:24,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 11:24:24,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 11:24:24,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 11:24:24,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:24:24,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:31,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:31,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 11:24:31,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 11:24:31,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 11:24:31,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.528 millis. select * from t_user where username=?  
 
 2020-11-18 11:24:31,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 11:24:31,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 11:24:31,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 11:24:31,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 11:24:31,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 11:24:31,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:36,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:36,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:36,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:36,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:24:36,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 11:24:36,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 11:24:36,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6099 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:24:36,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 11:24:36,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 11:24:36,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 11:24:36,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 11:24:36,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:24:36,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:24:36,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 11:24:36,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:24:36,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.2777 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:24:36,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 11:24:36,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:24:36,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:24:36,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:24:36,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 11:24:36,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:24:36,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:38,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:38,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:24:38,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 11:24:38,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 11:24:38,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.7224 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:24:38,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 11:24:38,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:24:38,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 11:24:38,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 11:24:38,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 11:24:38,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 11:24:38,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:38,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:38,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:24:38,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:24:38,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.7484 millis. select * from t_tages  
 
 2020-11-18 11:24:38,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 11:24:38,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 11:24:38,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 11:24:38,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 11:24:38,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 11:24:38,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 11:24:38,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 11:24:38,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 11:24:38,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 11:24:38,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:24:38,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:38,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:38,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:24:38,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:24:38,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.7601 millis. select * from t_types  
 
 2020-11-18 11:24:38,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 11:24:38,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 11:24:38,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 11:24:38,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 11:24:38,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 11:24:38,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 11:24:38,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 11:24:38,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 11:24:38,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 11:24:38,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:24:38,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:42,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:42,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 11:24:42,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [0]  
 
 2020-11-18 11:24:42,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 11:24:42,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.5108 millis. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 11:24:42,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 11:24:42,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:42,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:42,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. delete from t_blog_tages where bid=?  
 
 2020-11-18 11:24:42,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-18 11:24:42,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 11:24:42,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 6.6858 millis. delete from t_blog_tages where bid=?  
 
 2020-11-18 11:24:42,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 11:24:42,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:42,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:42,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. delete from t_blog_type where bid=?  
 
 2020-11-18 11:24:42,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [9]  
 
 2020-11-18 11:24:42,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 11:24:42,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 5.4099 millis. delete from t_blog_type where bid=?  
 
 2020-11-18 11:24:42,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 11:24:42,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:42,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:42,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:24:42,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 1, 9]  
 
 2020-11-18 11:24:42,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:24:42,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 6.2521 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:24:42,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 11:24:42,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:42,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:42,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:24:42,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [null, 9, 8]  
 
 2020-11-18 11:24:42,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:24:42,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 7.0042 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:24:42,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 11:24:42,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:24:42,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:24:42,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 11:24:42,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 11:24:42,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.7209 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:24:42,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} open  
 
 2020-11-18 11:24:42,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Header: [count(0)]  
 
 2020-11-18 11:24:42,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Result: [2]  
 
 2020-11-18 11:24:42,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} closed  
 
 2020-11-18 11:24:42,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:24:42,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 11:24:42,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:24:42,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.9378 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:24:42,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} open  
 
 2020-11-18 11:24:42,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:24:42,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:24:42,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:24:42,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} closed  
 
 2020-11-18 11:24:42,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:24:42,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:02,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:02,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 11:25:02,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 11:25:02,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.3445 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:25:02,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50010} open  
 
 2020-11-18 11:25:02,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50010} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:25:02,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50010} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 11:25:02,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50010} closed  
 
 2020-11-18 11:25:02,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 11:25:02,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:02,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:02,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:25:02,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:25:02,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.6547 millis. select * from t_tages  
 
 2020-11-18 11:25:02,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} open  
 
 2020-11-18 11:25:02,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Header: [id, tage]  
 
 2020-11-18 11:25:02,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [1, 学习日记]  
 
 2020-11-18 11:25:02,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [2, 错误笔记]  
 
 2020-11-18 11:25:02,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [3, 数据库笔记]  
 
 2020-11-18 11:25:02,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [4, 程序运行日记]  
 
 2020-11-18 11:25:02,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [5, 开发日记]  
 
 2020-11-18 11:25:02,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [8, 开发手册]  
 
 2020-11-18 11:25:02,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} closed  
 
 2020-11-18 11:25:02,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:25:02,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:02,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:02,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:25:02,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:25:02,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.8614 millis. select * from t_types  
 
 2020-11-18 11:25:02,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} open  
 
 2020-11-18 11:25:02,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Header: [id, name]  
 
 2020-11-18 11:25:02,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [8, 方法论]  
 
 2020-11-18 11:25:02,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [9, 理论类]  
 
 2020-11-18 11:25:02,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [21, 错误日记]  
 
 2020-11-18 11:25:02,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [23, 开发日记]  
 
 2020-11-18 11:25:02,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [24, 实践论]  
 
 2020-11-18 11:25:02,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [25, 想法论]  
 
 2020-11-18 11:25:02,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} closed  
 
 2020-11-18 11:25:02,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:25:02,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:06,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:06,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [0]  
 
 2020-11-18 11:25:06,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 11:25:06,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 4.1977 millis. update t_blog
         SET title='Java简介'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 11:25:06,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 11:25:06,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:06,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:06,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-18 11:25:06,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 11:25:06,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 10.3994 millis. delete from t_blog_tages where bid=?  
 
 2020-11-18 11:25:06,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 11:25:06,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:06,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:06,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [9]  
 
 2020-11-18 11:25:06,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 11:25:06,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 6.6172 millis. delete from t_blog_type where bid=?  
 
 2020-11-18 11:25:06,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 11:25:06,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:06,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:06,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 1, 9]  
 
 2020-11-18 11:25:06,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:25:06,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 5.6527 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:25:06,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 11:25:06,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:06,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:06,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 8, 9]  
 
 2020-11-18 11:25:06,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:25:06,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 6.8553 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:25:06,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 11:25:06,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:06,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:06,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [null, 9, 8]  
 
 2020-11-18 11:25:06,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:25:06,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 5.8446 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:25:06,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 11:25:06,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:06,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:06,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 11:25:06,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 11:25:06,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.5182 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:25:06,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} open  
 
 2020-11-18 11:25:06,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Header: [count(0)]  
 
 2020-11-18 11:25:06,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Result: [2]  
 
 2020-11-18 11:25:06,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} closed  
 
 2020-11-18 11:25:06,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:25:06,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 11:25:06,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:25:06,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.5272 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:25:06,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} open  
 
 2020-11-18 11:25:06,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:25:06,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:25:06,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:25:06,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} closed  
 
 2020-11-18 11:25:06,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:25:06,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:15,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:15,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 11:25:15,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 11:25:15,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.4728 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:25:15,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} open  
 
 2020-11-18 11:25:15,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:25:15,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 11:25:15,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 8, 方法论]  
 
 2020-11-18 11:25:15,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} closed  
 
 2020-11-18 11:25:15,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 11:25:15,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:15,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:15,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:25:15,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:25:15,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9868 millis. select * from t_tages  
 
 2020-11-18 11:25:15,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} open  
 
 2020-11-18 11:25:15,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Header: [id, tage]  
 
 2020-11-18 11:25:15,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [1, 学习日记]  
 
 2020-11-18 11:25:15,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [2, 错误笔记]  
 
 2020-11-18 11:25:15,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [3, 数据库笔记]  
 
 2020-11-18 11:25:15,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [4, 程序运行日记]  
 
 2020-11-18 11:25:15,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [5, 开发日记]  
 
 2020-11-18 11:25:15,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [8, 开发手册]  
 
 2020-11-18 11:25:15,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} closed  
 
 2020-11-18 11:25:15,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:25:15,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:15,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:15,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:25:15,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:25:15,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.7688 millis. select * from t_types  
 
 2020-11-18 11:25:15,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} open  
 
 2020-11-18 11:25:15,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Header: [id, name]  
 
 2020-11-18 11:25:15,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [8, 方法论]  
 
 2020-11-18 11:25:15,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [9, 理论类]  
 
 2020-11-18 11:25:15,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [21, 错误日记]  
 
 2020-11-18 11:25:15,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [23, 开发日记]  
 
 2020-11-18 11:25:15,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [24, 实践论]  
 
 2020-11-18 11:25:15,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [25, 想法论]  
 
 2020-11-18 11:25:15,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} closed  
 
 2020-11-18 11:25:15,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:25:15,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:29,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:29,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} created. update t_blog
         SET title='Java简介02'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='false'
            ,
                Opencomment='false'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 11:25:29,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : [0]  
 
 2020-11-18 11:25:29,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : [INTEGER]  
 
 2020-11-18 11:25:29,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 3.8441 millis. update t_blog
         SET title='Java简介02'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='false'
            ,
                Opencomment='false'
            ,
                sharestatment='true'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 11:25:29,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-18 11:25:29,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:29,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:29,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-18 11:25:29,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 11:25:29,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 6.1306 millis. delete from t_blog_tages where bid=?  
 
 2020-11-18 11:25:29,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 11:25:29,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:29,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:29,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [9]  
 
 2020-11-18 11:25:29,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 11:25:29,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 6.1794 millis. delete from t_blog_type where bid=?  
 
 2020-11-18 11:25:29,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 11:25:29,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:29,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:29,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 1, 9]  
 
 2020-11-18 11:25:29,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:25:29,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 6.5442 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:25:29,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 11:25:29,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:29,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:29,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 8, 9]  
 
 2020-11-18 11:25:29,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:25:29,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 5.6375 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:25:29,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 11:25:29,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:29,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:29,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [null, 9, 9]  
 
 2020-11-18 11:25:29,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:25:29,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 6.3182 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:25:29,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 11:25:29,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:25:29,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:25:29,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 11:25:29,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 11:25:29,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.5337 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:25:29,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} open  
 
 2020-11-18 11:25:29,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} Header: [count(0)]  
 
 2020-11-18 11:25:29,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} Result: [2]  
 
 2020-11-18 11:25:29,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} closed  
 
 2020-11-18 11:25:29,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:25:29,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 11:25:29,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:25:29,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.3855 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:25:29,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} open  
 
 2020-11-18 11:25:29,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:25:29,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:25:29,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:25:29,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} closed  
 
 2020-11-18 11:25:29,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:25:29,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:14,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-360} connected  
 
 2020-11-18 11:27:14,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-361} connected  
 
 2020-11-18 11:27:14,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-362} connected  
 
 2020-11-18 11:27:14,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-363} connected  
 
 2020-11-18 11:27:14,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-364} connected  
 
 2020-11-18 11:27:14,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:15,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 11:27:15,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:27:15,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:27:15,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.1135 millis. select * from t_types  
 
 2020-11-18 11:27:15,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 11:27:15,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 11:27:15,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 11:27:15,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 11:27:15,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 11:27:15,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 11:27:15,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 11:27:15,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 11:27:15,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 11:27:15,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:27:15,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:15,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:15,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 11:27:15,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:27:15,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:27:15,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.3559 millis. select * from t_tages  
 
 2020-11-18 11:27:15,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 11:27:15,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 11:27:15,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 11:27:15,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 11:27:15,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 11:27:15,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 11:27:15,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 11:27:15,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 11:27:15,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 11:27:15,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:27:15,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:20,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:21,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 11:27:21,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 11:27:21,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 11:27:21,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 6.0054 millis. select * from t_user where username=?  
 
 2020-11-18 11:27:21,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 11:27:21,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 11:27:21,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 11:27:21,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 11:27:21,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 11:27:21,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:23,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:23,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:23,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:23,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:27:23,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 11:27:23,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 11:27:23,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.433 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:27:23,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 11:27:23,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 11:27:23,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 11:27:23,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 11:27:23,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:27:23,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:27:23,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 11:27:23,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:27:23,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.1151 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:27:23,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 11:27:23,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:27:23,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:27:23,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:27:23,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 11:27:23,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:27:23,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:25,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:25,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:27:25,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 11:27:25,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 11:27:25,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.4857 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:27:25,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 11:27:25,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:27:25,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 11:27:25,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 9, 理论类]  
 
 2020-11-18 11:27:25,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 11:27:25,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 11:27:25,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:25,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:25,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:27:25,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:27:25,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3779 millis. select * from t_tages  
 
 2020-11-18 11:27:25,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 11:27:25,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 11:27:25,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 11:27:25,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 11:27:25,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 11:27:25,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 11:27:25,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 11:27:25,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 11:27:25,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 11:27:25,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:27:25,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:25,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:25,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:27:25,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:27:25,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.1181 millis. select * from t_types  
 
 2020-11-18 11:27:25,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 11:27:25,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 11:27:25,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 11:27:25,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 11:27:25,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 11:27:25,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 11:27:25,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 11:27:25,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 11:27:25,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 11:27:25,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:27:25,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:41,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:41,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介02'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='false'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 11:27:41,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 11:27:41,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 11:27:41,675 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介02'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='false'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'appreciation' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.update(BaseServiceImpl.java:93)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:92)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 11:27:41,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 11:27:41,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 11:27:41,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:27:41,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:27:41,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:29:41,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-365} connected  
 
 2020-11-18 11:29:41,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-366} connected  
 
 2020-11-18 11:29:41,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-367} connected  
 
 2020-11-18 11:29:41,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-368} connected  
 
 2020-11-18 11:29:41,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-369} connected  
 
 2020-11-18 11:29:41,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:29:41,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 11:29:41,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:29:41,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:29:41,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 24.8518 millis. select * from t_types  
 
 2020-11-18 11:29:41,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 11:29:41,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 11:29:41,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 11:29:41,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 11:29:41,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 11:29:41,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 11:29:41,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 11:29:41,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 11:29:41,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 11:29:41,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:29:41,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:29:41,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:29:41,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 11:29:41,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:29:41,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:29:41,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.6166 millis. select * from t_tages  
 
 2020-11-18 11:29:41,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 11:29:41,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 11:29:41,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 11:29:41,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 11:29:41,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 11:29:41,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 11:29:41,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 11:29:41,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 11:29:41,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 11:29:41,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:29:41,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:29:49,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:29:49,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 11:29:49,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 11:29:49,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 11:29:49,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 6.017 millis. select * from t_user where username=?  
 
 2020-11-18 11:29:49,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 11:29:49,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 11:29:49,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 11:29:49,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 11:29:49,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 11:29:49,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:29:53,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:29:53,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:29:53,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:29:53,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:29:53,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 11:29:53,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 11:29:53,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.7437 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:29:53,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 11:29:53,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 11:29:53,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-18 11:29:53,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 11:29:53,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:29:53,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:29:53,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 11:29:53,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:29:53,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.8293 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:29:53,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 11:29:53,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:29:53,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:29:53,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:29:53,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 11:29:53,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:29:53,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:29:55,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:29:55,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:29:55,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 11:29:55,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 11:29:55,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.9076 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:29:55,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 11:29:55,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:29:55,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 11:29:55,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 9, 理论类]  
 
 2020-11-18 11:29:55,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 11:29:55,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 11:29:55,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:29:55,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:29:55,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:29:55,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:29:55,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8854 millis. select * from t_tages  
 
 2020-11-18 11:29:55,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 11:29:55,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 11:29:55,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 11:29:55,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 11:29:55,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 11:29:55,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 11:29:55,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 11:29:55,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 11:29:55,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 11:29:55,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:29:55,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:29:55,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:29:55,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:29:55,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:29:55,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.7943 millis. select * from t_types  
 
 2020-11-18 11:29:55,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 11:29:55,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 11:29:55,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 11:29:55,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 11:29:55,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 11:29:55,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 11:29:55,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 11:29:55,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 11:29:55,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 11:29:55,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:29:55,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:30:02,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:30:02,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java简介02'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='false'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 
 2020-11-18 11:30:02,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [9]  
 
 2020-11-18 11:30:02,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 11:30:02,112 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20006} execute error. update t_blog
         SET title='Java简介02'
            ,
                content='##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='原创'
            ,
                views='2'
            ,
                appreciation='true'
            ,
                Opencomment='true'
            ,
                sharestatment='false'
            ,
                publish='true'
            ,
                recommend='true' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'appreciation' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.update(BaseServiceImpl.java:93)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:92)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 11:30:02,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 11:30:02,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} closed  
 
 2020-11-18 11:30:02,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:30:02,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:30:02,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:33:53,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-370} connected  
 
 2020-11-18 11:33:53,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-371} connected  
 
 2020-11-18 11:33:53,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-372} connected  
 
 2020-11-18 11:33:53,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-373} connected  
 
 2020-11-18 11:33:53,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-374} connected  
 
 2020-11-18 11:33:53,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:33:54,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 11:33:54,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:33:54,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:33:54,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 20.4953 millis. select * from t_types  
 
 2020-11-18 11:33:54,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 11:33:54,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 11:33:54,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 11:33:54,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 11:33:54,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 11:33:54,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 11:33:54,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 11:33:54,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 11:33:54,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 11:33:54,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:33:54,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:33:54,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:33:54,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 11:33:54,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:33:54,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:33:54,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4986 millis. select * from t_tages  
 
 2020-11-18 11:33:54,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 11:33:54,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 11:33:54,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 11:33:54,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 11:33:54,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 11:33:54,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 11:33:54,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 11:33:54,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 11:33:54,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 11:33:54,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:33:54,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:34:00,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:34:01,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 11:34:01,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 11:34:01,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 11:34:01,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.2915 millis. select * from t_user where username=?  
 
 2020-11-18 11:34:01,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 11:34:01,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 11:34:01,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 11:34:01,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 11:34:01,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 11:34:01,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:34:04,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:34:04,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:34:04,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:34:04,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.6619 millis. select * from t_tages  
 
 2020-11-18 11:34:04,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} open  
 
 2020-11-18 11:34:04,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Header: [id, tage]  
 
 2020-11-18 11:34:04,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [1, 学习日记]  
 
 2020-11-18 11:34:04,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-18 11:34:04,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-18 11:34:04,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-18 11:34:04,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [5, 开发日记]  
 
 2020-11-18 11:34:04,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [8, 开发手册]  
 
 2020-11-18 11:34:04,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} closed  
 
 2020-11-18 11:34:04,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:34:04,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:34:04,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:34:04,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:34:04,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:34:04,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.4437 millis. select * from t_types  
 
 2020-11-18 11:34:04,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-18 11:34:04,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-18 11:34:04,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-18 11:34:04,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-18 11:34:04,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-18 11:34:04,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-18 11:34:04,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-18 11:34:04,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-18 11:34:04,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-18 11:34:04,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:34:04,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:35:58,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-18 11:35:58,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-18 11:35:58,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-18 11:35:58,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-18 11:35:58,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-18 11:35:58,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-375} connected  
 
 2020-11-18 11:35:58,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-18 11:35:58,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} created. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:35:58,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : [null, Java基础语法, ###基本语法

 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与  hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词 组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 是, 0, true, true, true, true, true]  
 
 2020-11-18 11:35:58,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN]  
 
 2020-11-18 11:35:58,657 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20003} execute error. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 java.sql.SQLException: Field 'blogdescribe' doesn't have a default value
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.addForNotMath(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.addForNotMath(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.addForNotMath(BaseServiceImpl.java:66)
	at com.example.blog.service.BolgServiceImpl.insert(BolgServiceImpl.java:37)
	at com.example.blog.controller.BlogController.addBlog(BlogController.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 11:35:58,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-18 11:35:58,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} closed  
 
 2020-11-18 11:35:58,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-18 11:35:58,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-18 11:35:58,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-18 11:37:28,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-379} connected  
 
 2020-11-18 11:37:28,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-380} connected  
 
 2020-11-18 11:37:28,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-381} connected  
 
 2020-11-18 11:37:29,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-382} connected  
 
 2020-11-18 11:37:29,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-383} connected  
 
 2020-11-18 11:37:29,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:37:29,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 11:37:29,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:37:29,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:37:29,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 21.4467 millis. select * from t_types  
 
 2020-11-18 11:37:29,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 11:37:29,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 11:37:29,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 11:37:29,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 11:37:29,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 11:37:29,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 11:37:29,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 11:37:29,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 11:37:29,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 11:37:29,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:37:29,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:37:29,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:37:29,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 11:37:29,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:37:29,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:37:29,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.2854 millis. select * from t_tages  
 
 2020-11-18 11:37:29,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 11:37:29,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 11:37:29,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 11:37:29,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 11:37:29,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 11:37:29,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 11:37:29,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 11:37:29,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 11:37:29,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 11:37:29,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:37:29,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:37:40,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:37:40,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 11:37:40,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 11:37:40,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 11:37:40,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.7521 millis. select * from t_user where username=?  
 
 2020-11-18 11:37:40,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 11:37:40,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 11:37:40,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 11:37:40,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 11:37:40,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 11:37:40,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:37:44,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:37:44,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:37:44,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:37:44,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2801 millis. select * from t_tages  
 
 2020-11-18 11:37:44,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} open  
 
 2020-11-18 11:37:44,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Header: [id, tage]  
 
 2020-11-18 11:37:44,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [1, 学习日记]  
 
 2020-11-18 11:37:44,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-18 11:37:44,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-18 11:37:44,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-18 11:37:44,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [5, 开发日记]  
 
 2020-11-18 11:37:44,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [8, 开发手册]  
 
 2020-11-18 11:37:44,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} closed  
 
 2020-11-18 11:37:44,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:37:44,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:37:44,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:37:44,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:37:44,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:37:44,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.5517 millis. select * from t_types  
 
 2020-11-18 11:37:44,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-18 11:37:44,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-18 11:37:44,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-18 11:37:44,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-18 11:37:44,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-18 11:37:44,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-18 11:37:44,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-18 11:37:44,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-18 11:37:44,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-18 11:37:44,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:37:44,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:30,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:30,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         , 
            blogdescribe
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:38:30,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [null, Java基本语法, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 是, 0, true, true, true, true, true, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。]  
 
 2020-11-18 11:38:30,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, VARCHAR]  
 
 2020-11-18 11:38:30,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 7.1525 millis. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         , 
            blogdescribe
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:38:30,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 11:38:30,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:30,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:30,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select id from t_blog where title=?  
 
 2020-11-18 11:38:30,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [Java基本语法]  
 
 2020-11-18 11:38:30,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-18 11:38:30,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.1931 millis. select id from t_blog where title=?  
 
 2020-11-18 11:38:30,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} open  
 
 2020-11-18 11:38:30,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Header: [id]  
 
 2020-11-18 11:38:30,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Result: [10]  
 
 2020-11-18 11:38:30,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} closed  
 
 2020-11-18 11:38:30,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 11:38:30,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:30,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:30,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:38:30,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [null, 1, 10]  
 
 2020-11-18 11:38:30,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:38:30,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 11.8939 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:38:30,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 11:38:30,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:30,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:30,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:38:30,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [null, 10, 9]  
 
 2020-11-18 11:38:30,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:38:30,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 6.6391 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:38:30,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 11:38:30,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:30,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:30,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. insert into t_user_blog
         (  
            id
         , 
            uid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:38:30,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [null, 1, 10]  
 
 2020-11-18 11:38:30,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 11:38:30,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 6.3957 millis. insert into t_user_blog
         (  
            id
         , 
            uid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 11:38:30,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 11:38:30,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:30,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:31,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:31,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:31,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:38:31,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [1]  
 
 2020-11-18 11:38:31,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 11:38:31,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.9256 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:38:31,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50006} open  
 
 2020-11-18 11:38:31,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50006} Header: [count(0)]  
 
 2020-11-18 11:38:31,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50006} Result: [3]  
 
 2020-11-18 11:38:31,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50006} closed  
 
 2020-11-18 11:38:31,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 11:38:31,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:38:31,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [1, 5]  
 
 2020-11-18 11:38:31,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:38:31,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 3.4907 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:38:31,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50007} open  
 
 2020-11-18 11:38:31,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50007} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:38:31,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50007} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:38:31,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50007} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:38:31,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50007} Result: [zhangsan, 10, Java基本语法, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 11:38:31,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50007} closed  
 
 2020-11-18 11:38:31,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 11:38:31,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:57,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:57,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [1]  
 
 2020-11-18 11:38:57,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 11:38:57,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.1829 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:38:57,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} open  
 
 2020-11-18 11:38:57,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Header: [count(0)]  
 
 2020-11-18 11:38:57,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [3]  
 
 2020-11-18 11:38:57,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} closed  
 
 2020-11-18 11:38:57,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 11:38:57,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [1, 5]  
 
 2020-11-18 11:38:57,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:38:57,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 1.8641 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:38:57,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} open  
 
 2020-11-18 11:38:57,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:38:57,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:38:57,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:38:57,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} Result: [zhangsan, 10, Java基本语法, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 11:38:57,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} closed  
 
 2020-11-18 11:38:57,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 11:38:57,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:59,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:59,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:38:59,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [10]  
 
 2020-11-18 11:38:59,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [INTEGER]  
 
 2020-11-18 11:38:59,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 5.7264 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:38:59,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} open  
 
 2020-11-18 11:38:59,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:38:59,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} Result: [10, Java基本语法, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, false, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 11:38:59,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} closed  
 
 2020-11-18 11:38:59,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 11:38:59,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:59,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:59,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:38:59,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:38:59,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0274 millis. select * from t_tages  
 
 2020-11-18 11:38:59,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} open  
 
 2020-11-18 11:38:59,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Header: [id, tage]  
 
 2020-11-18 11:38:59,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [1, 学习日记]  
 
 2020-11-18 11:38:59,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [2, 错误笔记]  
 
 2020-11-18 11:38:59,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [3, 数据库笔记]  
 
 2020-11-18 11:38:59,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [4, 程序运行日记]  
 
 2020-11-18 11:38:59,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [5, 开发日记]  
 
 2020-11-18 11:38:59,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [8, 开发手册]  
 
 2020-11-18 11:38:59,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} closed  
 
 2020-11-18 11:38:59,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:38:59,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:38:59,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:38:59,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:38:59,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:38:59,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.5887 millis. select * from t_types  
 
 2020-11-18 11:38:59,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} open  
 
 2020-11-18 11:38:59,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Header: [id, name]  
 
 2020-11-18 11:38:59,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [8, 方法论]  
 
 2020-11-18 11:38:59,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [9, 理论类]  
 
 2020-11-18 11:38:59,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [21, 错误日记]  
 
 2020-11-18 11:38:59,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [23, 开发日记]  
 
 2020-11-18 11:38:59,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [24, 实践论]  
 
 2020-11-18 11:38:59,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [25, 想法论]  
 
 2020-11-18 11:38:59,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} closed  
 
 2020-11-18 11:38:59,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:38:59,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:39:32,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:39:32,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [1]  
 
 2020-11-18 11:39:32,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 11:39:32,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.7689 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 11:39:32,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} open  
 
 2020-11-18 11:39:32,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} Header: [count(0)]  
 
 2020-11-18 11:39:32,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} Result: [3]  
 
 2020-11-18 11:39:32,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} closed  
 
 2020-11-18 11:39:32,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 11:39:32,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [1, 5]  
 
 2020-11-18 11:39:32,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER, INTEGER]  
 
 2020-11-18 11:39:32,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 1.9817 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 11:39:32,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} open  
 
 2020-11-18 11:39:32,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 11:39:32,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 11:39:32,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 11:39:32,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Result: [zhangsan, 10, Java基本语法, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 11:39:32,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} closed  
 
 2020-11-18 11:39:32,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 11:39:32,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:39:33,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:39:33,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [10]  
 
 2020-11-18 11:39:33,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [INTEGER]  
 
 2020-11-18 11:39:33,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 2.3791 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 11:39:33,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50015} open  
 
 2020-11-18 11:39:33,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50015} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 11:39:33,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50015} Result: [10, Java基本语法, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 11:39:33,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50015} closed  
 
 2020-11-18 11:39:33,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 11:39:33,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:39:33,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:39:33,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 11:39:33,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 11:39:33,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.44 millis. select * from t_tages  
 
 2020-11-18 11:39:33,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} open  
 
 2020-11-18 11:39:33,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Header: [id, tage]  
 
 2020-11-18 11:39:33,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [1, 学习日记]  
 
 2020-11-18 11:39:33,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [2, 错误笔记]  
 
 2020-11-18 11:39:33,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [3, 数据库笔记]  
 
 2020-11-18 11:39:33,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [4, 程序运行日记]  
 
 2020-11-18 11:39:33,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [5, 开发日记]  
 
 2020-11-18 11:39:33,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [8, 开发手册]  
 
 2020-11-18 11:39:33,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} closed  
 
 2020-11-18 11:39:33,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 11:39:33,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 11:39:33,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 11:39:33,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 11:39:33,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 11:39:33,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.9535 millis. select * from t_types  
 
 2020-11-18 11:39:33,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} open  
 
 2020-11-18 11:39:33,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Header: [id, name]  
 
 2020-11-18 11:39:33,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [8, 方法论]  
 
 2020-11-18 11:39:33,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [9, 理论类]  
 
 2020-11-18 11:39:33,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [21, 错误日记]  
 
 2020-11-18 11:39:33,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [23, 开发日记]  
 
 2020-11-18 11:39:33,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [24, 实践论]  
 
 2020-11-18 11:39:33,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} Result: [25, 想法论]  
 
 2020-11-18 11:39:33,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50017} closed  
 
 2020-11-18 11:39:34,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 11:39:34,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:41:31,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-384} connected  
 
 2020-11-18 12:41:31,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-385} connected  
 
 2020-11-18 12:41:31,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-386} connected  
 
 2020-11-18 12:41:31,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-387} connected  
 
 2020-11-18 12:41:31,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-388} connected  
 
 2020-11-18 12:41:31,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:41:31,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 12:41:31,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:41:31,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:41:31,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.2427 millis. select * from t_types  
 
 2020-11-18 12:41:31,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 12:41:31,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 12:41:31,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 12:41:31,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 12:41:31,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 12:41:31,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 12:41:31,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 12:41:31,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 12:41:31,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 12:41:31,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:41:31,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:41:31,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:41:31,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 12:41:31,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:41:31,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:41:31,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.4896 millis. select * from t_tages  
 
 2020-11-18 12:41:31,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 12:41:31,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 12:41:31,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 12:41:31,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 12:41:31,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 12:41:31,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 12:41:31,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 12:41:31,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 12:41:31,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 12:41:31,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:41:31,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:41:38,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:41:38,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 12:41:38,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 12:41:38,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 12:41:38,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 9.8547 millis. select * from t_user where username=?  
 
 2020-11-18 12:41:38,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 12:41:38,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 12:41:38,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 12:41:38,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 12:41:38,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 12:41:38,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:41:53,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:41:53,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:41:54,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:41:54,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:41:54,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:41:54,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:41:54,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.9299 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:41:54,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 12:41:54,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 12:41:54,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [3]  
 
 2020-11-18 12:41:54,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 12:41:54,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:41:54,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:41:54,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:41:54,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:41:54,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.6289 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:41:54,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 12:41:54,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:41:54,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:41:54,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:41:54,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 10, Java基本语法, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:41:54,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 12:41:54,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:41:54,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:41:55,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:41:55,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:41:55,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [10]  
 
 2020-11-18 12:41:55,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 12:41:55,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.603 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:41:55,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 12:41:55,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:41:55,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [10, Java基本语法, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 12:41:55,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 12:41:55,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 12:41:55,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:41:55,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:41:55,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:41:55,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:41:55,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3748 millis. select * from t_tages  
 
 2020-11-18 12:41:55,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 12:41:55,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 12:41:55,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 12:41:55,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 12:41:55,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 12:41:55,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 12:41:55,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 12:41:55,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 12:41:55,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 12:41:55,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:41:55,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:41:55,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:41:55,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:41:55,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:41:55,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.8193 millis. select * from t_types  
 
 2020-11-18 12:41:55,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 12:41:55,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 12:41:55,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 12:41:55,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 12:41:55,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 12:41:55,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 12:41:55,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 12:41:55,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 12:41:55,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 12:41:55,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:41:55,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:42:06,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:42:06,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java基本语法02'
            ,
                content='##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                views='0' 
        where id=?  
 
 2020-11-18 12:42:06,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [10]  
 
 2020-11-18 12:42:06,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 12:42:06,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 8.8904 millis. update t_blog
         SET title='Java基本语法02'
            ,
                content='##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag=''
            ,
                views='0' 
        where id=?  
 
 2020-11-18 12:42:06,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:42:06,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:42:06,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:42:06,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. delete from t_blog_tages where bid=?  
 
 2020-11-18 12:42:06,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [10]  
 
 2020-11-18 12:42:06,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 12:42:06,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 8.6593 millis. delete from t_blog_tages where bid=?  
 
 2020-11-18 12:42:06,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 12:42:06,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:42:06,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:42:06,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. delete from t_blog_type where bid=?  
 
 2020-11-18 12:42:06,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [10]  
 
 2020-11-18 12:42:06,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 12:42:06,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 8.2268 millis. delete from t_blog_type where bid=?  
 
 2020-11-18 12:42:06,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:42:06,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:42:06,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:42:06,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 12:42:06,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 1, 10]  
 
 2020-11-18 12:42:06,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 12:42:06,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 6.9502 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 12:42:06,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 12:42:06,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:42:06,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:42:06,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 4, 10]  
 
 2020-11-18 12:42:06,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 12:42:06,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 5.5918 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 12:42:06,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 12:42:06,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:42:06,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:42:06,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 12:42:06,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [null, 10, 9]  
 
 2020-11-18 12:42:06,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-18 12:42:06,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 5.3531 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-18 12:42:06,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 12:42:06,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:42:06,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:42:06,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:42:06,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:42:06,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6867 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:42:06,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} open  
 
 2020-11-18 12:42:06,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Header: [count(0)]  
 
 2020-11-18 12:42:06,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Result: [3]  
 
 2020-11-18 12:42:06,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} closed  
 
 2020-11-18 12:42:06,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:42:06,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:42:06,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:42:06,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.955 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:42:06,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} open  
 
 2020-11-18 12:42:06,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:42:06,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:42:06,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:42:06,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:42:06,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} closed  
 
 2020-11-18 12:42:06,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:42:06,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:30,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-389} connected  
 
 2020-11-18 12:46:30,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-390} connected  
 
 2020-11-18 12:46:30,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-391} connected  
 
 2020-11-18 12:46:30,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-392} connected  
 
 2020-11-18 12:46:30,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-393} connected  
 
 2020-11-18 12:46:30,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:30,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 12:46:30,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:46:30,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:46:30,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 23.7499 millis. select * from t_types  
 
 2020-11-18 12:46:30,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 12:46:30,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 12:46:30,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 12:46:30,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 12:46:30,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 12:46:30,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 12:46:30,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 12:46:30,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 12:46:30,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 12:46:30,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:46:30,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:30,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:30,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 12:46:30,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:46:30,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:46:30,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9894 millis. select * from t_tages  
 
 2020-11-18 12:46:30,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 12:46:30,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 12:46:30,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 12:46:30,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 12:46:30,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 12:46:30,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 12:46:30,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 12:46:30,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 12:46:30,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 12:46:30,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:46:30,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:31,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:31,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:46:31,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:46:31,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 5.2712 millis. select * from t_types  
 
 2020-11-18 12:46:31,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} open  
 
 2020-11-18 12:46:31,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Header: [id, name]  
 
 2020-11-18 12:46:31,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [8, 方法论]  
 
 2020-11-18 12:46:31,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [9, 理论类]  
 
 2020-11-18 12:46:31,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [21, 错误日记]  
 
 2020-11-18 12:46:31,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [23, 开发日记]  
 
 2020-11-18 12:46:31,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [24, 实践论]  
 
 2020-11-18 12:46:31,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [25, 想法论]  
 
 2020-11-18 12:46:31,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} closed  
 
 2020-11-18 12:46:31,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:46:31,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:31,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:31,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:46:31,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:46:31,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.1649 millis. select * from t_tages  
 
 2020-11-18 12:46:31,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} open  
 
 2020-11-18 12:46:31,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Header: [id, tage]  
 
 2020-11-18 12:46:31,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [1, 学习日记]  
 
 2020-11-18 12:46:31,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-18 12:46:31,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-18 12:46:31,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-18 12:46:31,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [5, 开发日记]  
 
 2020-11-18 12:46:31,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [8, 开发手册]  
 
 2020-11-18 12:46:31,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} closed  
 
 2020-11-18 12:46:31,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:46:31,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:36,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:36,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 12:46:36,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 12:46:36,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 12:46:36,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.0942 millis. select * from t_user where username=?  
 
 2020-11-18 12:46:36,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} open  
 
 2020-11-18 12:46:36,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 12:46:36,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 12:46:36,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} closed  
 
 2020-11-18 12:46:36,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 12:46:36,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:39,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:39,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:39,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:39,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:46:39,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:46:39,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:46:39,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 9.7377 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:46:39,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} open  
 
 2020-11-18 12:46:39,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} Header: [count(0)]  
 
 2020-11-18 12:46:39,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} Result: [3]  
 
 2020-11-18 12:46:39,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} closed  
 
 2020-11-18 12:46:39,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:46:39,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:46:39,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:46:39,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:46:39,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 6.9681 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:46:39,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} open  
 
 2020-11-18 12:46:39,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:46:39,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:46:39,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:46:39,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:46:39,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} closed  
 
 2020-11-18 12:46:39,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:46:39,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:48,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:48,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:46:48,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:46:48,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : [1]  
 
 2020-11-18 12:46:48,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 12:46:48,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:46:48,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 4.0405 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:46:48,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [语法]  
 
 2020-11-18 12:46:48,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50007} open  
 
 2020-11-18 12:46:48,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR]  
 
 2020-11-18 12:46:48,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50007} Header: [count(0)]  
 
 2020-11-18 12:46:48,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50007} Result: [3]  
 
 2020-11-18 12:46:48,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.8675 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:46:48,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50007} closed  
 
 2020-11-18 12:46:48,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} open  
 
 2020-11-18 12:46:48,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-18 12:46:48,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Header: [count(0)]  
 
 2020-11-18 12:46:48,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Result: [1]  
 
 2020-11-18 12:46:48,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:46:48,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} closed  
 
 2020-11-18 12:46:48,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:46:48,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Parameters : [1, 5]  
 
 2020-11-18 12:46:48,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:46:48,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} executed. 2.5322 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:46:48,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:46:48,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50009} open  
 
 2020-11-18 12:46:48,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50009} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:46:48,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [语法, 5]  
 
 2020-11-18 12:46:48,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50009} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:46:48,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:46:48,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50009} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:46:48,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50009} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:46:48,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 3.2497 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:46:48,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50010} open  
 
 2020-11-18 12:46:48,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50009} closed  
 
 2020-11-18 12:46:48,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50010} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:46:48,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} clearParameters.   
 
 2020-11-18 12:46:48,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50010} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:46:48,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:46:48,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50010} closed  
 
 2020-11-18 12:46:48,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:46:48,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:52,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:52,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [语法]  
 
 2020-11-18 12:46:52,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR]  
 
 2020-11-18 12:46:52,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.6925 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:46:52,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50011} open  
 
 2020-11-18 12:46:52,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50011} Header: [count(0)]  
 
 2020-11-18 12:46:52,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50011} Result: [1]  
 
 2020-11-18 12:46:52,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50011} closed  
 
 2020-11-18 12:46:52,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:46:52,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:46:52,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : [1]  
 
 2020-11-18 12:46:52,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 12:46:52,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [语法, 5]  
 
 2020-11-18 12:46:52,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:46:52,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 2.5246 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:46:52,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} open  
 
 2020-11-18 12:46:52,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 3.0358 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:46:52,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} Header: [count(0)]  
 
 2020-11-18 12:46:52,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} open  
 
 2020-11-18 12:46:52,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} Result: [3]  
 
 2020-11-18 12:46:52,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:46:52,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} closed  
 
 2020-11-18 12:46:52,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:46:52,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-18 12:46:52,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Parameters : [1, 5]  
 
 2020-11-18 12:46:52,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:46:52,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} closed  
 
 2020-11-18 12:46:52,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:46:52,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:52,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} executed. 6.6067 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:46:52,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50014} open  
 
 2020-11-18 12:46:52,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50014} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:46:52,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50014} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:46:52,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50014} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:46:52,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50014} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:46:52,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50014} closed  
 
 2020-11-18 12:46:52,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} clearParameters.   
 
 2020-11-18 12:46:52,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:46:59,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:46:59,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:46:59,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [笔记]  
 
 2020-11-18 12:46:59,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:46:59,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [VARCHAR]  
 
 2020-11-18 12:46:59,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:46:59,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:46:59,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 3.2126 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:46:59,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} open  
 
 2020-11-18 12:46:59,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0256 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:46:59,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} Header: [count(0)]  
 
 2020-11-18 12:46:59,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} open  
 
 2020-11-18 12:46:59,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} Header: [count(0)]  
 
 2020-11-18 12:46:59,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} Result: [1]  
 
 2020-11-18 12:46:59,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} Result: [3]  
 
 2020-11-18 12:46:59,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} closed  
 
 2020-11-18 12:46:59,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} closed  
 
 2020-11-18 12:46:59,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:46:59,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-18 12:46:59,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:46:59,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:46:59,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:46:59,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.0894 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:46:59,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Parameters : [笔记, 5]  
 
 2020-11-18 12:46:59,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} open  
 
 2020-11-18 12:46:59,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:46:59,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:46:59,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:46:59,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} executed. 3.6775 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:46:59,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50018} open  
 
 2020-11-18 12:46:59,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:46:59,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50018} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:46:59,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:46:59,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50018} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:46:59,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} closed  
 
 2020-11-18 12:46:59,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:46:59,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:46:59,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50018} closed  
 
 2020-11-18 12:46:59,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} clearParameters.   
 
 2020-11-18 12:46:59,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:47:27,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:47:27,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} created. SELECT count(0) FROM t_types  
 
 2020-11-18 12:47:27,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : []  
 
 2020-11-18 12:47:27,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : []  
 
 2020-11-18 12:47:27,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 4.0503 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 12:47:27,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50019} open  
 
 2020-11-18 12:47:27,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50019} Header: [count(0)]  
 
 2020-11-18 12:47:27,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50019} Result: [6]  
 
 2020-11-18 12:47:27,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50019} closed  
 
 2020-11-18 12:47:27,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-18 12:47:27,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} created. select * from t_types LIMIT ?   
 
 2020-11-18 12:47:27,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Parameters : [5]  
 
 2020-11-18 12:47:27,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Types : [INTEGER]  
 
 2020-11-18 12:47:27,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} executed. 1.7247 millis. select * from t_types LIMIT ?   
 
 2020-11-18 12:47:27,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50020} open  
 
 2020-11-18 12:47:27,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50020} Header: [id, name]  
 
 2020-11-18 12:47:27,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50020} Result: [8, 方法论]  
 
 2020-11-18 12:47:27,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50020} Result: [9, 理论类]  
 
 2020-11-18 12:47:27,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50020} Result: [21, 错误日记]  
 
 2020-11-18 12:47:27,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50020} Result: [23, 开发日记]  
 
 2020-11-18 12:47:27,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50020} Result: [24, 实践论]  
 
 2020-11-18 12:47:27,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50020} closed  
 
 2020-11-18 12:47:27,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} clearParameters.   
 
 2020-11-18 12:47:27,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:47:30,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:47:30,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} created. SELECT count(0) FROM t_types WHERE name LIKE concat('%', ?, '%')  
 
 2020-11-18 12:47:30,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} Parameters : [方]  
 
 2020-11-18 12:47:30,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} Types : [VARCHAR]  
 
 2020-11-18 12:47:30,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} executed. 1.5366 millis. SELECT count(0) FROM t_types WHERE name LIKE concat('%', ?, '%')  
 
 2020-11-18 12:47:30,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50021} open  
 
 2020-11-18 12:47:30,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50021} Header: [count(0)]  
 
 2020-11-18 12:47:30,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50021} Result: [1]  
 
 2020-11-18 12:47:30,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50021} closed  
 
 2020-11-18 12:47:30,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} clearParameters.   
 
 2020-11-18 12:47:30,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} created. select * from  t_types where name like concat ('%',?,'%') LIMIT ?   
 
 2020-11-18 12:47:30,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} Parameters : [方, 5]  
 
 2020-11-18 12:47:30,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:47:30,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} executed. 2.5631 millis. select * from  t_types where name like concat ('%',?,'%') LIMIT ?   
 
 2020-11-18 12:47:30,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50022} open  
 
 2020-11-18 12:47:30,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50022} Header: [id, name]  
 
 2020-11-18 12:47:30,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50022} Result: [8, 方法论]  
 
 2020-11-18 12:47:30,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50022} closed  
 
 2020-11-18 12:47:30,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} clearParameters.   
 
 2020-11-18 12:47:30,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:47:31,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:47:31,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} created. SELECT count(0) FROM t_tages  
 
 2020-11-18 12:47:31,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} Parameters : []  
 
 2020-11-18 12:47:31,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} Types : []  
 
 2020-11-18 12:47:31,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} executed. 5.4405 millis. SELECT count(0) FROM t_tages  
 
 2020-11-18 12:47:31,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50023} open  
 
 2020-11-18 12:47:31,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50023} Header: [count(0)]  
 
 2020-11-18 12:47:31,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50023} Result: [6]  
 
 2020-11-18 12:47:31,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50023} closed  
 
 2020-11-18 12:47:31,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} clearParameters.   
 
 2020-11-18 12:47:31,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} created. select * from t_tages LIMIT ?   
 
 2020-11-18 12:47:31,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} Parameters : [5]  
 
 2020-11-18 12:47:31,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} Types : [INTEGER]  
 
 2020-11-18 12:47:31,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} executed. 1.443 millis. select * from t_tages LIMIT ?   
 
 2020-11-18 12:47:31,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50024} open  
 
 2020-11-18 12:47:31,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50024} Header: [id, tage]  
 
 2020-11-18 12:47:31,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50024} Result: [1, 学习日记]  
 
 2020-11-18 12:47:31,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50024} Result: [2, 错误笔记]  
 
 2020-11-18 12:47:31,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50024} Result: [3, 数据库笔记]  
 
 2020-11-18 12:47:31,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50024} Result: [4, 程序运行日记]  
 
 2020-11-18 12:47:31,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50024} Result: [5, 开发日记]  
 
 2020-11-18 12:47:31,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50024} closed  
 
 2020-11-18 12:47:31,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} clearParameters.   
 
 2020-11-18 12:47:31,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:47:33,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:47:33,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} created. SELECT count(0) FROM t_tages WHERE tage LIKE concat('%', ?, '%')  
 
 2020-11-18 12:47:33,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} Parameters : [日记]  
 
 2020-11-18 12:47:33,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} Types : [VARCHAR]  
 
 2020-11-18 12:47:33,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} executed. 1.8431 millis. SELECT count(0) FROM t_tages WHERE tage LIKE concat('%', ?, '%')  
 
 2020-11-18 12:47:33,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50025} open  
 
 2020-11-18 12:47:33,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50025} Header: [count(0)]  
 
 2020-11-18 12:47:33,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50025} Result: [3]  
 
 2020-11-18 12:47:33,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50025} closed  
 
 2020-11-18 12:47:33,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} clearParameters.   
 
 2020-11-18 12:47:33,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} created. select * from  t_tages where tage like concat ('%',?,'%') LIMIT ?   
 
 2020-11-18 12:47:33,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} Parameters : [日记, 5]  
 
 2020-11-18 12:47:33,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:47:33,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} executed. 1.7115 millis. select * from  t_tages where tage like concat ('%',?,'%') LIMIT ?   
 
 2020-11-18 12:47:33,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} open  
 
 2020-11-18 12:47:33,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} Header: [id, tage]  
 
 2020-11-18 12:47:33,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} Result: [1, 学习日记]  
 
 2020-11-18 12:47:33,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} Result: [4, 程序运行日记]  
 
 2020-11-18 12:47:33,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} Result: [5, 开发日记]  
 
 2020-11-18 12:47:33,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} closed  
 
 2020-11-18 12:47:33,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} clearParameters.   
 
 2020-11-18 12:47:33,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:47:34,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:47:34,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : [1]  
 
 2020-11-18 12:47:34,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 12:47:34,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 3.4818 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:47:34,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50027} open  
 
 2020-11-18 12:47:34,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50027} Header: [count(0)]  
 
 2020-11-18 12:47:34,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50027} Result: [3]  
 
 2020-11-18 12:47:34,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50027} closed  
 
 2020-11-18 12:47:34,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-18 12:47:34,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Parameters : [1, 5]  
 
 2020-11-18 12:47:34,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:47:34,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} executed. 2.1404 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:47:34,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50028} open  
 
 2020-11-18 12:47:34,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50028} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:47:34,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50028} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:47:34,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50028} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:47:34,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50028} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:47:34,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50028} closed  
 
 2020-11-18 12:47:34,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} clearParameters.   
 
 2020-11-18 12:47:34,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:47:37,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:47:37,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [语法]  
 
 2020-11-18 12:47:37,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [VARCHAR]  
 
 2020-11-18 12:47:37,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 2.2006 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:47:37,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50029} open  
 
 2020-11-18 12:47:37,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50029} Header: [count(0)]  
 
 2020-11-18 12:47:37,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:47:37,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50029} Result: [1]  
 
 2020-11-18 12:47:37,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:47:37,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:47:37,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50029} closed  
 
 2020-11-18 12:47:37,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-18 12:47:37,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.0223 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:47:37,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50030} open  
 
 2020-11-18 12:47:37,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50030} Header: [count(0)]  
 
 2020-11-18 12:47:37,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Parameters : [语法, 5]  
 
 2020-11-18 12:47:37,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50030} Result: [3]  
 
 2020-11-18 12:47:37,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:47:37,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50030} closed  
 
 2020-11-18 12:47:37,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:47:37,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} executed. 2.7873 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:47:37,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:47:37,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:47:37,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50031} open  
 
 2020-11-18 12:47:37,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50031} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:47:37,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.3352 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:47:37,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50031} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:47:37,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} open  
 
 2020-11-18 12:47:37,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:47:37,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50031} closed  
 
 2020-11-18 12:47:37,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:47:37,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} clearParameters.   
 
 2020-11-18 12:47:37,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:47:37,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:47:37,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:47:37,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} closed  
 
 2020-11-18 12:47:37,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:47:37,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:47:43,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:47:43,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20019} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:47:43,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20019} Parameters : [10]  
 
 2020-11-18 12:47:43,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20019} Types : [INTEGER]  
 
 2020-11-18 12:47:43,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20019} executed. 14.7863 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:47:43,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20019, rs-50033} open  
 
 2020-11-18 12:47:43,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20019, rs-50033} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:47:43,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20019, rs-50033} Result: [10, Java基本语法02, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 12:47:43,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20019, rs-50033} Result: [10, Java基本语法02, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 4, 程序运行日记, 9, 理论类]  
 
 2020-11-18 12:47:43,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20019, rs-50033} closed  
 
 2020-11-18 12:47:43,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20019} clearParameters.   
 
 2020-11-18 12:47:43,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:47:43,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:47:43,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:47:43,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:47:43,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.508 millis. select * from t_tages  
 
 2020-11-18 12:47:43,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} open  
 
 2020-11-18 12:47:43,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Header: [id, tage]  
 
 2020-11-18 12:47:43,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [1, 学习日记]  
 
 2020-11-18 12:47:43,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [2, 错误笔记]  
 
 2020-11-18 12:47:43,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [3, 数据库笔记]  
 
 2020-11-18 12:47:43,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [4, 程序运行日记]  
 
 2020-11-18 12:47:43,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [5, 开发日记]  
 
 2020-11-18 12:47:43,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [8, 开发手册]  
 
 2020-11-18 12:47:43,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} closed  
 
 2020-11-18 12:47:43,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:47:43,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:47:43,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:47:43,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:47:43,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:47:43,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.6693 millis. select * from t_types  
 
 2020-11-18 12:47:43,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} open  
 
 2020-11-18 12:47:43,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Header: [id, name]  
 
 2020-11-18 12:47:43,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [8, 方法论]  
 
 2020-11-18 12:47:43,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [9, 理论类]  
 
 2020-11-18 12:47:43,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [21, 错误日记]  
 
 2020-11-18 12:47:43,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [23, 开发日记]  
 
 2020-11-18 12:47:43,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [24, 实践论]  
 
 2020-11-18 12:47:43,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [25, 想法论]  
 
 2020-11-18 12:47:43,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} closed  
 
 2020-11-18 12:47:43,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:47:43,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:47:51,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:47:51,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:47:51,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:47:51,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0263 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:47:51,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50036} open  
 
 2020-11-18 12:47:51,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50036} Header: [count(0)]  
 
 2020-11-18 12:47:51,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50036} Result: [3]  
 
 2020-11-18 12:47:51,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50036} closed  
 
 2020-11-18 12:47:51,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:47:51,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:47:51,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:47:51,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2837 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:47:51,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} open  
 
 2020-11-18 12:47:51,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:47:51,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:47:51,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:47:51,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:47:51,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} closed  
 
 2020-11-18 12:47:51,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:47:51,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:48:33,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:48:33,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [语法]  
 
 2020-11-18 12:48:33,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR]  
 
 2020-11-18 12:48:33,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.228 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:48:33,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50038} open  
 
 2020-11-18 12:48:33,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50038} Header: [count(0)]  
 
 2020-11-18 12:48:33,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50038} Result: [1]  
 
 2020-11-18 12:48:33,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-18 12:48:33,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50038} closed  
 
 2020-11-18 12:48:33,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : [1]  
 
 2020-11-18 12:48:33,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:48:33,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 12:48:33,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [语法, 5]  
 
 2020-11-18 12:48:33,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 4.6917 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:48:33,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:48:33,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50039} open  
 
 2020-11-18 12:48:33,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50039} Header: [count(0)]  
 
 2020-11-18 12:48:33,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50039} Result: [3]  
 
 2020-11-18 12:48:33,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 4.2287 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:48:33,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50039} closed  
 
 2020-11-18 12:48:33,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50040} open  
 
 2020-11-18 12:48:33,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-18 12:48:33,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50040} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:48:33,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50040} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:48:33,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Parameters : [1, 5]  
 
 2020-11-18 12:48:33,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:48:33,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50040} closed  
 
 2020-11-18 12:48:33,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:48:33,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:48:33,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} executed. 3.195 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:48:33,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50041} open  
 
 2020-11-18 12:48:33,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50041} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:48:33,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50041} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:48:33,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50041} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:48:33,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50041} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:48:33,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50041} closed  
 
 2020-11-18 12:48:33,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} clearParameters.   
 
 2020-11-18 12:48:33,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-18 12:50:39,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-18 12:50:39,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-18 12:50:39,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-18 12:50:39,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-18 12:50:39,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-18 12:50:39,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-394} connected  
 
 2020-11-18 12:50:39,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-18 12:50:39,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:50:39,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [1]  
 
 2020-11-18 12:50:39,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-18 12:50:39,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 4.6818 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:50:39,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50042} open  
 
 2020-11-18 12:50:39,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50042} Header: [count(0)]  
 
 2020-11-18 12:50:39,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50042} Result: [3]  
 
 2020-11-18 12:50:39,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50042} closed  
 
 2020-11-18 12:50:39,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-18 12:50:39,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:50:39,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : [1, 5]  
 
 2020-11-18 12:50:39,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:50:39,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 1.6875 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:50:39,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007,procId-395} connected  
 
 2020-11-18 12:50:39,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50043} open  
 
 2020-11-18 12:50:39,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50043} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:50:39,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50043} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:50:39,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-18 12:50:39,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50043} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:50:39,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:50:39,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50043} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:50:39,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Parameters : [笔记]  
 
 2020-11-18 12:50:39,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Types : [VARCHAR]  
 
 2020-11-18 12:50:39,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50043} closed  
 
 2020-11-18 12:50:39,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-18 12:50:39,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-18 12:50:39,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} executed. 3.8141 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:50:39,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50044} open  
 
 2020-11-18 12:50:39,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50044} Header: [count(0)]  
 
 2020-11-18 12:50:39,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50044} Result: [1]  
 
 2020-11-18 12:50:39,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50044} closed  
 
 2020-11-18 12:50:39,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} clearParameters.   
 
 2020-11-18 12:50:39,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:50:39,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Parameters : [笔记, 5]  
 
 2020-11-18 12:50:39,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:50:39,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} executed. 1.9321 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:50:39,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50045} open  
 
 2020-11-18 12:50:39,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50045} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:50:39,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50045} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:50:39,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50045} closed  
 
 2020-11-18 12:50:39,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} clearParameters.   
 
 2020-11-18 12:50:39,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-18 12:50:51,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-18 12:50:51,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Parameters : [笔记]  
 
 2020-11-18 12:50:51,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Types : [VARCHAR]  
 
 2020-11-18 12:50:51,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} executed. 3.0192 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:50:51,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50046} open  
 
 2020-11-18 12:50:51,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50046} Header: [count(0)]  
 
 2020-11-18 12:50:51,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50046} Result: [1]  
 
 2020-11-18 12:50:51,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50046} closed  
 
 2020-11-18 12:50:51,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-18 12:50:51,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} clearParameters.   
 
 2020-11-18 12:50:51,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [1]  
 
 2020-11-18 12:50:51,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-18 12:50:51,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Parameters : [笔记, 5]  
 
 2020-11-18 12:50:51,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:50:51,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 3.9213 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:50:51,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50047} open  
 
 2020-11-18 12:50:51,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50047} Header: [count(0)]  
 
 2020-11-18 12:50:51,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} executed. 3.9839 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:50:51,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50047} Result: [3]  
 
 2020-11-18 12:50:51,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50048} open  
 
 2020-11-18 12:50:51,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50047} closed  
 
 2020-11-18 12:50:51,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50048} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:50:51,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-18 12:50:51,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50048} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:50:51,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50048} closed  
 
 2020-11-18 12:50:51,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : [1, 5]  
 
 2020-11-18 12:50:51,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} clearParameters.   
 
 2020-11-18 12:50:51,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:50:51,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-18 12:50:51,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 3.6059 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:50:51,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50049} open  
 
 2020-11-18 12:50:51,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50049} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:50:51,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50049} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:50:51,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50049} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:50:51,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50049} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:50:51,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50049} closed  
 
 2020-11-18 12:50:51,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-18 12:50:51,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-18 12:53:55,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-396} connected  
 
 2020-11-18 12:53:55,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-397} connected  
 
 2020-11-18 12:53:55,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-398} connected  
 
 2020-11-18 12:53:55,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-399} connected  
 
 2020-11-18 12:53:55,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-400} connected  
 
 2020-11-18 12:53:55,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:53:55,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 12:53:55,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:53:55,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:53:55,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 40.9724 millis. select * from t_types  
 
 2020-11-18 12:53:55,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 12:53:55,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 12:53:55,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 12:53:55,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 12:53:55,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 12:53:55,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 12:53:55,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 12:53:55,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 12:53:55,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 12:53:55,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:53:55,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:53:55,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:53:55,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 12:53:55,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:53:55,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:53:55,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.7254 millis. select * from t_tages  
 
 2020-11-18 12:53:55,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 12:53:55,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 12:53:55,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 12:53:55,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 12:53:55,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 12:53:55,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 12:53:55,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 12:53:55,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 12:53:55,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 12:53:55,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:53:55,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:01,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:01,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 12:54:01,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 12:54:01,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 12:54:01,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.3325 millis. select * from t_user where username=?  
 
 2020-11-18 12:54:01,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 12:54:01,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 12:54:01,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 12:54:01,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 12:54:01,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 12:54:01,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:03,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:03,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:03,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:03,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:54:03,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:54:03,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:54:03,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.9537 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:54:03,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 12:54:03,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 12:54:03,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [3]  
 
 2020-11-18 12:54:03,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 12:54:03,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:54:03,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:54:03,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:54:03,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:54:03,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.8154 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:54:03,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 12:54:03,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:54:03,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:54:03,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:54:03,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:54:03,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 12:54:03,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:54:03,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:06,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:06,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:54:06,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [笔记]  
 
 2020-11-18 12:54:06,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-18 12:54:06,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.8496 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:54:06,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 12:54:06,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-18 12:54:06,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1]  
 
 2020-11-18 12:54:06,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 12:54:06,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 12:54:06,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:54:06,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [笔记, 5]  
 
 2020-11-18 12:54:06,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:54:06,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.7846 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:54:06,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-18 12:54:06,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:54:06,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:54:06,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-18 12:54:06,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:54:06,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:14,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:14,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [Java]  
 
 2020-11-18 12:54:14,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-18 12:54:14,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.5584 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:54:14,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} open  
 
 2020-11-18 12:54:14,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Header: [count(0)]  
 
 2020-11-18 12:54:14,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [3]  
 
 2020-11-18 12:54:14,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} closed  
 
 2020-11-18 12:54:14,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 12:54:14,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [Java, 5]  
 
 2020-11-18 12:54:14,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:54:14,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.4634 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:54:14,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} open  
 
 2020-11-18 12:54:14,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:54:14,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:54:14,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:54:14,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:54:14,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} closed  
 
 2020-11-18 12:54:14,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:54:14,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:20,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:20,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [笔记]  
 
 2020-11-18 12:54:20,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-18 12:54:20,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.1577 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:54:20,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-18 12:54:20,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-18 12:54:20,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [1]  
 
 2020-11-18 12:54:20,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-18 12:54:20,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 12:54:20,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [笔记, 5]  
 
 2020-11-18 12:54:20,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:54:20,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.6948 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:54:20,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-18 12:54:20,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:54:20,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:54:20,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-18 12:54:20,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:54:20,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:26,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:26,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [Java]  
 
 2020-11-18 12:54:26,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-18 12:54:26,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.6708 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-18 12:54:26,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50011} open  
 
 2020-11-18 12:54:26,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50011} Header: [count(0)]  
 
 2020-11-18 12:54:26,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50011} Result: [3]  
 
 2020-11-18 12:54:26,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50011} closed  
 
 2020-11-18 12:54:26,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 12:54:26,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [Java, 5]  
 
 2020-11-18 12:54:26,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR, INTEGER]  
 
 2020-11-18 12:54:26,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.4822 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-18 12:54:26,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} open  
 
 2020-11-18 12:54:26,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:54:26,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:54:26,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:54:26,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:54:26,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} closed  
 
 2020-11-18 12:54:26,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:54:26,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:29,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:29,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:54:29,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [1]  
 
 2020-11-18 12:54:29,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 12:54:29,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 7.4843 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:54:29,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} open  
 
 2020-11-18 12:54:29,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:54:29,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 12:54:29,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 12:54:29,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} closed  
 
 2020-11-18 12:54:29,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 12:54:29,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:29,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:29,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:54:29,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:54:29,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4627 millis. select * from t_tages  
 
 2020-11-18 12:54:29,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} open  
 
 2020-11-18 12:54:29,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Header: [id, tage]  
 
 2020-11-18 12:54:29,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [1, 学习日记]  
 
 2020-11-18 12:54:29,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [2, 错误笔记]  
 
 2020-11-18 12:54:29,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [3, 数据库笔记]  
 
 2020-11-18 12:54:29,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [4, 程序运行日记]  
 
 2020-11-18 12:54:29,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [5, 开发日记]  
 
 2020-11-18 12:54:29,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [8, 开发手册]  
 
 2020-11-18 12:54:29,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} closed  
 
 2020-11-18 12:54:29,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:54:29,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:29,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:29,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:54:29,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:54:29,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.9518 millis. select * from t_types  
 
 2020-11-18 12:54:29,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} open  
 
 2020-11-18 12:54:29,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Header: [id, name]  
 
 2020-11-18 12:54:29,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [8, 方法论]  
 
 2020-11-18 12:54:29,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [9, 理论类]  
 
 2020-11-18 12:54:29,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [21, 错误日记]  
 
 2020-11-18 12:54:29,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [23, 开发日记]  
 
 2020-11-18 12:54:29,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [24, 实践论]  
 
 2020-11-18 12:54:29,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [25, 想法论]  
 
 2020-11-18 12:54:29,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} closed  
 
 2020-11-18 12:54:29,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:54:29,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:34,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:34,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:54:34,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:54:34,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.3953 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:54:34,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} open  
 
 2020-11-18 12:54:34,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} Header: [count(0)]  
 
 2020-11-18 12:54:34,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} Result: [3]  
 
 2020-11-18 12:54:34,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} closed  
 
 2020-11-18 12:54:34,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:54:34,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:54:34,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:54:34,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.9112 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:54:34,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} open  
 
 2020-11-18 12:54:34,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:54:34,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:54:34,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:54:34,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:54:34,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} closed  
 
 2020-11-18 12:54:34,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:54:34,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:36,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:36,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-18 12:54:36,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 12:54:36,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.718 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:54:36,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} open  
 
 2020-11-18 12:54:36,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:54:36,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 12:54:36,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 9, 理论类]  
 
 2020-11-18 12:54:36,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} closed  
 
 2020-11-18 12:54:36,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 12:54:36,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:36,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:36,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:54:36,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:54:36,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1464 millis. select * from t_tages  
 
 2020-11-18 12:54:36,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} open  
 
 2020-11-18 12:54:36,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Header: [id, tage]  
 
 2020-11-18 12:54:36,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [1, 学习日记]  
 
 2020-11-18 12:54:36,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [2, 错误笔记]  
 
 2020-11-18 12:54:36,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [3, 数据库笔记]  
 
 2020-11-18 12:54:36,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [4, 程序运行日记]  
 
 2020-11-18 12:54:36,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [5, 开发日记]  
 
 2020-11-18 12:54:36,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [8, 开发手册]  
 
 2020-11-18 12:54:36,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} closed  
 
 2020-11-18 12:54:36,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:54:36,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:36,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:36,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:54:36,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:54:36,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.4269 millis. select * from t_types  
 
 2020-11-18 12:54:36,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} open  
 
 2020-11-18 12:54:36,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Header: [id, name]  
 
 2020-11-18 12:54:36,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [8, 方法论]  
 
 2020-11-18 12:54:36,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [9, 理论类]  
 
 2020-11-18 12:54:36,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [21, 错误日记]  
 
 2020-11-18 12:54:36,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [23, 开发日记]  
 
 2020-11-18 12:54:36,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [24, 实践论]  
 
 2020-11-18 12:54:36,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [25, 想法论]  
 
 2020-11-18 12:54:36,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} closed  
 
 2020-11-18 12:54:36,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:54:36,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:46,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:46,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [10]  
 
 2020-11-18 12:54:46,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 12:54:46,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.7617 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:54:46,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50021} open  
 
 2020-11-18 12:54:46,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50021} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:54:46,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50021} Result: [10, Java基本语法02, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 12:54:46,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50021} Result: [10, Java基本语法02, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 4, 程序运行日记, 9, 理论类]  
 
 2020-11-18 12:54:46,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50021} closed  
 
 2020-11-18 12:54:46,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 12:54:46,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:46,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:46,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:54:46,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:54:46,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.6359 millis. select * from t_tages  
 
 2020-11-18 12:54:46,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} open  
 
 2020-11-18 12:54:46,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Header: [id, tage]  
 
 2020-11-18 12:54:46,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [1, 学习日记]  
 
 2020-11-18 12:54:46,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [2, 错误笔记]  
 
 2020-11-18 12:54:46,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [3, 数据库笔记]  
 
 2020-11-18 12:54:46,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [4, 程序运行日记]  
 
 2020-11-18 12:54:46,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [5, 开发日记]  
 
 2020-11-18 12:54:46,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [8, 开发手册]  
 
 2020-11-18 12:54:46,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} closed  
 
 2020-11-18 12:54:46,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:54:46,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:54:46,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:54:46,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:54:46,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:54:46,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.5643 millis. select * from t_types  
 
 2020-11-18 12:54:46,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} open  
 
 2020-11-18 12:54:46,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} Header: [id, name]  
 
 2020-11-18 12:54:46,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} Result: [8, 方法论]  
 
 2020-11-18 12:54:46,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} Result: [9, 理论类]  
 
 2020-11-18 12:54:46,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} Result: [21, 错误日记]  
 
 2020-11-18 12:54:46,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} Result: [23, 开发日记]  
 
 2020-11-18 12:54:46,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} Result: [24, 实践论]  
 
 2020-11-18 12:54:46,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} Result: [25, 想法论]  
 
 2020-11-18 12:54:46,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50023} closed  
 
 2020-11-18 12:54:46,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:54:46,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:00,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:00,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. SELECT count(0) FROM t_types  
 
 2020-11-18 12:55:00,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-18 12:55:00,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-18 12:55:00,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.8099 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 12:55:00,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} open  
 
 2020-11-18 12:55:00,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} Header: [count(0)]  
 
 2020-11-18 12:55:00,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} Result: [6]  
 
 2020-11-18 12:55:00,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} closed  
 
 2020-11-18 12:55:00,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:55:00,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. select * from t_types LIMIT ?   
 
 2020-11-18 12:55:00,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5]  
 
 2020-11-18 12:55:00,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER]  
 
 2020-11-18 12:55:00,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.7608 millis. select * from t_types LIMIT ?   
 
 2020-11-18 12:55:00,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50025} open  
 
 2020-11-18 12:55:00,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50025} Header: [id, name]  
 
 2020-11-18 12:55:00,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50025} Result: [8, 方法论]  
 
 2020-11-18 12:55:01,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50025} Result: [9, 理论类]  
 
 2020-11-18 12:55:01,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50025} Result: [21, 错误日记]  
 
 2020-11-18 12:55:01,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50025} Result: [23, 开发日记]  
 
 2020-11-18 12:55:01,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50025} Result: [24, 实践论]  
 
 2020-11-18 12:55:01,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50025} closed  
 
 2020-11-18 12:55:01,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 12:55:01,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:02,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:02,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:55:02,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:55:02,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.042 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:55:02,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50026} open  
 
 2020-11-18 12:55:02,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50026} Header: [count(0)]  
 
 2020-11-18 12:55:02,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50026} Result: [3]  
 
 2020-11-18 12:55:02,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50026} closed  
 
 2020-11-18 12:55:02,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:55:02,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:55:02,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:55:02,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.563 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:55:02,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50027} open  
 
 2020-11-18 12:55:02,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50027} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:55:02,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50027} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:55:02,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50027} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:55:02,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50027} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:55:02,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50027} closed  
 
 2020-11-18 12:55:02,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:55:02,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:05,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:05,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-18 12:55:05,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-18 12:55:05,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.1982 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 12:55:05,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50028} open  
 
 2020-11-18 12:55:05,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50028} Header: [count(0)]  
 
 2020-11-18 12:55:05,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50028} Result: [6]  
 
 2020-11-18 12:55:05,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50028} closed  
 
 2020-11-18 12:55:05,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:55:05,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5]  
 
 2020-11-18 12:55:05,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER]  
 
 2020-11-18 12:55:05,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 1.7006 millis. select * from t_types LIMIT ?   
 
 2020-11-18 12:55:05,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50029} open  
 
 2020-11-18 12:55:05,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50029} Header: [id, name]  
 
 2020-11-18 12:55:05,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50029} Result: [8, 方法论]  
 
 2020-11-18 12:55:05,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50029} Result: [9, 理论类]  
 
 2020-11-18 12:55:05,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50029} Result: [21, 错误日记]  
 
 2020-11-18 12:55:05,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50029} Result: [23, 开发日记]  
 
 2020-11-18 12:55:05,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50029} Result: [24, 实践论]  
 
 2020-11-18 12:55:05,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50029} closed  
 
 2020-11-18 12:55:05,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 12:55:05,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:09,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:09,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-18 12:55:09,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-18 12:55:09,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.5839 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 12:55:09,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} open  
 
 2020-11-18 12:55:09,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} Header: [count(0)]  
 
 2020-11-18 12:55:09,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} Result: [6]  
 
 2020-11-18 12:55:09,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} closed  
 
 2020-11-18 12:55:09,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:55:09,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5]  
 
 2020-11-18 12:55:09,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER]  
 
 2020-11-18 12:55:09,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.1717 millis. select * from t_types LIMIT ?   
 
 2020-11-18 12:55:09,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50031} open  
 
 2020-11-18 12:55:09,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50031} Header: [id, name]  
 
 2020-11-18 12:55:09,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50031} Result: [8, 方法论]  
 
 2020-11-18 12:55:09,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50031} Result: [9, 理论类]  
 
 2020-11-18 12:55:09,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50031} Result: [21, 错误日记]  
 
 2020-11-18 12:55:09,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50031} Result: [23, 开发日记]  
 
 2020-11-18 12:55:09,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50031} Result: [24, 实践论]  
 
 2020-11-18 12:55:09,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50031} closed  
 
 2020-11-18 12:55:09,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 12:55:09,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:10,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:10,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. SELECT count(0) FROM t_tages  
 
 2020-11-18 12:55:10,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : []  
 
 2020-11-18 12:55:10,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : []  
 
 2020-11-18 12:55:10,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 1.7631 millis. SELECT count(0) FROM t_tages  
 
 2020-11-18 12:55:10,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50032} open  
 
 2020-11-18 12:55:10,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50032} Header: [count(0)]  
 
 2020-11-18 12:55:10,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50032} Result: [6]  
 
 2020-11-18 12:55:10,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50032} closed  
 
 2020-11-18 12:55:10,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 12:55:10,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} created. select * from t_tages LIMIT ?   
 
 2020-11-18 12:55:10,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : [5]  
 
 2020-11-18 12:55:10,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : [INTEGER]  
 
 2020-11-18 12:55:10,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 2.3257 millis. select * from t_tages LIMIT ?   
 
 2020-11-18 12:55:10,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50033} open  
 
 2020-11-18 12:55:10,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50033} Header: [id, tage]  
 
 2020-11-18 12:55:10,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50033} Result: [1, 学习日记]  
 
 2020-11-18 12:55:10,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50033} Result: [2, 错误笔记]  
 
 2020-11-18 12:55:10,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50033} Result: [3, 数据库笔记]  
 
 2020-11-18 12:55:10,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50033} Result: [4, 程序运行日记]  
 
 2020-11-18 12:55:10,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50033} Result: [5, 开发日记]  
 
 2020-11-18 12:55:10,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50033} closed  
 
 2020-11-18 12:55:10,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-18 12:55:10,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:11,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:11,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} created. select * from t_tages where id=?  
 
 2020-11-18 12:55:11,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [1]  
 
 2020-11-18 12:55:11,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER]  
 
 2020-11-18 12:55:11,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 2.9596 millis. select * from t_tages where id=?  
 
 2020-11-18 12:55:11,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50034} open  
 
 2020-11-18 12:55:11,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50034} Header: [id, tage]  
 
 2020-11-18 12:55:11,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50034} Result: [1, 学习日记]  
 
 2020-11-18 12:55:11,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50034} closed  
 
 2020-11-18 12:55:11,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-18 12:55:11,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:13,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:13,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:55:13,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:55:13,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.11 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:55:13,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50035} open  
 
 2020-11-18 12:55:13,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50035} Header: [count(0)]  
 
 2020-11-18 12:55:13,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50035} Result: [3]  
 
 2020-11-18 12:55:13,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50035} closed  
 
 2020-11-18 12:55:13,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:55:13,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:55:13,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:55:13,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2131 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:55:13,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} open  
 
 2020-11-18 12:55:13,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:55:13,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:55:13,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:55:13,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:55:13,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} closed  
 
 2020-11-18 12:55:13,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:55:13,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:16,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:16,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:55:16,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:55:16,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.2687 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:55:16,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} open  
 
 2020-11-18 12:55:16,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} Header: [count(0)]  
 
 2020-11-18 12:55:16,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} Result: [3]  
 
 2020-11-18 12:55:16,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} closed  
 
 2020-11-18 12:55:16,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:55:16,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:55:16,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:55:16,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.642 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:55:16,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} open  
 
 2020-11-18 12:55:16,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:55:16,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:55:16,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:55:16,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:55:16,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} closed  
 
 2020-11-18 12:55:16,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:55:16,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:18,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:18,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [1]  
 
 2020-11-18 12:55:18,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 12:55:18,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 4.1078 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:55:18,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50039} open  
 
 2020-11-18 12:55:18,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50039} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:55:18,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50039} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 12:55:18,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50039} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 12:55:18,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50039} closed  
 
 2020-11-18 12:55:18,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 12:55:18,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:18,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:18,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:55:18,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:55:18,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.5823 millis. select * from t_tages  
 
 2020-11-18 12:55:18,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} open  
 
 2020-11-18 12:55:18,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} Header: [id, tage]  
 
 2020-11-18 12:55:18,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} Result: [1, 学习日记]  
 
 2020-11-18 12:55:18,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} Result: [2, 错误笔记]  
 
 2020-11-18 12:55:18,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} Result: [3, 数据库笔记]  
 
 2020-11-18 12:55:18,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} Result: [4, 程序运行日记]  
 
 2020-11-18 12:55:18,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} Result: [5, 开发日记]  
 
 2020-11-18 12:55:18,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} Result: [8, 开发手册]  
 
 2020-11-18 12:55:18,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50040} closed  
 
 2020-11-18 12:55:18,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:55:18,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:18,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:18,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:55:18,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:55:18,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.4649 millis. select * from t_types  
 
 2020-11-18 12:55:18,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} open  
 
 2020-11-18 12:55:18,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} Header: [id, name]  
 
 2020-11-18 12:55:18,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} Result: [8, 方法论]  
 
 2020-11-18 12:55:18,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} Result: [9, 理论类]  
 
 2020-11-18 12:55:18,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} Result: [21, 错误日记]  
 
 2020-11-18 12:55:18,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} Result: [23, 开发日记]  
 
 2020-11-18 12:55:18,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} Result: [24, 实践论]  
 
 2020-11-18 12:55:18,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} Result: [25, 想法论]  
 
 2020-11-18 12:55:18,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50041} closed  
 
 2020-11-18 12:55:18,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:55:18,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:55,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:55,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-18 12:55:55,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-18 12:55:55,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.7342 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 12:55:55,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50042} open  
 
 2020-11-18 12:55:55,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50042} Header: [count(0)]  
 
 2020-11-18 12:55:55,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50042} Result: [6]  
 
 2020-11-18 12:55:55,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50042} closed  
 
 2020-11-18 12:55:55,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:55:55,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5]  
 
 2020-11-18 12:55:55,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER]  
 
 2020-11-18 12:55:55,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 1.2062 millis. select * from t_types LIMIT ?   
 
 2020-11-18 12:55:55,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50043} open  
 
 2020-11-18 12:55:55,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50043} Header: [id, name]  
 
 2020-11-18 12:55:55,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50043} Result: [8, 方法论]  
 
 2020-11-18 12:55:55,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50043} Result: [9, 理论类]  
 
 2020-11-18 12:55:55,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50043} Result: [21, 错误日记]  
 
 2020-11-18 12:55:55,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50043} Result: [23, 开发日记]  
 
 2020-11-18 12:55:55,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50043} Result: [24, 实践论]  
 
 2020-11-18 12:55:55,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50043} closed  
 
 2020-11-18 12:55:55,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 12:55:55,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:56,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:56,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : []  
 
 2020-11-18 12:55:56,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : []  
 
 2020-11-18 12:55:56,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 3.5299 millis. SELECT count(0) FROM t_tages  
 
 2020-11-18 12:55:56,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50044} open  
 
 2020-11-18 12:55:56,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50044} Header: [count(0)]  
 
 2020-11-18 12:55:56,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50044} Result: [6]  
 
 2020-11-18 12:55:56,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50044} closed  
 
 2020-11-18 12:55:56,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 12:55:56,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : [5]  
 
 2020-11-18 12:55:56,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : [INTEGER]  
 
 2020-11-18 12:55:56,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 2.8483 millis. select * from t_tages LIMIT ?   
 
 2020-11-18 12:55:56,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50045} open  
 
 2020-11-18 12:55:56,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50045} Header: [id, tage]  
 
 2020-11-18 12:55:56,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50045} Result: [1, 学习日记]  
 
 2020-11-18 12:55:56,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50045} Result: [2, 错误笔记]  
 
 2020-11-18 12:55:56,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50045} Result: [3, 数据库笔记]  
 
 2020-11-18 12:55:56,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50045} Result: [4, 程序运行日记]  
 
 2020-11-18 12:55:56,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50045} Result: [5, 开发日记]  
 
 2020-11-18 12:55:56,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50045} closed  
 
 2020-11-18 12:55:56,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-18 12:55:56,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:55:57,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:55:57,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [1]  
 
 2020-11-18 12:55:57,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER]  
 
 2020-11-18 12:55:57,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 2.2485 millis. select * from t_tages where id=?  
 
 2020-11-18 12:55:57,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50046} open  
 
 2020-11-18 12:55:57,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50046} Header: [id, tage]  
 
 2020-11-18 12:55:57,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50046} Result: [1, 学习日记]  
 
 2020-11-18 12:55:57,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50046} closed  
 
 2020-11-18 12:55:57,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-18 12:55:57,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:56:02,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:56:02,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [1]  
 
 2020-11-18 12:56:02,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 12:56:02,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.5243 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:56:02,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50047} open  
 
 2020-11-18 12:56:02,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50047} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:56:02,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50047} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 12:56:02,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50047} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 12:56:02,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50047} closed  
 
 2020-11-18 12:56:02,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 12:56:02,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:56:02,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:56:02,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:56:02,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:56:02,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.7188 millis. select * from t_tages  
 
 2020-11-18 12:56:02,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} open  
 
 2020-11-18 12:56:02,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} Header: [id, tage]  
 
 2020-11-18 12:56:02,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} Result: [1, 学习日记]  
 
 2020-11-18 12:56:02,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} Result: [2, 错误笔记]  
 
 2020-11-18 12:56:02,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} Result: [3, 数据库笔记]  
 
 2020-11-18 12:56:02,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} Result: [4, 程序运行日记]  
 
 2020-11-18 12:56:02,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} Result: [5, 开发日记]  
 
 2020-11-18 12:56:02,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} Result: [8, 开发手册]  
 
 2020-11-18 12:56:02,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50048} closed  
 
 2020-11-18 12:56:02,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:56:02,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:56:02,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:56:02,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:56:02,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:56:02,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.7462 millis. select * from t_types  
 
 2020-11-18 12:56:02,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} open  
 
 2020-11-18 12:56:02,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} Header: [id, name]  
 
 2020-11-18 12:56:02,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} Result: [8, 方法论]  
 
 2020-11-18 12:56:02,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} Result: [9, 理论类]  
 
 2020-11-18 12:56:02,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} Result: [21, 错误日记]  
 
 2020-11-18 12:56:02,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} Result: [23, 开发日记]  
 
 2020-11-18 12:56:02,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} Result: [24, 实践论]  
 
 2020-11-18 12:56:02,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} Result: [25, 想法论]  
 
 2020-11-18 12:56:02,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50049} closed  
 
 2020-11-18 12:56:02,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:56:02,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:56:05,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:56:05,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-18 12:56:05,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-18 12:56:05,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.78 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 12:56:05,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50050} open  
 
 2020-11-18 12:56:05,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50050} Header: [count(0)]  
 
 2020-11-18 12:56:05,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50050} Result: [6]  
 
 2020-11-18 12:56:05,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50050} closed  
 
 2020-11-18 12:56:05,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:56:05,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5]  
 
 2020-11-18 12:56:05,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER]  
 
 2020-11-18 12:56:05,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.1969 millis. select * from t_types LIMIT ?   
 
 2020-11-18 12:56:05,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50051} open  
 
 2020-11-18 12:56:05,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50051} Header: [id, name]  
 
 2020-11-18 12:56:05,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50051} Result: [8, 方法论]  
 
 2020-11-18 12:56:05,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50051} Result: [9, 理论类]  
 
 2020-11-18 12:56:05,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50051} Result: [21, 错误日记]  
 
 2020-11-18 12:56:05,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50051} Result: [23, 开发日记]  
 
 2020-11-18 12:56:05,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50051} Result: [24, 实践论]  
 
 2020-11-18 12:56:05,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50051} closed  
 
 2020-11-18 12:56:05,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 12:56:05,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:56:06,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:56:06,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : []  
 
 2020-11-18 12:56:06,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : []  
 
 2020-11-18 12:56:06,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 2.7743 millis. SELECT count(0) FROM t_tages  
 
 2020-11-18 12:56:06,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50052} open  
 
 2020-11-18 12:56:06,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50052} Header: [count(0)]  
 
 2020-11-18 12:56:06,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50052} Result: [6]  
 
 2020-11-18 12:56:06,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50052} closed  
 
 2020-11-18 12:56:06,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 12:56:06,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : [5]  
 
 2020-11-18 12:56:06,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : [INTEGER]  
 
 2020-11-18 12:56:06,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 1.8385 millis. select * from t_tages LIMIT ?   
 
 2020-11-18 12:56:06,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50053} open  
 
 2020-11-18 12:56:06,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50053} Header: [id, tage]  
 
 2020-11-18 12:56:06,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50053} Result: [1, 学习日记]  
 
 2020-11-18 12:56:06,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50053} Result: [2, 错误笔记]  
 
 2020-11-18 12:56:06,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50053} Result: [3, 数据库笔记]  
 
 2020-11-18 12:56:06,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50053} Result: [4, 程序运行日记]  
 
 2020-11-18 12:56:06,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50053} Result: [5, 开发日记]  
 
 2020-11-18 12:56:06,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50053} closed  
 
 2020-11-18 12:56:06,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-18 12:56:06,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:56:07,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:56:07,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [1]  
 
 2020-11-18 12:56:07,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER]  
 
 2020-11-18 12:56:07,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 2.5139 millis. select * from t_tages where id=?  
 
 2020-11-18 12:56:07,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50054} open  
 
 2020-11-18 12:56:07,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50054} Header: [id, tage]  
 
 2020-11-18 12:56:07,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50054} Result: [1, 学习日记]  
 
 2020-11-18 12:56:07,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50054} closed  
 
 2020-11-18 12:56:07,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-18 12:56:07,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:19,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-401} connected  
 
 2020-11-18 12:57:19,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-402} connected  
 
 2020-11-18 12:57:19,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-403} connected  
 
 2020-11-18 12:57:19,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-404} connected  
 
 2020-11-18 12:57:19,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-405} connected  
 
 2020-11-18 12:57:19,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:19,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 12:57:19,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:57:19,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:57:19,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 23.5992 millis. select * from t_types  
 
 2020-11-18 12:57:19,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 12:57:19,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 12:57:19,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 12:57:19,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 12:57:19,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 12:57:19,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 12:57:19,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 12:57:19,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 12:57:19,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 12:57:19,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:57:19,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:19,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:19,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 12:57:19,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:57:19,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:57:19,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.8902 millis. select * from t_tages  
 
 2020-11-18 12:57:19,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 12:57:19,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 12:57:19,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 12:57:19,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 12:57:19,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 12:57:19,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 12:57:19,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 12:57:19,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 12:57:19,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 12:57:19,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:57:19,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:26,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:27,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 12:57:27,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 12:57:27,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 12:57:27,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.7391 millis. select * from t_user where username=?  
 
 2020-11-18 12:57:27,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 12:57:27,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 12:57:27,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 12:57:27,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 12:57:27,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 12:57:27,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:30,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:30,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:30,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:30,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:57:30,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:57:30,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:57:30,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.9077 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:57:30,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 12:57:30,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 12:57:30,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [3]  
 
 2020-11-18 12:57:30,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 12:57:30,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:57:30,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:57:30,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:57:30,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:57:30,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.5767 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:57:30,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 12:57:30,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:57:30,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:57:30,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:57:30,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:57:30,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 12:57:30,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:57:30,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:31,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:31,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:57:31,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [10]  
 
 2020-11-18 12:57:31,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 12:57:31,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 5.0666 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:57:31,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 12:57:31,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:57:31,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [10, Java基本语法02, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 12:57:31,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [10, Java基本语法02, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 4, 程序运行日记, 9, 理论类]  
 
 2020-11-18 12:57:31,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 12:57:31,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 12:57:31,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:31,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:31,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:57:31,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:57:31,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4343 millis. select * from t_tages  
 
 2020-11-18 12:57:31,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 12:57:31,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 12:57:31,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 12:57:31,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 12:57:31,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 12:57:31,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 12:57:31,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 12:57:31,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 12:57:31,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 12:57:31,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:57:31,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:31,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:31,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:57:31,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:57:31,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.7545 millis. select * from t_types  
 
 2020-11-18 12:57:31,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 12:57:31,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 12:57:31,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 12:57:31,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 12:57:31,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 12:57:31,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 12:57:31,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 12:57:31,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 12:57:31,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 12:57:31,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:57:31,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:47,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:47,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. SELECT count(0) FROM t_tages  
 
 2020-11-18 12:57:47,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-18 12:57:47,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-18 12:57:47,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.9511 millis. SELECT count(0) FROM t_tages  
 
 2020-11-18 12:57:47,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} open  
 
 2020-11-18 12:57:47,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Header: [count(0)]  
 
 2020-11-18 12:57:47,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Result: [6]  
 
 2020-11-18 12:57:47,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} closed  
 
 2020-11-18 12:57:47,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 12:57:47,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_tages LIMIT ?   
 
 2020-11-18 12:57:47,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5]  
 
 2020-11-18 12:57:47,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-18 12:57:47,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.0778 millis. select * from t_tages LIMIT ?   
 
 2020-11-18 12:57:47,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50009} open  
 
 2020-11-18 12:57:47,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50009} Header: [id, tage]  
 
 2020-11-18 12:57:47,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50009} Result: [1, 学习日记]  
 
 2020-11-18 12:57:47,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50009} Result: [2, 错误笔记]  
 
 2020-11-18 12:57:47,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50009} Result: [3, 数据库笔记]  
 
 2020-11-18 12:57:47,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50009} Result: [4, 程序运行日记]  
 
 2020-11-18 12:57:47,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50009} Result: [5, 开发日记]  
 
 2020-11-18 12:57:47,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50009} closed  
 
 2020-11-18 12:57:47,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 12:57:47,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:48,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:48,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_tages where id=?  
 
 2020-11-18 12:57:48,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [1]  
 
 2020-11-18 12:57:48,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 12:57:48,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 1.5042 millis. select * from t_tages where id=?  
 
 2020-11-18 12:57:48,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50010} open  
 
 2020-11-18 12:57:48,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50010} Header: [id, tage]  
 
 2020-11-18 12:57:48,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50010} Result: [1, 学习日记]  
 
 2020-11-18 12:57:48,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50010} closed  
 
 2020-11-18 12:57:48,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 12:57:48,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:55,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:55,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 12:57:55,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 12:57:55,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2992 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 12:57:55,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} open  
 
 2020-11-18 12:57:55,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Header: [count(0)]  
 
 2020-11-18 12:57:55,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [3]  
 
 2020-11-18 12:57:55,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} closed  
 
 2020-11-18 12:57:55,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:57:55,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 12:57:55,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 12:57:55,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.1522 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 12:57:55,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} open  
 
 2020-11-18 12:57:55,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 12:57:55,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 12:57:55,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 12:57:55,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 12:57:55,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} closed  
 
 2020-11-18 12:57:55,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:57:55,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:57,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:57,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 12:57:57,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 12:57:57,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.0015 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 12:57:57,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} open  
 
 2020-11-18 12:57:57,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 12:57:57,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 9, 理论类]  
 
 2020-11-18 12:57:57,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [9, Java简介, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 8, 开发手册, 9, 理论类]  
 
 2020-11-18 12:57:57,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} closed  
 
 2020-11-18 12:57:57,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 12:57:57,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:57,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:57,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:57:57,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:57:57,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.764 millis. select * from t_tages  
 
 2020-11-18 12:57:57,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} open  
 
 2020-11-18 12:57:57,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Header: [id, tage]  
 
 2020-11-18 12:57:57,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [1, 学习日记]  
 
 2020-11-18 12:57:57,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [2, 错误笔记]  
 
 2020-11-18 12:57:57,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [3, 数据库笔记]  
 
 2020-11-18 12:57:57,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [4, 程序运行日记]  
 
 2020-11-18 12:57:57,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [5, 开发日记]  
 
 2020-11-18 12:57:57,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [8, 开发手册]  
 
 2020-11-18 12:57:57,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} closed  
 
 2020-11-18 12:57:57,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:57:57,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:57:57,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:57:57,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:57:57,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:57:57,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.4413 millis. select * from t_types  
 
 2020-11-18 12:57:57,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} open  
 
 2020-11-18 12:57:57,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Header: [id, name]  
 
 2020-11-18 12:57:57,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [8, 方法论]  
 
 2020-11-18 12:57:57,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [9, 理论类]  
 
 2020-11-18 12:57:57,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [21, 错误日记]  
 
 2020-11-18 12:57:57,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [23, 开发日记]  
 
 2020-11-18 12:57:57,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [24, 实践论]  
 
 2020-11-18 12:57:57,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [25, 想法论]  
 
 2020-11-18 12:57:57,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} closed  
 
 2020-11-18 12:57:57,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:57:57,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:58:44,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:58:44,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. SELECT count(0) FROM t_types  
 
 2020-11-18 12:58:44,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : []  
 
 2020-11-18 12:58:44,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : []  
 
 2020-11-18 12:58:44,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.1894 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 12:58:44,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} open  
 
 2020-11-18 12:58:44,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} Header: [count(0)]  
 
 2020-11-18 12:58:44,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} Result: [6]  
 
 2020-11-18 12:58:44,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} closed  
 
 2020-11-18 12:58:44,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-18 12:58:44,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. select * from t_types LIMIT ?   
 
 2020-11-18 12:58:44,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [5]  
 
 2020-11-18 12:58:44,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [INTEGER]  
 
 2020-11-18 12:58:44,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 1.8325 millis. select * from t_types LIMIT ?   
 
 2020-11-18 12:58:44,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50017} open  
 
 2020-11-18 12:58:44,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50017} Header: [id, name]  
 
 2020-11-18 12:58:44,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50017} Result: [8, 方法论]  
 
 2020-11-18 12:58:44,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50017} Result: [9, 理论类]  
 
 2020-11-18 12:58:44,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50017} Result: [21, 错误日记]  
 
 2020-11-18 12:58:44,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50017} Result: [23, 开发日记]  
 
 2020-11-18 12:58:44,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50017} Result: [24, 实践论]  
 
 2020-11-18 12:58:44,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50017} closed  
 
 2020-11-18 12:58:44,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-18 12:58:44,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:59:50,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-406} connected  
 
 2020-11-18 12:59:50,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-407} connected  
 
 2020-11-18 12:59:50,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-408} connected  
 
 2020-11-18 12:59:50,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-409} connected  
 
 2020-11-18 12:59:50,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-410} connected  
 
 2020-11-18 12:59:50,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:59:50,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 12:59:50,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 12:59:50,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 12:59:50,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 22.8184 millis. select * from t_types  
 
 2020-11-18 12:59:50,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 12:59:50,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 12:59:50,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 12:59:50,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 12:59:50,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 12:59:50,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 12:59:50,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 12:59:50,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 12:59:50,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 12:59:50,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 12:59:50,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:59:50,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:59:50,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 12:59:50,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 12:59:50,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 12:59:50,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.5958 millis. select * from t_tages  
 
 2020-11-18 12:59:50,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 12:59:50,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 12:59:50,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 12:59:50,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 12:59:50,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 12:59:50,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 12:59:50,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 12:59:50,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 12:59:50,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 12:59:50,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 12:59:50,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:59:56,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:59:56,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 12:59:56,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 12:59:56,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 12:59:56,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.1474 millis. select * from t_user where username=?  
 
 2020-11-18 12:59:56,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 12:59:56,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 12:59:56,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 12:59:56,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 12:59:56,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 12:59:56,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:59:57,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:59:57,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:59:57,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:59:57,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_types  
 
 2020-11-18 12:59:57,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-18 12:59:57,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-18 12:59:57,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.8819 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 12:59:57,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 12:59:57,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 12:59:57,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [6]  
 
 2020-11-18 12:59:57,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 12:59:57,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 12:59:57,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_types LIMIT ?   
 
 2020-11-18 12:59:57,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [5]  
 
 2020-11-18 12:59:57,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 12:59:57,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2332 millis. select * from t_types LIMIT ?   
 
 2020-11-18 12:59:57,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 12:59:57,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, name]  
 
 2020-11-18 12:59:57,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [8, 方法论]  
 
 2020-11-18 12:59:57,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [9, 理论类]  
 
 2020-11-18 12:59:57,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [21, 错误日记]  
 
 2020-11-18 12:59:57,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [23, 开发日记]  
 
 2020-11-18 12:59:57,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [24, 实践论]  
 
 2020-11-18 12:59:57,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 12:59:57,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 12:59:57,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 12:59:58,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 12:59:58,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_types where id=?  
 
 2020-11-18 12:59:58,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [9]  
 
 2020-11-18 12:59:58,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 12:59:58,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.2676 millis. select * from t_types where id=?  
 
 2020-11-18 12:59:58,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 12:59:58,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, name]  
 
 2020-11-18 12:59:58,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, 理论类]  
 
 2020-11-18 12:59:58,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 12:59:58,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 12:59:58,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:01:37,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-411} connected  
 
 2020-11-18 13:01:37,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-412} connected  
 
 2020-11-18 13:01:37,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-413} connected  
 
 2020-11-18 13:01:37,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-414} connected  
 
 2020-11-18 13:01:37,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-415} connected  
 
 2020-11-18 13:01:37,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:01:38,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 13:01:38,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 13:01:38,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 13:01:38,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.8885 millis. select * from t_types  
 
 2020-11-18 13:01:38,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 13:01:38,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 13:01:38,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 13:01:38,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 13:01:38,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 13:01:38,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 13:01:38,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 13:01:38,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 13:01:38,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 13:01:38,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 13:01:38,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:01:38,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:01:38,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 13:01:38,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 13:01:38,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 13:01:38,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4901 millis. select * from t_tages  
 
 2020-11-18 13:01:38,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 13:01:38,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 13:01:38,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 13:01:38,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 13:01:38,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 13:01:38,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 13:01:38,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 13:01:38,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 13:01:38,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 13:01:38,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 13:01:38,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:01:38,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:01:38,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 13:01:38,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 13:01:38,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 5.8699 millis. select * from t_types  
 
 2020-11-18 13:01:38,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} open  
 
 2020-11-18 13:01:38,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Header: [id, name]  
 
 2020-11-18 13:01:38,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [8, 方法论]  
 
 2020-11-18 13:01:38,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [9, 理论类]  
 
 2020-11-18 13:01:38,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [21, 错误日记]  
 
 2020-11-18 13:01:38,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [23, 开发日记]  
 
 2020-11-18 13:01:38,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [24, 实践论]  
 
 2020-11-18 13:01:38,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [25, 想法论]  
 
 2020-11-18 13:01:38,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} closed  
 
 2020-11-18 13:01:38,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 13:01:38,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:01:38,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:01:38,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 13:01:38,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 13:01:38,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9385 millis. select * from t_tages  
 
 2020-11-18 13:01:38,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} open  
 
 2020-11-18 13:01:38,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Header: [id, tage]  
 
 2020-11-18 13:01:38,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [1, 学习日记]  
 
 2020-11-18 13:01:38,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-18 13:01:38,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-18 13:01:38,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-18 13:01:38,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [5, 开发日记]  
 
 2020-11-18 13:01:38,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [8, 开发手册]  
 
 2020-11-18 13:01:38,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} closed  
 
 2020-11-18 13:01:38,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 13:01:38,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:01:45,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:01:45,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 13:01:45,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 13:01:45,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 13:01:45,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.2183 millis. select * from t_user where username=?  
 
 2020-11-18 13:01:45,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} open  
 
 2020-11-18 13:01:45,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 13:01:45,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 13:01:45,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50004} closed  
 
 2020-11-18 13:01:45,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 13:01:45,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:01:49,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:01:49,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:01:49,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:01:49,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_types  
 
 2020-11-18 13:01:49,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-18 13:01:49,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-18 13:01:49,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2013 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 13:01:49,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} open  
 
 2020-11-18 13:01:49,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} Header: [count(0)]  
 
 2020-11-18 13:01:49,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} Result: [6]  
 
 2020-11-18 13:01:49,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50005} closed  
 
 2020-11-18 13:01:49,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 13:01:49,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_types LIMIT ?   
 
 2020-11-18 13:01:49,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [5]  
 
 2020-11-18 13:01:49,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 13:01:49,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.093 millis. select * from t_types LIMIT ?   
 
 2020-11-18 13:01:49,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} open  
 
 2020-11-18 13:01:49,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Header: [id, name]  
 
 2020-11-18 13:01:49,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [8, 方法论]  
 
 2020-11-18 13:01:49,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [9, 理论类]  
 
 2020-11-18 13:01:49,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [21, 错误日记]  
 
 2020-11-18 13:01:49,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [23, 开发日记]  
 
 2020-11-18 13:01:49,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [24, 实践论]  
 
 2020-11-18 13:01:49,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} closed  
 
 2020-11-18 13:01:49,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 13:01:49,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:01:50,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:01:50,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_types where id=?  
 
 2020-11-18 13:01:50,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [8]  
 
 2020-11-18 13:01:50,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 13:01:50,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.318 millis. select * from t_types where id=?  
 
 2020-11-18 13:01:50,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} open  
 
 2020-11-18 13:01:50,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Header: [id, name]  
 
 2020-11-18 13:01:50,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 13:01:50,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} closed  
 
 2020-11-18 13:01:50,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 13:01:50,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:31,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-416} connected  
 
 2020-11-18 13:02:31,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-417} connected  
 
 2020-11-18 13:02:31,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-418} connected  
 
 2020-11-18 13:02:31,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-419} connected  
 
 2020-11-18 13:02:31,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-420} connected  
 
 2020-11-18 13:02:31,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:31,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 13:02:31,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 13:02:31,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 13:02:31,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 21.7241 millis. select * from t_types  
 
 2020-11-18 13:02:31,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 13:02:31,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 13:02:31,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 13:02:31,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 13:02:31,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 13:02:31,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 13:02:31,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 13:02:31,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 13:02:31,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 13:02:31,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 13:02:31,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:31,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:31,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 13:02:31,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 13:02:31,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 13:02:31,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1941 millis. select * from t_tages  
 
 2020-11-18 13:02:31,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 13:02:31,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 13:02:31,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 13:02:31,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 13:02:31,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 13:02:31,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 13:02:31,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 13:02:31,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 13:02:31,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 13:02:31,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 13:02:31,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:43,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:43,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 13:02:43,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 13:02:43,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 13:02:43,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.6872 millis. select * from t_user where username=?  
 
 2020-11-18 13:02:43,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 13:02:43,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 13:02:43,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 13:02:43,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 13:02:43,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 13:02:43,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:52,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:52,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:52,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:52,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_types  
 
 2020-11-18 13:02:52,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-18 13:02:52,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-18 13:02:52,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.3957 millis. SELECT count(0) FROM t_types  
 
 2020-11-18 13:02:52,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 13:02:52,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 13:02:52,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [6]  
 
 2020-11-18 13:02:52,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 13:02:52,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 13:02:52,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_types LIMIT ?   
 
 2020-11-18 13:02:52,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [5]  
 
 2020-11-18 13:02:52,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 13:02:52,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9282 millis. select * from t_types LIMIT ?   
 
 2020-11-18 13:02:52,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 13:02:52,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, name]  
 
 2020-11-18 13:02:52,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [8, 方法论]  
 
 2020-11-18 13:02:52,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [9, 理论类]  
 
 2020-11-18 13:02:52,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [21, 错误日记]  
 
 2020-11-18 13:02:52,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [23, 开发日记]  
 
 2020-11-18 13:02:52,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [24, 实践论]  
 
 2020-11-18 13:02:52,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 13:02:52,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 13:02:52,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:53,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:53,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_types where id=?  
 
 2020-11-18 13:02:53,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [8]  
 
 2020-11-18 13:02:53,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 13:02:53,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.3712 millis. select * from t_types where id=?  
 
 2020-11-18 13:02:53,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 13:02:53,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, name]  
 
 2020-11-18 13:02:53,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [8, 方法论]  
 
 2020-11-18 13:02:53,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 13:02:53,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 13:02:53,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:55,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:55,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 13:02:55,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [1]  
 
 2020-11-18 13:02:55,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-18 13:02:55,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.9531 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 13:02:55,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-18 13:02:55,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [count(0)]  
 
 2020-11-18 13:02:55,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [3]  
 
 2020-11-18 13:02:55,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-18 13:02:55,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-18 13:02:55,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 13:02:55,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [1, 5]  
 
 2020-11-18 13:02:55,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-18 13:02:55,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.2432 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 13:02:55,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} open  
 
 2020-11-18 13:02:55,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 13:02:55,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 13:02:55,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 13:02:55,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 13:02:55,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} closed  
 
 2020-11-18 13:02:55,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-18 13:02:55,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:56,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:56,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 13:02:56,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [1]  
 
 2020-11-18 13:02:56,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 13:02:56,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 7.3715 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 13:02:56,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} open  
 
 2020-11-18 13:02:56,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 13:02:56,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 13:02:56,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 13:02:56,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} closed  
 
 2020-11-18 13:02:56,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-18 13:02:56,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:56,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:56,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 13:02:56,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 13:02:56,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4042 millis. select * from t_tages  
 
 2020-11-18 13:02:56,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} open  
 
 2020-11-18 13:02:56,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Header: [id, tage]  
 
 2020-11-18 13:02:56,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [1, 学习日记]  
 
 2020-11-18 13:02:56,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [2, 错误笔记]  
 
 2020-11-18 13:02:56,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [3, 数据库笔记]  
 
 2020-11-18 13:02:56,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [4, 程序运行日记]  
 
 2020-11-18 13:02:56,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [5, 开发日记]  
 
 2020-11-18 13:02:56,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [8, 开发手册]  
 
 2020-11-18 13:02:56,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} closed  
 
 2020-11-18 13:02:56,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 13:02:56,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:02:56,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:02:56,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 13:02:56,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 13:02:56,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.8682 millis. select * from t_types  
 
 2020-11-18 13:02:56,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} open  
 
 2020-11-18 13:02:56,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Header: [id, name]  
 
 2020-11-18 13:02:56,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [8, 方法论]  
 
 2020-11-18 13:02:56,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [9, 理论类]  
 
 2020-11-18 13:02:56,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [21, 错误日记]  
 
 2020-11-18 13:02:56,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [23, 开发日记]  
 
 2020-11-18 13:02:56,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [24, 实践论]  
 
 2020-11-18 13:02:56,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [25, 想法论]  
 
 2020-11-18 13:02:56,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} closed  
 
 2020-11-18 13:02:56,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 13:02:56,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:03:38,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:03:38,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 13:03:38,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 13:03:38,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7425 millis. select * from t_tages  
 
 2020-11-18 13:03:38,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} open  
 
 2020-11-18 13:03:38,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Header: [id, tage]  
 
 2020-11-18 13:03:38,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [1, 学习日记]  
 
 2020-11-18 13:03:38,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [2, 错误笔记]  
 
 2020-11-18 13:03:38,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [3, 数据库笔记]  
 
 2020-11-18 13:03:38,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [4, 程序运行日记]  
 
 2020-11-18 13:03:38,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [5, 开发日记]  
 
 2020-11-18 13:03:38,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [8, 开发手册]  
 
 2020-11-18 13:03:38,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} closed  
 
 2020-11-18 13:03:38,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 13:03:38,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:03:38,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:03:38,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 13:03:38,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 13:03:38,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.5247 millis. select * from t_types  
 
 2020-11-18 13:03:38,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} open  
 
 2020-11-18 13:03:38,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Header: [id, name]  
 
 2020-11-18 13:03:38,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [8, 方法论]  
 
 2020-11-18 13:03:38,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [9, 理论类]  
 
 2020-11-18 13:03:38,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [21, 错误日记]  
 
 2020-11-18 13:03:38,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [23, 开发日记]  
 
 2020-11-18 13:03:38,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [24, 实践论]  
 
 2020-11-18 13:03:38,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [25, 想法论]  
 
 2020-11-18 13:03:38,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} closed  
 
 2020-11-18 13:03:38,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 13:03:38,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:04:31,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-421} connected  
 
 2020-11-18 13:04:31,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-422} connected  
 
 2020-11-18 13:04:31,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-423} connected  
 
 2020-11-18 13:04:31,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-424} connected  
 
 2020-11-18 13:04:31,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-425} connected  
 
 2020-11-18 13:04:31,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:04:31,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 13:04:31,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 13:04:31,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 13:04:31,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.0128 millis. select * from t_types  
 
 2020-11-18 13:04:31,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 13:04:31,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 13:04:31,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 13:04:31,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 13:04:31,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 13:04:31,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 13:04:31,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 13:04:31,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 13:04:31,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 13:04:31,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 13:04:31,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:04:31,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:04:31,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 13:04:31,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 13:04:31,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 13:04:31,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.7701 millis. select * from t_tages  
 
 2020-11-18 13:04:31,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 13:04:31,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 13:04:31,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 13:04:31,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 13:04:31,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 13:04:31,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 13:04:31,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 13:04:31,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 13:04:31,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 13:04:31,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 13:04:31,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:04:38,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:04:39,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_user where username=?  
 
 2020-11-18 13:04:39,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [zhangsan]  
 
 2020-11-18 13:04:39,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-18 13:04:39,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.1458 millis. select * from t_user where username=?  
 
 2020-11-18 13:04:39,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 13:04:39,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 13:04:39,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 13:04:39,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 13:04:39,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 13:04:39,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:04:43,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:04:43,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:04:43,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:04:43,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 13:04:43,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 13:04:43,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 13:04:43,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.0357 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-18 13:04:43,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 13:04:43,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-18 13:04:43,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [3]  
 
 2020-11-18 13:04:43,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 13:04:43,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 13:04:43,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 13:04:43,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-18 13:04:43,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-18 13:04:43,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.8001 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-18 13:04:43,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 13:04:43,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-18 13:04:43,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-18 13:04:43,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-18 13:04:43,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-18 13:04:43,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 13:04:43,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 13:04:43,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:04:45,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:04:45,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 13:04:45,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [1]  
 
 2020-11-18 13:04:45,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-18 13:04:45,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 11.005 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 13:04:45,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 13:04:45,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, id, tage, id, name]  
 
 2020-11-18 13:04:45,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 13:04:45,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 13:04:45,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 13:04:45,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 13:04:45,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:04:45,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:04:45,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 13:04:45,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 13:04:45,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8268 millis. select * from t_tages  
 
 2020-11-18 13:04:45,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-18 13:04:45,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-18 13:04:45,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 13:04:45,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 13:04:45,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 13:04:45,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 13:04:45,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 13:04:45,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 13:04:45,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-18 13:04:45,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 13:04:45,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 13:04:45,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 13:04:45,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 13:04:45,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 13:04:45,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.792 millis. select * from t_types  
 
 2020-11-18 13:04:45,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-18 13:04:45,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-18 13:04:45,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-18 13:04:45,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-18 13:04:45,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-18 13:04:45,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-18 13:04:45,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-18 13:04:45,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-18 13:04:45,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-18 13:04:45,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 13:04:45,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:04:12,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-426} connected  
 
 2020-11-18 19:04:12,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-427} connected  
 
 2020-11-18 19:04:12,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-428} connected  
 
 2020-11-18 19:04:12,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-429} connected  
 
 2020-11-18 19:04:12,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-430} connected  
 
 2020-11-18 19:04:12,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:04:13,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:04:13,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:04:13,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:04:13,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.0365 millis. select * from t_types  
 
 2020-11-18 19:04:13,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:04:13,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:04:13,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:04:13,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:04:13,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:04:13,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:04:13,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:04:13,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:04:13,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:04:13,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:04:13,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:04:13,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:04:13,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:04:13,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:04:13,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:04:13,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8776 millis. select * from t_tages  
 
 2020-11-18 19:04:13,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:04:13,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:04:13,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:04:13,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:04:13,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:04:13,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:04:13,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:04:13,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:04:13,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:04:13,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:04:13,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:04:13,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:04:13,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:04:13,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:04:13,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:04:13,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:04:13,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:04:14,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:04:14,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:04:14,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:04:14,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.9217 millis. select * from t_types  
 
 2020-11-18 19:04:14,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} open  
 
 2020-11-18 19:04:14,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Header: [id, name]  
 
 2020-11-18 19:04:14,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [8, 方法论]  
 
 2020-11-18 19:04:14,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [9, 理论类]  
 
 2020-11-18 19:04:14,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [21, 错误日记]  
 
 2020-11-18 19:04:14,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [23, 开发日记]  
 
 2020-11-18 19:04:14,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [24, 实践论]  
 
 2020-11-18 19:04:14,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} Result: [25, 想法论]  
 
 2020-11-18 19:04:14,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50002} closed  
 
 2020-11-18 19:04:14,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:04:14,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:04:14,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:04:14,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:04:14,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:04:14,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.5813 millis. select * from t_tages  
 
 2020-11-18 19:04:14,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} open  
 
 2020-11-18 19:04:14,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Header: [id, tage]  
 
 2020-11-18 19:04:14,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [1, 学习日记]  
 
 2020-11-18 19:04:14,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-18 19:04:14,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-18 19:04:14,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-18 19:04:14,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [5, 开发日记]  
 
 2020-11-18 19:04:14,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} Result: [8, 开发手册]  
 
 2020-11-18 19:04:14,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50003} closed  
 
 2020-11-18 19:04:14,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:04:14,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:04:14,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:04:14,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:08:27,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-435} connected  
 
 2020-11-18 19:08:27,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-436} connected  
 
 2020-11-18 19:08:27,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-437} connected  
 
 2020-11-18 19:08:27,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-438} connected  
 
 2020-11-18 19:08:27,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-439} connected  
 
 2020-11-18 19:08:27,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:08:27,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:08:27,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:08:27,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:08:27,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.1492 millis. select * from t_types  
 
 2020-11-18 19:08:27,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:08:27,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:08:27,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:08:27,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:08:27,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:08:27,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:08:27,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:08:27,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:08:27,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:08:27,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:08:27,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:08:27,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:08:27,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:08:27,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:08:27,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:08:27,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1748 millis. select * from t_tages  
 
 2020-11-18 19:08:27,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:08:27,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:08:27,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:08:27,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:08:27,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:08:27,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:08:27,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:08:27,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:08:27,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:08:27,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:08:27,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:08:27,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:08:27,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:08:27,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:08:28,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:08:28,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:08:28,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:08:28,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7453 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:08:28,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:08:28,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:08:28,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:08:28,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:08:28,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:08:28,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:08:28,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 19:08:28,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:08:28,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.9068 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:08:28,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:08:28,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, id, publish, recommend]  
 
 2020-11-18 19:08:28,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, 1, true, true]  
 
 2020-11-18 19:08:28,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:08:28,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:08:28,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:09:54,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-440} connected  
 
 2020-11-18 19:09:54,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-441} connected  
 
 2020-11-18 19:09:54,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-442} connected  
 
 2020-11-18 19:09:54,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-443} connected  
 
 2020-11-18 19:09:54,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-444} connected  
 
 2020-11-18 19:09:54,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:09:54,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:09:54,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:09:54,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:09:54,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 19.4234 millis. select * from t_types  
 
 2020-11-18 19:09:54,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:09:54,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:09:54,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:09:54,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:09:54,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:09:54,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:09:54,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:09:54,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:09:54,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:09:54,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:09:54,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:09:54,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:09:54,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:09:54,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:09:54,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:09:54,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9149 millis. select * from t_tages  
 
 2020-11-18 19:09:54,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:09:54,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:09:54,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:09:54,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:09:54,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:09:54,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:09:54,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:09:54,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:09:54,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:09:54,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:09:54,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:09:54,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:09:55,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:09:55,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:09:55,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:09:55,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:09:55,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:09:55,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2791 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:09:55,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:09:55,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:09:55,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:09:55,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:09:55,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:09:55,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb,firstpicture, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:09:55,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 19:09:55,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:09:55,136 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20003} execute error. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb,firstpicture, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 java.sql.SQLSyntaxErrorException: Unknown column 'tb' in 'field list'
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:63)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:136)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy110.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy80.getAll(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy81.getAll(Unknown Source)
	at com.example.blog.service.BolgServiceImpl.getAllFinally(BolgServiceImpl.java:108)
	at com.example.blog.controller.IndexController.index(IndexController.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-18 19:09:55,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:09:55,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} closed  
 
 2020-11-18 19:09:55,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:09:55,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:09:55,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:10:15,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-445} connected  
 
 2020-11-18 19:10:15,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-446} connected  
 
 2020-11-18 19:10:15,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-447} connected  
 
 2020-11-18 19:10:15,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-448} connected  
 
 2020-11-18 19:10:15,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-449} connected  
 
 2020-11-18 19:10:15,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:10:16,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:10:16,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:10:16,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:10:16,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.1773 millis. select * from t_types  
 
 2020-11-18 19:10:16,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:10:16,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:10:16,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:10:16,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:10:16,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:10:16,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:10:16,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:10:16,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:10:16,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:10:16,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:10:16,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:10:16,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:10:16,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:10:16,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:10:16,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:10:16,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.5928 millis. select * from t_tages  
 
 2020-11-18 19:10:16,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:10:16,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:10:16,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:10:16,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:10:16,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:10:16,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:10:16,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:10:16,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:10:16,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:10:16,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:10:16,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:10:16,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:10:16,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:10:16,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:10:16,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:10:16,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:10:16,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:10:16,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3285 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:10:16,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:10:16,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:10:16,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:10:16,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:10:16,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:10:16,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:10:16,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 19:10:16,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:10:16,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.0014 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:10:16,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:10:16,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, id, publish, recommend]  
 
 2020-11-18 19:10:16,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 1, true, true]  
 
 2020-11-18 19:10:16,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:10:16,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:10:16,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:19:53,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-451} connected  
 
 2020-11-18 19:19:53,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-452} connected  
 
 2020-11-18 19:19:53,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-453} connected  
 
 2020-11-18 19:19:53,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-454} connected  
 
 2020-11-18 19:19:53,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-455} connected  
 
 2020-11-18 19:19:53,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:19:54,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:19:54,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:19:54,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:19:54,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 18.8219 millis. select * from t_types  
 
 2020-11-18 19:19:54,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:19:54,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:19:54,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:19:54,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:19:54,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:19:54,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:19:54,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:19:54,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:19:54,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:19:54,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:19:54,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:19:54,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:19:54,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:19:54,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:19:54,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:19:54,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9777 millis. select * from t_tages  
 
 2020-11-18 19:19:54,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:19:54,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:19:54,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:19:54,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:19:54,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:19:54,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:19:54,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:19:54,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:19:54,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:19:54,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:19:54,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:19:54,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:19:54,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:19:54,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:19:54,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:19:54,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:19:54,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:19:54,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.6888 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:19:54,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:19:54,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:19:54,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:19:54,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:19:54,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:19:54,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:19:54,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 19:19:54,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:19:54,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.1011 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:19:54,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:19:54,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, id, publish, recommend]  
 
 2020-11-18 19:19:54,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 1, true, true]  
 
 2020-11-18 19:19:54,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:19:54,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:19:54,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:20:41,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-456} connected  
 
 2020-11-18 19:20:41,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-457} connected  
 
 2020-11-18 19:20:41,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-458} connected  
 
 2020-11-18 19:20:41,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-459} connected  
 
 2020-11-18 19:20:41,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-460} connected  
 
 2020-11-18 19:20:41,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:20:42,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:20:42,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:20:42,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:20:42,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.9853 millis. select * from t_types  
 
 2020-11-18 19:20:42,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:20:42,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:20:42,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:20:42,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:20:42,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:20:42,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:20:42,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:20:42,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:20:42,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:20:42,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:20:42,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:20:42,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:20:42,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:20:42,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:20:42,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:20:42,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9634 millis. select * from t_tages  
 
 2020-11-18 19:20:42,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:20:42,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:20:42,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:20:42,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:20:42,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:20:42,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:20:42,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:20:42,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:20:42,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:20:42,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:20:42,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:20:42,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:20:42,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:20:42,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:20:42,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:20:42,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:20:42,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:20:42,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.4272 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:20:42,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:20:42,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:20:42,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:20:42,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:20:42,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:20:42,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:20:42,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 19:20:42,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:20:42,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.0345 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:20:42,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:20:42,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, id, publish, recommend]  
 
 2020-11-18 19:20:42,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 1, true, true]  
 
 2020-11-18 19:20:42,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:20:42,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:20:42,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:23:49,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-462} connected  
 
 2020-11-18 19:23:49,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-463} connected  
 
 2020-11-18 19:23:49,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-464} connected  
 
 2020-11-18 19:23:49,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-465} connected  
 
 2020-11-18 19:23:49,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-466} connected  
 
 2020-11-18 19:23:49,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:23:49,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:23:49,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:23:49,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:23:49,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.1771 millis. select * from t_types  
 
 2020-11-18 19:23:49,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:23:49,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:23:49,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:23:49,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:23:49,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:23:49,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:23:49,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:23:49,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:23:49,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:23:49,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:23:49,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:23:49,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:23:49,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:23:49,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:23:49,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:23:49,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.7151 millis. select * from t_tages  
 
 2020-11-18 19:23:49,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:23:49,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:23:49,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:23:49,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:23:49,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:23:49,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:23:49,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:23:49,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:23:49,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:23:49,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:23:49,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:23:49,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:23:49,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:23:49,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:23:49,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:23:49,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:23:49,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:23:49,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.5469 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:23:49,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:23:49,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:23:49,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:23:49,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:23:49,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:23:49,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:23:49,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 19:23:49,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:23:49,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.7005 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:23:49,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:23:49,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 19:23:49,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 19:23:49,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:23:49,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:23:49,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:30:16,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-467} connected  
 
 2020-11-18 19:30:16,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-468} connected  
 
 2020-11-18 19:30:16,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-469} connected  
 
 2020-11-18 19:30:16,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-470} connected  
 
 2020-11-18 19:30:16,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-471} connected  
 
 2020-11-18 19:30:16,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:30:17,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:30:17,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:30:17,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:30:17,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 23.2631 millis. select * from t_types  
 
 2020-11-18 19:30:17,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:30:17,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:30:17,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:30:17,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:30:17,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:30:17,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:30:17,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:30:17,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:30:17,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:30:17,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:30:17,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:30:17,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:30:17,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:30:17,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:30:17,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:30:17,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3354 millis. select * from t_tages  
 
 2020-11-18 19:30:17,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:30:17,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:30:17,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:30:17,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:30:17,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:30:17,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:30:17,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:30:17,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:30:17,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:30:17,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:30:17,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:30:17,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:30:17,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:30:17,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:30:17,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:30:17,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:30:17,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:30:17,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.6294 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:30:17,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:30:17,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:30:17,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:30:17,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:30:17,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:30:17,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:30:17,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-18 19:30:17,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:30:17,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 12.1994 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:30:17,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:30:17,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 19:30:17,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 19:30:17,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:30:17,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:30:17,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:32:44,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-472} connected  
 
 2020-11-18 19:32:44,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-473} connected  
 
 2020-11-18 19:32:44,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-474} connected  
 
 2020-11-18 19:32:44,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-475} connected  
 
 2020-11-18 19:32:44,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-476} connected  
 
 2020-11-18 19:32:44,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:32:45,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:32:45,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:32:45,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:32:45,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 12.7694 millis. select * from t_types  
 
 2020-11-18 19:32:45,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:32:45,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:32:45,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:32:45,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:32:45,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:32:45,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:32:45,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:32:45,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:32:45,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:32:45,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:32:45,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:32:45,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:32:45,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:32:45,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:32:45,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:32:45,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.3895 millis. select * from t_tages  
 
 2020-11-18 19:32:45,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:32:45,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:32:45,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:32:45,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:32:45,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:32:45,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:32:45,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:32:45,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:32:45,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:32:45,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:32:45,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:32:45,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:32:45,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:32:45,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:32:45,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:32:45,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:32:45,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:32:45,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7027 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:32:45,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:32:45,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:32:45,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:32:45,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:32:45,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:32:45,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:32:45,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 19:32:45,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:32:45,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.6163 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:32:45,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:32:45,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 19:32:45,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 19:32:45,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 19:32:45,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 19:32:45,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:32:45,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:32:45,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:37:41,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-477} connected  
 
 2020-11-18 19:37:41,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-478} connected  
 
 2020-11-18 19:37:41,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-479} connected  
 
 2020-11-18 19:37:41,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-480} connected  
 
 2020-11-18 19:37:41,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-481} connected  
 
 2020-11-18 19:37:41,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:37:41,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:37:41,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:37:41,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:37:41,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.2883 millis. select * from t_types  
 
 2020-11-18 19:37:41,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:37:41,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:37:41,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:37:41,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:37:41,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:37:41,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:37:41,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:37:41,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:37:41,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:37:41,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:37:41,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:37:41,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:37:41,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:37:41,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:37:41,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:37:41,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.798 millis. select * from t_tages  
 
 2020-11-18 19:37:41,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:37:41,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:37:41,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:37:41,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:37:41,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:37:41,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:37:41,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:37:41,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:37:41,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:37:41,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:37:41,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:37:41,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:37:41,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:37:41,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:37:41,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:37:41,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:37:41,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:37:41,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.6251 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:37:41,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:37:41,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:37:41,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:37:41,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:37:41,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:37:41,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:37:41,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 19:37:41,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:37:41,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.6893 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:37:41,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:37:41,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 19:37:41,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 19:37:41,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 19:37:41,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 19:37:41,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:37:41,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:37:41,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:39:52,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-482} connected  
 
 2020-11-18 19:39:52,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-483} connected  
 
 2020-11-18 19:39:52,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-484} connected  
 
 2020-11-18 19:39:52,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-485} connected  
 
 2020-11-18 19:39:52,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-486} connected  
 
 2020-11-18 19:39:52,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:39:52,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:39:52,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:39:52,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:39:52,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 21.2583 millis. select * from t_types  
 
 2020-11-18 19:39:52,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:39:52,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:39:52,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:39:52,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:39:52,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:39:52,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:39:52,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:39:52,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:39:52,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:39:52,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:39:52,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:39:52,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:39:52,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:39:52,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:39:52,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:39:52,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2953 millis. select * from t_tages  
 
 2020-11-18 19:39:52,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:39:52,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:39:52,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:39:52,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:39:52,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:39:52,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:39:52,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:39:52,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:39:52,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:39:52,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:39:52,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:39:52,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:39:52,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:39:52,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:39:52,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:39:52,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:39:52,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:39:52,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.5007 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:39:52,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:39:52,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:39:52,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:39:52,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:39:52,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:39:52,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:39:52,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 19:39:52,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:39:52,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.7222 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:39:52,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:39:52,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 19:39:52,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 19:39:52,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 19:39:52,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 19:39:52,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:39:52,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:39:52,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:41:07,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-487} connected  
 
 2020-11-18 19:41:07,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-488} connected  
 
 2020-11-18 19:41:07,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-489} connected  
 
 2020-11-18 19:41:07,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-490} connected  
 
 2020-11-18 19:41:07,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-491} connected  
 
 2020-11-18 19:41:07,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:41:07,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:41:07,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:41:07,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:41:07,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 12.8615 millis. select * from t_types  
 
 2020-11-18 19:41:07,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:41:07,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:41:07,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:41:07,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:41:07,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:41:07,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:41:07,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:41:07,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:41:07,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:41:07,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:41:07,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:41:07,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:41:07,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:41:07,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:41:07,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:41:07,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8486 millis. select * from t_tages  
 
 2020-11-18 19:41:07,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:41:07,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:41:07,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:41:07,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:41:07,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:41:07,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:41:07,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:41:07,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:41:07,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:41:07,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:41:07,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:41:07,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:41:07,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:41:07,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:41:07,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:41:07,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:41:07,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:41:07,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.5557 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:41:07,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:41:07,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:41:07,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:41:07,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:41:07,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:41:07,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:41:07,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 19:41:07,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:41:07,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.5188 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:41:07,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:41:07,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 19:41:07,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 19:41:07,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 19:41:07,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 19:41:07,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:41:07,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:41:07,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:43:30,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-492} connected  
 
 2020-11-18 19:43:30,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-493} connected  
 
 2020-11-18 19:43:30,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-494} connected  
 
 2020-11-18 19:43:30,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-495} connected  
 
 2020-11-18 19:43:30,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-496} connected  
 
 2020-11-18 19:43:30,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:43:30,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:43:30,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:43:30,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:43:30,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.4847 millis. select * from t_types  
 
 2020-11-18 19:43:30,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:43:30,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:43:30,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:43:30,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:43:30,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:43:30,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:43:30,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:43:30,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:43:30,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:43:30,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:43:30,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:43:30,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:43:30,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:43:30,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:43:30,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:43:30,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.6624 millis. select * from t_tages  
 
 2020-11-18 19:43:30,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:43:30,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:43:30,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:43:30,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:43:30,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:43:30,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:43:30,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:43:30,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:43:30,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:43:30,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:43:30,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:43:30,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:43:30,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:43:30,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:43:30,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:43:30,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:43:30,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:43:30,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8142 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:43:30,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:43:30,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:43:30,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:43:30,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:43:30,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:43:30,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:43:30,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 19:43:30,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:43:30,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.0952 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:43:30,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:43:30,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 19:43:30,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 19:43:30,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 19:43:30,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 19:43:30,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:43:30,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:43:30,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:44:44,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-497} connected  
 
 2020-11-18 19:44:44,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-498} connected  
 
 2020-11-18 19:44:44,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-499} connected  
 
 2020-11-18 19:44:44,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-500} connected  
 
 2020-11-18 19:44:44,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-501} connected  
 
 2020-11-18 19:44:44,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:44:45,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 19:44:45,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 19:44:45,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 19:44:45,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 24.1356 millis. select * from t_types  
 
 2020-11-18 19:44:45,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 19:44:45,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 19:44:45,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 19:44:45,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 19:44:45,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 19:44:45,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 19:44:45,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 19:44:45,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 19:44:45,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 19:44:45,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 19:44:45,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:44:45,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:44:45,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 19:44:45,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 19:44:45,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 19:44:45,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.1546 millis. select * from t_tages  
 
 2020-11-18 19:44:45,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 19:44:45,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 19:44:45,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 19:44:45,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 19:44:45,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 19:44:45,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 19:44:45,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 19:44:45,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 19:44:45,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 19:44:45,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 19:44:45,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:44:45,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:44:45,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 19:44:45,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 19:44:45,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:44:45,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 19:44:45,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 19:44:45,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.3684 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 19:44:45,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 19:44:45,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 19:44:45,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 19:44:45,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 19:44:45,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 19:44:45,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:44:45,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 19:44:45,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 19:44:45,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 15.439 millis. select us.username uname,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 19:44:45,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 19:44:45,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 19:44:45,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 19:44:45,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 19:44:45,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 19:44:45,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 19:44:45,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 19:44:45,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:23:21,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-505} connected  
 
 2020-11-18 20:23:21,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-506} connected  
 
 2020-11-18 20:23:21,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-507} connected  
 
 2020-11-18 20:23:21,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-508} connected  
 
 2020-11-18 20:23:21,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-509} connected  
 
 2020-11-18 20:23:21,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:23:21,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 20:23:21,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 20:23:21,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 20:23:21,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 21.7741 millis. select * from t_types  
 
 2020-11-18 20:23:21,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 20:23:21,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 20:23:22,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 20:23:22,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 20:23:22,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 20:23:22,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 20:23:22,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 20:23:22,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 20:23:22,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 20:23:22,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 20:23:22,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:23:22,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:23:22,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 20:23:22,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 20:23:22,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 20:23:22,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.5636 millis. select * from t_tages  
 
 2020-11-18 20:23:22,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 20:23:22,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 20:23:22,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 20:23:22,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 20:23:22,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 20:23:22,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 20:23:22,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 20:23:22,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 20:23:22,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 20:23:22,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 20:23:22,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:23:22,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:23:22,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:23:22,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:23:22,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:23:22,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 20:23:22,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 20:23:22,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.6162 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:23:22,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 20:23:22,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 20:23:22,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 20:23:22,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 20:23:22,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 20:23:22,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,us.avator avgtor , tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:23:22,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 20:23:22,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 20:23:22,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.7293 millis. select us.username uname,us.avator avgtor , tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:23:22,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 20:23:22,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:23:22,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:23:22,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 20:23:22,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 20:23:22,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 20:23:22,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 20:23:22,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:23:27,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:23:27,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 20:23:27,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1]  
 
 2020-11-18 20:23:27,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 20:23:27,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 10.477 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-18 20:23:27,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 20:23:27,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-18 20:23:27,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 原创, 1, 学习日记, 8, 方法论]  
 
 2020-11-18 20:23:27,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, Java笔记, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 原创, 2, 错误笔记, 8, 方法论]  
 
 2020-11-18 20:23:27,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 20:23:27,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 20:23:27,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:34:53,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-510} connected  
 
 2020-11-18 20:34:53,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-511} connected  
 
 2020-11-18 20:34:53,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-512} connected  
 
 2020-11-18 20:34:53,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-513} connected  
 
 2020-11-18 20:34:53,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-514} connected  
 
 2020-11-18 20:34:53,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:34:54,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 20:34:54,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 20:34:54,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 20:34:54,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 24.9758 millis. select * from t_types  
 
 2020-11-18 20:34:54,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 20:34:54,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 20:34:54,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 20:34:54,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 20:34:54,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 20:34:54,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 20:34:54,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 20:34:54,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 20:34:54,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 20:34:54,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 20:34:54,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:34:54,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:34:54,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 20:34:54,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 20:34:54,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 20:34:54,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4744 millis. select * from t_tages  
 
 2020-11-18 20:34:54,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 20:34:54,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 20:34:54,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 20:34:54,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 20:34:54,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 20:34:54,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 20:34:54,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 20:34:54,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 20:34:54,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 20:34:54,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 20:34:54,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:34:54,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:34:54,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:34:54,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:34:54,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:34:54,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 20:34:54,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 20:34:54,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.0157 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:34:54,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 20:34:54,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 20:34:54,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 20:34:54,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 20:34:54,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 20:34:54,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:34:54,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 20:34:54,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 20:34:54,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.1496 millis. select us.username uname, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:34:54,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 20:34:54,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:34:54,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:34:54,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 20:34:54,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 20:34:54,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 20:34:54,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 20:34:54,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:34:58,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:34:58,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:34:58,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1]  
 
 2020-11-18 20:34:58,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 20:34:58,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 6.6543 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:34:58,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 20:34:58,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:34:58,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:34:58,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 20:34:58,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 20:34:58,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:36:13,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-515} connected  
 
 2020-11-18 20:36:13,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-516} connected  
 
 2020-11-18 20:36:13,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-517} connected  
 
 2020-11-18 20:36:13,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-518} connected  
 
 2020-11-18 20:36:13,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-519} connected  
 
 2020-11-18 20:36:13,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:36:13,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 20:36:13,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 20:36:13,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 20:36:13,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.0898 millis. select * from t_types  
 
 2020-11-18 20:36:13,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 20:36:13,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 20:36:13,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 20:36:13,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 20:36:13,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 20:36:13,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 20:36:13,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 20:36:13,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 20:36:13,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 20:36:13,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 20:36:13,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:36:13,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:36:13,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 20:36:13,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 20:36:13,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 20:36:13,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.5878 millis. select * from t_tages  
 
 2020-11-18 20:36:13,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 20:36:13,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 20:36:13,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 20:36:13,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 20:36:13,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 20:36:13,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 20:36:13,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 20:36:13,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 20:36:13,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 20:36:13,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 20:36:13,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:36:13,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:36:13,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:36:13,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:36:13,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:36:13,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 20:36:13,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 20:36:13,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.0451 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:36:13,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 20:36:13,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 20:36:13,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 20:36:13,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 20:36:13,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 20:36:13,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:36:13,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 20:36:13,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 20:36:13,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.6753 millis. select us.username uname, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:36:13,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 20:36:13,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:36:13,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:36:13,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 20:36:13,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 20:36:13,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 20:36:13,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 20:36:13,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:36:23,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:36:23,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:36:23,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1]  
 
 2020-11-18 20:36:23,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 20:36:23,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 7.3477 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:36:23,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 20:36:23,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:36:23,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:36:23,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 20:36:23,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 20:36:23,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:38:31,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-18 20:38:31,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-18 20:38:31,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-18 20:38:31,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-18 20:38:31,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-18 20:38:31,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-520} connected  
 
 2020-11-18 20:38:31,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-18 20:38:31,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. select * from t_types  
 
 2020-11-18 20:38:31,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-18 20:38:31,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-18 20:38:31,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.5639 millis. select * from t_types  
 
 2020-11-18 20:38:31,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} open  
 
 2020-11-18 20:38:31,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Header: [id, name]  
 
 2020-11-18 20:38:31,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [8, 方法论]  
 
 2020-11-18 20:38:31,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [9, 理论类]  
 
 2020-11-18 20:38:31,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [21, 错误日记]  
 
 2020-11-18 20:38:31,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [23, 开发日记]  
 
 2020-11-18 20:38:31,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [24, 实践论]  
 
 2020-11-18 20:38:31,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [25, 想法论]  
 
 2020-11-18 20:38:31,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} closed  
 
 2020-11-18 20:38:31,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-18 20:38:31,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-18 20:38:31,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-18 20:38:31,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. select * from t_tages  
 
 2020-11-18 20:38:31,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-18 20:38:31,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-18 20:38:31,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.373 millis. select * from t_tages  
 
 2020-11-18 20:38:31,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} open  
 
 2020-11-18 20:38:31,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Header: [id, tage]  
 
 2020-11-18 20:38:31,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [1, 学习日记]  
 
 2020-11-18 20:38:31,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-18 20:38:31,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-18 20:38:31,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-18 20:38:31,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [5, 开发日记]  
 
 2020-11-18 20:38:31,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [8, 开发手册]  
 
 2020-11-18 20:38:31,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} closed  
 
 2020-11-18 20:38:31,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-18 20:38:31,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-18 20:38:31,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-18 20:38:31,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:38:31,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : []  
 
 2020-11-18 20:38:31,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : []  
 
 2020-11-18 20:38:31,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.67 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:38:31,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} open  
 
 2020-11-18 20:38:31,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} Header: [count(0)]  
 
 2020-11-18 20:38:31,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} Result: [3]  
 
 2020-11-18 20:38:31,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} closed  
 
 2020-11-18 20:38:31,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-18 20:38:31,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} created. select us.username uname, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:38:31,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [4]  
 
 2020-11-18 20:38:31,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-18 20:38:31,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 5.3062 millis. select us.username uname, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:38:31,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} open  
 
 2020-11-18 20:38:31,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Header: [username, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:38:31,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:38:31,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 20:38:31,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 20:38:31,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} closed  
 
 2020-11-18 20:38:31,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-18 20:38:31,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-18 20:39:19,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-521} connected  
 
 2020-11-18 20:39:19,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-522} connected  
 
 2020-11-18 20:39:19,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-523} connected  
 
 2020-11-18 20:39:19,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-524} connected  
 
 2020-11-18 20:39:19,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-525} connected  
 
 2020-11-18 20:39:19,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:39:19,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 20:39:19,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 20:39:19,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 20:39:19,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 23.5707 millis. select * from t_types  
 
 2020-11-18 20:39:19,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 20:39:19,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 20:39:19,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 20:39:19,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 20:39:19,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 20:39:19,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 20:39:19,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 20:39:19,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 20:39:19,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 20:39:19,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 20:39:19,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:39:19,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:39:19,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 20:39:19,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 20:39:19,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 20:39:19,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2768 millis. select * from t_tages  
 
 2020-11-18 20:39:19,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 20:39:19,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 20:39:19,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 20:39:19,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 20:39:19,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 20:39:19,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 20:39:19,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 20:39:19,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 20:39:19,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 20:39:19,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 20:39:19,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:39:19,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:39:19,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:39:19,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:39:20,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:39:20,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 20:39:20,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 20:39:20,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.7111 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:39:20,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 20:39:20,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 20:39:20,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 20:39:20,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 20:39:20,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 20:39:20,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:39:20,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 20:39:20,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 20:39:20,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 9.1164 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:39:20,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 20:39:20,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:39:20,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:39:20,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 20:39:20,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 20:39:20,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 20:39:20,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 20:39:20,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:39:23,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:39:23,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:39:23,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1]  
 
 2020-11-18 20:39:23,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 20:39:23,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 6.952 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:39:23,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 20:39:23,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:39:23,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:39:23,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 20:39:23,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 20:39:23,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:40:52,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-526} connected  
 
 2020-11-18 20:40:52,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-527} connected  
 
 2020-11-18 20:40:52,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-528} connected  
 
 2020-11-18 20:40:52,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-529} connected  
 
 2020-11-18 20:40:52,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-530} connected  
 
 2020-11-18 20:40:52,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:40:52,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 20:40:52,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 20:40:52,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 20:40:52,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.5231 millis. select * from t_types  
 
 2020-11-18 20:40:52,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 20:40:52,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 20:40:52,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 20:40:52,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 20:40:52,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 20:40:52,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 20:40:52,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 20:40:52,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 20:40:52,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 20:40:52,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 20:40:52,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:40:52,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:40:52,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 20:40:52,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 20:40:52,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 20:40:52,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.442 millis. select * from t_tages  
 
 2020-11-18 20:40:52,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 20:40:52,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 20:40:52,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 20:40:52,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 20:40:52,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 20:40:52,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 20:40:52,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 20:40:52,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 20:40:52,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 20:40:52,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 20:40:52,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:40:52,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:40:52,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:40:52,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:40:52,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:40:52,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 20:40:52,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 20:40:52,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.3831 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:40:52,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 20:40:52,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 20:40:52,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 20:40:52,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 20:40:52,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 20:40:52,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:40:52,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 20:40:52,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 20:40:52,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.261 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:40:52,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 20:40:52,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:40:52,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:40:52,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 20:40:52,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 20:40:52,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 20:40:52,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 20:40:52,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:40:56,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:40:56,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:40:56,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1]  
 
 2020-11-18 20:40:56,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 20:40:56,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.8648 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:40:56,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 20:40:56,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:40:56,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:40:56,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 20:40:56,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 20:40:56,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:42:28,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-531} connected  
 
 2020-11-18 20:42:28,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-532} connected  
 
 2020-11-18 20:42:28,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-533} connected  
 
 2020-11-18 20:42:28,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-534} connected  
 
 2020-11-18 20:42:28,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-535} connected  
 
 2020-11-18 20:42:28,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:42:28,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 20:42:28,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 20:42:28,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 20:42:28,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.6468 millis. select * from t_types  
 
 2020-11-18 20:42:28,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 20:42:28,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 20:42:28,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 20:42:29,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 20:42:29,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 20:42:29,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 20:42:29,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 20:42:29,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 20:42:29,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 20:42:29,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 20:42:29,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:42:29,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:42:29,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 20:42:29,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 20:42:29,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 20:42:29,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4348 millis. select * from t_tages  
 
 2020-11-18 20:42:29,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 20:42:29,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 20:42:29,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 20:42:29,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 20:42:29,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 20:42:29,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 20:42:29,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 20:42:29,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 20:42:29,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 20:42:29,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 20:42:29,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:42:29,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:42:29,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:42:29,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:42:29,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:42:29,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 20:42:29,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 20:42:29,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.2987 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 20:42:29,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 20:42:29,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 20:42:29,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 20:42:29,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 20:42:29,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 20:42:29,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:42:29,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 20:42:29,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 20:42:29,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2412 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 20:42:29,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 20:42:29,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 20:42:29,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 20:42:29,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 20:42:29,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 20:42:29,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 20:42:29,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 20:42:29,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:42:32,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:42:32,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:42:32,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [9]  
 
 2020-11-18 20:42:32,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-18 20:42:32,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.1676 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-18 20:42:32,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-18 20:42:32,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-18 20:42:32,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true, 原创]  
 
 2020-11-18 20:42:32,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-18 20:42:32,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 20:42:32,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:43:09,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:43:09,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_user where username=?  
 
 2020-11-18 20:43:09,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [zhangsan]  
 
 2020-11-18 20:43:09,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-18 20:43:09,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.8493 millis. select * from t_user where username=?  
 
 2020-11-18 20:43:09,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-18 20:43:09,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 20:43:09,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-18 20:43:09,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-18 20:43:09,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 20:43:09,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 20:43:20,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 20:43:20,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [admin]  
 
 2020-11-18 20:43:20,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-18 20:43:20,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.1534 millis. select * from t_user where username=?  
 
 2020-11-18 20:43:20,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} open  
 
 2020-11-18 20:43:20,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 20:43:20,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} Result: [4, admin, $2a$10$77KRGBQYXA3LOR.2plwkGex4Ns9uhk0EFw7LwGvKCqFKvRCeYFXne, 24354666@qq.com, 2, https://picsum.photos/seed/picsum/200/300, 2020-11-14 05:06:04.0, 2020-11-14 05:06:04.0]  
 
 2020-11-18 20:43:20,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} closed  
 
 2020-11-18 20:43:20,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-18 20:43:20,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:39:18,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-539} connected  
 
 2020-11-18 21:39:18,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-540} connected  
 
 2020-11-18 21:39:18,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-541} connected  
 
 2020-11-18 21:39:18,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-542} connected  
 
 2020-11-18 21:39:18,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-543} connected  
 
 2020-11-18 21:39:18,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:39:18,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 21:39:18,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 21:39:18,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 21:39:18,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 22.0474 millis. select * from t_types  
 
 2020-11-18 21:39:18,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 21:39:18,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 21:39:18,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 21:39:18,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 21:39:18,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 21:39:18,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 21:39:18,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 21:39:18,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 21:39:18,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 21:39:18,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 21:39:18,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:39:18,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:39:18,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 21:39:18,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 21:39:18,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 21:39:18,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1518 millis. select * from t_tages  
 
 2020-11-18 21:39:18,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 21:39:18,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 21:39:18,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 21:39:18,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 21:39:18,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 21:39:18,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 21:39:18,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 21:39:18,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 21:39:18,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 21:39:18,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 21:39:18,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:39:18,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:39:18,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:39:18,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:39:19,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 21:39:19,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 21:39:19,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 21:39:19,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.88 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 21:39:19,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 21:39:19,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 21:39:19,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 21:39:19,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 21:39:19,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 21:39:19,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 21:39:19,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 21:39:19,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 21:39:19,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.7226 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 21:39:19,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 21:39:19,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 21:39:19,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 21:39:19,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 21:39:19,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 21:39:19,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 21:39:19,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 21:39:19,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:39:19,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:39:19,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 21:39:19,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 21:39:19,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 4.8814 millis. select * from t_types  
 
 2020-11-18 21:39:19,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-18 21:39:19,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-18 21:39:19,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-18 21:39:19,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-18 21:39:19,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-18 21:39:19,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-18 21:39:19,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-18 21:39:19,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-18 21:39:19,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-18 21:39:19,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 21:39:19,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:39:19,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:39:19,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 21:39:19,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 21:39:19,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2837 millis. select * from t_tages  
 
 2020-11-18 21:39:19,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-18 21:39:19,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-18 21:39:19,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-18 21:39:19,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-18 21:39:19,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-18 21:39:19,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-18 21:39:19,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-18 21:39:19,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-18 21:39:19,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-18 21:39:19,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 21:39:19,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:39:19,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:39:19,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 21:39:19,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 21:39:19,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.7051 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 21:39:19,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-18 21:39:19,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-18 21:39:19,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [3]  
 
 2020-11-18 21:39:19,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-18 21:39:19,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 21:39:19,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 21:39:19,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 21:39:19,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.6075 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 21:39:19,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-18 21:39:19,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 21:39:19,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 21:39:19,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 21:39:19,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 21:39:19,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-18 21:39:19,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 21:39:19,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:39:40,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:39:40,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-18 21:39:40,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [admin]  
 
 2020-11-18 21:39:40,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-18 21:39:40,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.4509 millis. select * from t_user where username=?  
 
 2020-11-18 21:39:40,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-18 21:39:40,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 21:39:40,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [4, admin, $2a$10$77KRGBQYXA3LOR.2plwkGex4Ns9uhk0EFw7LwGvKCqFKvRCeYFXne, 24354666@qq.com, 2, https://picsum.photos/seed/picsum/200/300, 2020-11-14 05:06:04.0, 2020-11-14 05:06:04.0]  
 
 2020-11-18 21:39:40,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-18 21:39:40,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 21:39:40,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:17,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-544} connected  
 
 2020-11-18 21:41:17,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-545} connected  
 
 2020-11-18 21:41:17,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-546} connected  
 
 2020-11-18 21:41:17,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-547} connected  
 
 2020-11-18 21:41:18,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-548} connected  
 
 2020-11-18 21:41:18,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:18,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-18 21:41:18,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 21:41:18,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 21:41:18,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.0351 millis. select * from t_types  
 
 2020-11-18 21:41:18,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-18 21:41:18,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-18 21:41:18,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-18 21:41:18,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-18 21:41:18,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-18 21:41:18,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-18 21:41:18,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-18 21:41:18,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-18 21:41:18,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-18 21:41:18,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 21:41:18,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:18,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:18,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-18 21:41:18,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 21:41:18,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 21:41:18,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.5223 millis. select * from t_tages  
 
 2020-11-18 21:41:18,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-18 21:41:18,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-18 21:41:18,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-18 21:41:18,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-18 21:41:18,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-18 21:41:18,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-18 21:41:18,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-18 21:41:18,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-18 21:41:18,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-18 21:41:18,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 21:41:18,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:18,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:18,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:18,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:18,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 21:41:18,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 21:41:18,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 21:41:18,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8796 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 21:41:18,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-18 21:41:18,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-18 21:41:18,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-18 21:41:18,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-18 21:41:18,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 21:41:18,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 21:41:18,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 21:41:18,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 21:41:18,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.7129 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 21:41:18,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-18 21:41:18,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 21:41:18,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 21:41:18,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 21:41:18,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 21:41:18,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-18 21:41:18,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 21:41:18,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:18,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:18,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 21:41:18,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 21:41:18,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 6.1406 millis. select * from t_types  
 
 2020-11-18 21:41:18,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-18 21:41:18,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-18 21:41:18,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-18 21:41:18,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-18 21:41:18,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-18 21:41:18,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-18 21:41:18,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-18 21:41:18,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-18 21:41:18,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-18 21:41:18,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 21:41:18,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:18,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:18,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 21:41:18,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 21:41:18,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3052 millis. select * from t_tages  
 
 2020-11-18 21:41:18,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-18 21:41:18,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-18 21:41:18,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-18 21:41:18,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-18 21:41:18,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-18 21:41:18,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-18 21:41:18,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-18 21:41:18,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-18 21:41:18,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-18 21:41:18,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 21:41:18,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:18,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:18,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 21:41:18,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 21:41:18,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4553 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 21:41:18,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-18 21:41:18,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-18 21:41:18,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [3]  
 
 2020-11-18 21:41:18,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-18 21:41:18,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 21:41:18,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 21:41:18,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 21:41:18,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.5529 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 21:41:18,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-18 21:41:18,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 21:41:18,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 21:41:18,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 21:41:18,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 21:41:18,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-18 21:41:18,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 21:41:18,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:26,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:26,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-18 21:41:26,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [admin]  
 
 2020-11-18 21:41:26,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-18 21:41:26,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.4944 millis. select * from t_user where username=?  
 
 2020-11-18 21:41:26,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-18 21:41:26,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-18 21:41:26,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [4, admin, $2a$10$77KRGBQYXA3LOR.2plwkGex4Ns9uhk0EFw7LwGvKCqFKvRCeYFXne, 24354666@qq.com, 2, https://picsum.photos/seed/picsum/200/300, 2020-11-14 05:06:04.0, 2020-11-14 05:06:04.0]  
 
 2020-11-18 21:41:26,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-18 21:41:26,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-18 21:41:26,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:26,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:26,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-18 21:41:26,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-18 21:41:26,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.6721 millis. select * from t_types  
 
 2020-11-18 21:41:26,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} open  
 
 2020-11-18 21:41:26,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Header: [id, name]  
 
 2020-11-18 21:41:26,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [8, 方法论]  
 
 2020-11-18 21:41:26,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [9, 理论类]  
 
 2020-11-18 21:41:26,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [21, 错误日记]  
 
 2020-11-18 21:41:26,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [23, 开发日记]  
 
 2020-11-18 21:41:26,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [24, 实践论]  
 
 2020-11-18 21:41:26,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [25, 想法论]  
 
 2020-11-18 21:41:26,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} closed  
 
 2020-11-18 21:41:26,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-18 21:41:26,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:26,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:26,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-18 21:41:26,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-18 21:41:26,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.1703 millis. select * from t_tages  
 
 2020-11-18 21:41:26,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} open  
 
 2020-11-18 21:41:26,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Header: [id, tage]  
 
 2020-11-18 21:41:26,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [1, 学习日记]  
 
 2020-11-18 21:41:26,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-18 21:41:26,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-18 21:41:26,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-18 21:41:26,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [5, 开发日记]  
 
 2020-11-18 21:41:26,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [8, 开发手册]  
 
 2020-11-18 21:41:26,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} closed  
 
 2020-11-18 21:41:26,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-18 21:41:26,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-18 21:41:26,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-18 21:41:26,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-18 21:41:26,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-18 21:41:26,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.561 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-18 21:41:26,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} open  
 
 2020-11-18 21:41:26,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Header: [count(0)]  
 
 2020-11-18 21:41:26,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [3]  
 
 2020-11-18 21:41:26,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} closed  
 
 2020-11-18 21:41:26,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-18 21:41:26,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-18 21:41:26,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-18 21:41:26,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.4361 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-18 21:41:26,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} open  
 
 2020-11-18 21:41:26,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-18 21:41:26,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-18 21:41:26,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-18 21:41:26,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-18 21:41:26,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} closed  
 
 2020-11-18 21:41:26,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-18 21:41:26,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 