
 2020-11-23 13:13:08,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1083} connected  
 
 2020-11-23 13:13:08,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1084} connected  
 
 2020-11-23 13:13:09,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1085} connected  
 
 2020-11-23 13:13:09,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1086} connected  
 
 2020-11-23 13:13:09,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1087} connected  
 
 2020-11-23 13:13:09,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:13:09,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 13:13:09,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 13:13:09,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 13:13:09,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 30.9009 millis. select * from t_types  
 
 2020-11-23 13:13:09,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 13:13:09,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 13:13:09,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 13:13:09,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 13:13:09,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} created. select * from t_types  
 
 2020-11-23 13:13:09,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 13:13:09,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} Parameters : []  
 
 2020-11-23 13:13:09,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 13:13:09,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} Types : []  
 
 2020-11-23 13:13:09,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 13:13:09,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 13:13:09,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} executed. 13.5236 millis. select * from t_types  
 
 2020-11-23 13:13:09,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 13:13:09,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} open  
 
 2020-11-23 13:13:09,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Header: [id, name]  
 
 2020-11-23 13:13:09,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 13:13:09,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [8, 方法论]  
 
 2020-11-23 13:13:09,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [9, 理论类]  
 
 2020-11-23 13:13:09,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [21, 错误日记]  
 
 2020-11-23 13:13:09,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:13:09,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [23, 开发日记]  
 
 2020-11-23 13:13:09,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [24, 实践论]  
 
 2020-11-23 13:13:09,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:13:09,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [25, 想法论]  
 
 2020-11-23 13:13:09,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:13:09,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} closed  
 
 2020-11-23 13:13:09,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_tages  
 
 2020-11-23 13:13:09,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} clearParameters.   
 
 2020-11-23 13:13:09,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:13:09,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:13:09,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 13:13:09,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 13:13:09,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} created. select * from t_tages  
 
 2020-11-23 13:13:09,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.3474 millis. select * from t_tages  
 
 2020-11-23 13:13:09,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : []  
 
 2020-11-23 13:13:09,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 13:13:09,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : []  
 
 2020-11-23 13:13:09,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, tage]  
 
 2020-11-23 13:13:09,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, 学习日记]  
 
 2020-11-23 13:13:09,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 4.5737 millis. select * from t_tages  
 
 2020-11-23 13:13:09,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2, 错误笔记]  
 
 2020-11-23 13:13:09,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} open  
 
 2020-11-23 13:13:09,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3, 数据库笔记]  
 
 2020-11-23 13:13:09,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Header: [id, tage]  
 
 2020-11-23 13:13:09,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [4, 程序运行日记]  
 
 2020-11-23 13:13:09,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [1, 学习日记]  
 
 2020-11-23 13:13:09,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [5, 开发日记]  
 
 2020-11-23 13:13:09,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-23 13:13:09,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 开发手册]  
 
 2020-11-23 13:13:09,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-23 13:13:09,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 搭建日记]  
 
 2020-11-23 13:13:09,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-23 13:13:09,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 13:13:09,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [5, 开发日记]  
 
 2020-11-23 13:13:09,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:13:09,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [8, 开发手册]  
 
 2020-11-23 13:13:09,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:13:09,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} Result: [10, 搭建日记]  
 
 2020-11-23 13:13:09,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50003} closed  
 
 2020-11-23 13:13:09,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-23 13:13:09,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:13:09,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 13:13:09,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:13:09,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:13:09,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:13:09,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:13:09,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 13:13:09,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:13:09,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:13:09,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 13:13:09,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : []  
 
 2020-11-23 13:13:09,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 13:13:09,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : []  
 
 2020-11-23 13:13:09,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 11.3066 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:13:09,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 10.4115 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:13:09,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 13:13:09,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} open  
 
 2020-11-23 13:13:09,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [count(0)]  
 
 2020-11-23 13:13:09,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-23 13:13:09,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [2]  
 
 2020-11-23 13:13:09,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} Result: [2]  
 
 2020-11-23 13:13:09,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 13:13:09,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} closed  
 
 2020-11-23 13:13:09,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:13:09,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-23 13:13:09,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:13:09,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:13:09,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [4]  
 
 2020-11-23 13:13:09,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : [4]  
 
 2020-11-23 13:13:09,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:13:09,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:13:09,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 5.9456 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:13:09,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 5.8812 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:13:09,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} open  
 
 2020-11-23 13:13:09,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} open  
 
 2020-11-23 13:13:09,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:13:09,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:13:09,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:13:09,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:13:09,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:13:09,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:13:09,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50007} closed  
 
 2020-11-23 13:13:09,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-23 13:13:09,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} closed  
 
 2020-11-23 13:13:09,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 13:13:09,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:13:09,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:13:25,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:13:25,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_user where username=?  
 
 2020-11-23 13:13:25,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [zhangsan]  
 
 2020-11-23 13:13:25,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [VARCHAR]  
 
 2020-11-23 13:13:25,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 8.4735 millis. select * from t_user where username=?  
 
 2020-11-23 13:13:25,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} open  
 
 2020-11-23 13:13:25,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 13:13:25,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 13:13:25,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} closed  
 
 2020-11-23 13:13:25,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 13:13:25,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:13:31,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:13:31,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:13:31,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : []  
 
 2020-11-23 13:13:31,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : []  
 
 2020-11-23 13:13:31,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 6.2988 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:13:31,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} open  
 
 2020-11-23 13:13:31,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} Header: [year]  
 
 2020-11-23 13:13:31,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} Result: [2020]  
 
 2020-11-23 13:13:31,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50009} closed  
 
 2020-11-23 13:13:31,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-23 13:13:31,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:13:31,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:13:31,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. select b.id,b.title from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:13:31,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [2020]  
 
 2020-11-23 13:13:31,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [VARCHAR]  
 
 2020-11-23 13:13:31,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 2.9778 millis. select b.id,b.title from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:13:31,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} open  
 
 2020-11-23 13:13:31,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} Header: [id, title]  
 
 2020-11-23 13:13:31,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} Result: [11, Java基本语法]  
 
 2020-11-23 13:13:31,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} Result: [12, Java笔记]  
 
 2020-11-23 13:13:31,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50010} closed  
 
 2020-11-23 13:13:31,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-23 13:13:31,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:34,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1088} connected  
 
 2020-11-23 13:27:34,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1089} connected  
 
 2020-11-23 13:27:34,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1090} connected  
 
 2020-11-23 13:27:34,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1091} connected  
 
 2020-11-23 13:27:34,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1092} connected  
 
 2020-11-23 13:27:34,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:34,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 13:27:34,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 13:27:34,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 13:27:34,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 44.4132 millis. select * from t_types  
 
 2020-11-23 13:27:34,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 13:27:34,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 13:27:34,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 13:27:34,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 13:27:34,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 13:27:34,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 13:27:34,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 13:27:34,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 13:27:34,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 13:27:34,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:27:34,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:34,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:34,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 13:27:34,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:27:34,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:27:34,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.907 millis. select * from t_tages  
 
 2020-11-23 13:27:34,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 13:27:34,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 13:27:34,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 13:27:34,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 13:27:34,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 13:27:34,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 13:27:34,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 13:27:34,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 13:27:34,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 13:27:34,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 13:27:34,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:27:34,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:34,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:34,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:35,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:35,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:27:35,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:27:35,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:27:35,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.5339 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:27:35,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 13:27:35,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 13:27:35,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 13:27:35,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 13:27:35,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:27:35,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:27:35,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 13:27:35,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 13:27:35,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 11.88 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:27:35,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 13:27:35,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:27:35,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:27:35,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:27:35,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 13:27:35,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:27:35,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:35,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:35,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 13:27:35,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 13:27:35,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.0001 millis. select * from t_types  
 
 2020-11-23 13:27:35,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-23 13:27:35,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-23 13:27:35,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-23 13:27:35,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-23 13:27:35,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-23 13:27:35,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-23 13:27:35,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-23 13:27:35,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-23 13:27:35,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-23 13:27:35,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:27:35,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:35,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:35,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:27:35,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:27:35,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 8.0827 millis. select * from t_tages  
 
 2020-11-23 13:27:35,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 13:27:35,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-23 13:27:35,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-23 13:27:35,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-23 13:27:35,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-23 13:27:35,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-23 13:27:35,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-23 13:27:35,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-23 13:27:35,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-23 13:27:35,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 13:27:35,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:27:35,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:35,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:35,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:27:35,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:27:35,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.6559 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:27:35,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 13:27:35,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-23 13:27:35,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-23 13:27:35,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 13:27:35,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:27:35,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 13:27:35,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 13:27:35,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.0823 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:27:35,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-23 13:27:35,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:27:35,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:27:35,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:27:35,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-23 13:27:35,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:27:35,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:42,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:42,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-23 13:27:42,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-23 13:27:42,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-23 13:27:42,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.8364 millis. select * from t_user where username=?  
 
 2020-11-23 13:27:42,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-23 13:27:42,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 13:27:42,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 13:27:42,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-23 13:27:42,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:27:42,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:45,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:45,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:27:45,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-23 13:27:45,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-23 13:27:45,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.1592 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:27:45,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-23 13:27:45,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [year]  
 
 2020-11-23 13:27:45,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [2020]  
 
 2020-11-23 13:27:45,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-23 13:27:45,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:27:45,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:27:45,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:27:45,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:27:45,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [2020]  
 
 2020-11-23 13:27:45,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR]  
 
 2020-11-23 13:27:45,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.2502 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:27:45,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-23 13:27:45,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [id, title, updatetime, flag]  
 
 2020-11-23 13:27:45,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 13:27:45,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 13:27:45,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-23 13:27:45,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:27:45,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:29:10,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1093} connected  
 
 2020-11-23 13:29:10,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1094} connected  
 
 2020-11-23 13:29:10,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1095} connected  
 
 2020-11-23 13:29:10,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1096} connected  
 
 2020-11-23 13:29:10,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1097} connected  
 
 2020-11-23 13:29:10,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:29:11,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-23 13:29:11,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-23 13:29:11,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-23 13:29:11,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 47.3319 millis. select * from t_user where username=?  
 
 2020-11-23 13:29:11,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 13:29:11,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 13:29:11,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 13:29:11,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 13:29:11,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:29:11,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:29:14,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:29:14,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:29:14,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:29:14,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:29:14,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.2608 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:29:14,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 13:29:14,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [year]  
 
 2020-11-23 13:29:14,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2020]  
 
 2020-11-23 13:29:14,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 13:29:14,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:29:14,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:29:14,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:29:14,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:29:14,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [2020]  
 
 2020-11-23 13:29:14,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-23 13:29:14,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2819 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:29:14,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 13:29:14,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, title, updatetime, flag]  
 
 2020-11-23 13:29:14,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 13:29:14,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 13:29:14,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 13:29:14,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:29:14,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:29:41,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1098} connected  
 
 2020-11-23 13:29:41,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1099} connected  
 
 2020-11-23 13:29:41,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1100} connected  
 
 2020-11-23 13:29:41,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1101} connected  
 
 2020-11-23 13:29:41,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1102} connected  
 
 2020-11-23 13:29:41,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:29:41,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-23 13:29:41,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-23 13:29:41,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-23 13:29:41,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 41.2001 millis. select * from t_user where username=?  
 
 2020-11-23 13:29:41,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 13:29:41,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 13:29:42,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 13:29:42,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 13:29:42,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:29:42,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:29:44,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:29:44,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:29:44,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:29:44,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:29:44,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.8136 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:29:44,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 13:29:44,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [year]  
 
 2020-11-23 13:29:44,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2020]  
 
 2020-11-23 13:29:44,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 13:29:44,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:29:44,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:29:44,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:29:44,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:29:44,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [2020]  
 
 2020-11-23 13:29:44,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-23 13:29:44,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4914 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:29:44,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 13:29:44,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, title, updatetime, flag]  
 
 2020-11-23 13:29:44,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 13:29:44,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 13:29:44,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 13:29:44,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:29:44,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:30:58,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1103} connected  
 
 2020-11-23 13:30:58,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1104} connected  
 
 2020-11-23 13:30:58,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1105} connected  
 
 2020-11-23 13:30:58,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1106} connected  
 
 2020-11-23 13:30:58,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1107} connected  
 
 2020-11-23 13:30:58,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:30:59,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-23 13:30:59,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-23 13:30:59,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-23 13:30:59,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 52.862 millis. select * from t_user where username=?  
 
 2020-11-23 13:30:59,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 13:30:59,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 13:30:59,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 13:30:59,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 13:30:59,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:30:59,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:31:03,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:31:03,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:31:03,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:31:03,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:31:03,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.4488 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:31:03,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 13:31:03,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [year]  
 
 2020-11-23 13:31:03,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2020]  
 
 2020-11-23 13:31:03,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 13:31:03,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:31:03,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:31:03,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:31:03,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:31:03,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [2020]  
 
 2020-11-23 13:31:03,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-23 13:31:03,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3864 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:31:03,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 13:31:03,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, title, updatetime, flag]  
 
 2020-11-23 13:31:03,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 13:31:03,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 13:31:03,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 13:31:03,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:31:03,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:34:12,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1108} connected  
 
 2020-11-23 13:34:12,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1109} connected  
 
 2020-11-23 13:34:12,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1110} connected  
 
 2020-11-23 13:34:12,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1111} connected  
 
 2020-11-23 13:34:12,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1112} connected  
 
 2020-11-23 13:34:12,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:34:12,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-23 13:34:12,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-23 13:34:12,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-23 13:34:12,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 10.7663 millis. select * from t_user where username=?  
 
 2020-11-23 13:34:12,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 13:34:12,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 13:34:12,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 13:34:12,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 13:34:12,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:34:12,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:34:25,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:34:25,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:34:25,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:34:25,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:34:25,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.1752 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 13:34:25,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 13:34:25,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [year]  
 
 2020-11-23 13:34:25,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2020]  
 
 2020-11-23 13:34:25,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 13:34:25,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:34:25,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:34:25,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:34:25,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:34:25,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [2020]  
 
 2020-11-23 13:34:25,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [VARCHAR]  
 
 2020-11-23 13:34:25,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.0512 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 13:34:25,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 13:34:25,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, title, updatetime, flag]  
 
 2020-11-23 13:34:25,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 13:34:25,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 13:34:25,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 13:34:25,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:34:25,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:37:56,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1113} connected  
 
 2020-11-23 13:37:56,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1114} connected  
 
 2020-11-23 13:37:56,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1115} connected  
 
 2020-11-23 13:37:56,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1116} connected  
 
 2020-11-23 13:37:56,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1117} connected  
 
 2020-11-23 13:37:56,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:37:57,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-23 13:37:57,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-23 13:37:57,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-23 13:37:57,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 47.643 millis. select * from t_user where username=?  
 
 2020-11-23 13:37:57,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 13:37:57,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 13:37:57,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 13:37:57,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 13:37:57,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:37:57,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:37:59,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:37:59,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_types  
 
 2020-11-23 13:37:59,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:37:59,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:37:59,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.1607 millis. select * from t_types  
 
 2020-11-23 13:37:59,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 13:37:59,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, name]  
 
 2020-11-23 13:37:59,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 方法论]  
 
 2020-11-23 13:37:59,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 理论类]  
 
 2020-11-23 13:37:59,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [21, 错误日记]  
 
 2020-11-23 13:37:59,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [23, 开发日记]  
 
 2020-11-23 13:37:59,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [24, 实践论]  
 
 2020-11-23 13:37:59,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [25, 想法论]  
 
 2020-11-23 13:37:59,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 13:37:59,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:37:59,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:37:59,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:37:59,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_tages  
 
 2020-11-23 13:37:59,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:37:59,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:37:59,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.0573 millis. select * from t_tages  
 
 2020-11-23 13:37:59,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 13:37:59,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, tage]  
 
 2020-11-23 13:37:59,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, 学习日记]  
 
 2020-11-23 13:37:59,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2, 错误笔记]  
 
 2020-11-23 13:37:59,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3, 数据库笔记]  
 
 2020-11-23 13:37:59,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [4, 程序运行日记]  
 
 2020-11-23 13:37:59,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [5, 开发日记]  
 
 2020-11-23 13:37:59,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 开发手册]  
 
 2020-11-23 13:37:59,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 搭建日记]  
 
 2020-11-23 13:37:59,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 13:37:59,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:37:59,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:37:59,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:37:59,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:37:59,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:37:59,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:37:59,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-23 13:37:59,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-23 13:37:59,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.1322 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:37:59,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 13:37:59,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-23 13:37:59,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-23 13:37:59,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 13:37:59,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:37:59,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:37:59,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [4]  
 
 2020-11-23 13:37:59,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:37:59,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.14 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:37:59,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 13:37:59,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:37:59,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:37:59,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:37:59,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 13:37:59,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:37:59,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:01,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:01,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:38:01,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 13:38:01,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:38:01,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 9.4301 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:38:01,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-23 13:38:01,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:38:01,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:38:01,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-23 13:38:01,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:38:01,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:02,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:02,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:38:02,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 13:38:02,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:38:02,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 7.3268 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:38:02,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-23 13:38:02,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:02,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 13:38:02,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 13:38:02,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-23 13:38:02,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:38:02,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:02,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:02,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:02,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 13:38:02,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:38:02,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.6941 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:02,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} open  
 
 2020-11-23 13:38:02,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:02,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 13:38:02,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} closed  
 
 2020-11-23 13:38:02,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:38:02,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:02,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:02,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-23 13:38:02,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:38:02,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.6694 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:02,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} open  
 
 2020-11-23 13:38:02,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:02,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 13:38:02,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} closed  
 
 2020-11-23 13:38:02,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:38:02,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:03,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:03,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 13:38:03,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:38:03,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.0247 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:38:03,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-23 13:38:03,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:38:03,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:38:03,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-23 13:38:03,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:38:03,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:03,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:03,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 13:38:03,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:38:03,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.2974 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:38:03,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-23 13:38:03,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:03,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 13:38:03,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 13:38:03,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-23 13:38:03,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:38:03,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:03,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:03,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 13:38:03,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:38:03,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.2881 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:03,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} open  
 
 2020-11-23 13:38:03,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:03,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 13:38:03,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} closed  
 
 2020-11-23 13:38:03,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:38:03,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:03,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:03,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-23 13:38:03,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:38:03,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.7395 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:03,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50012} open  
 
 2020-11-23 13:38:03,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50012} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:03,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50012} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 13:38:03,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50012} closed  
 
 2020-11-23 13:38:03,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:38:03,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:05,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:05,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 13:38:05,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:38:05,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.5708 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:38:05,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} open  
 
 2020-11-23 13:38:05,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:38:05,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:38:05,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} closed  
 
 2020-11-23 13:38:05,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:38:05,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:05,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:05,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 13:38:05,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:38:05,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.8452 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:38:05,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} open  
 
 2020-11-23 13:38:05,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:05,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 13:38:05,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 13:38:05,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} closed  
 
 2020-11-23 13:38:05,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:38:05,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:06,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:06,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 13:38:06,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:38:06,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 6.3069 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:06,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} open  
 
 2020-11-23 13:38:06,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:06,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 13:38:06,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} closed  
 
 2020-11-23 13:38:06,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:38:06,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:06,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:06,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-23 13:38:06,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:38:06,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.4707 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:06,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50016} open  
 
 2020-11-23 13:38:06,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50016} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:06,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50016} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 13:38:06,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50016} closed  
 
 2020-11-23 13:38:06,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:38:06,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:07,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:07,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:38:07,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:38:07,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8008 millis. select * from t_types  
 
 2020-11-23 13:38:07,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} open  
 
 2020-11-23 13:38:07,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Header: [id, name]  
 
 2020-11-23 13:38:07,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [8, 方法论]  
 
 2020-11-23 13:38:07,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [9, 理论类]  
 
 2020-11-23 13:38:07,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [21, 错误日记]  
 
 2020-11-23 13:38:07,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [23, 开发日记]  
 
 2020-11-23 13:38:07,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [24, 实践论]  
 
 2020-11-23 13:38:07,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [25, 想法论]  
 
 2020-11-23 13:38:07,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} closed  
 
 2020-11-23 13:38:07,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:38:07,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:07,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:07,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:38:07,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:38:07,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.711 millis. select * from t_tages  
 
 2020-11-23 13:38:07,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} open  
 
 2020-11-23 13:38:07,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Header: [id, tage]  
 
 2020-11-23 13:38:07,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [1, 学习日记]  
 
 2020-11-23 13:38:07,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [2, 错误笔记]  
 
 2020-11-23 13:38:07,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [3, 数据库笔记]  
 
 2020-11-23 13:38:07,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [4, 程序运行日记]  
 
 2020-11-23 13:38:07,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [5, 开发日记]  
 
 2020-11-23 13:38:07,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [8, 开发手册]  
 
 2020-11-23 13:38:07,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [10, 搭建日记]  
 
 2020-11-23 13:38:07,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} closed  
 
 2020-11-23 13:38:07,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:38:07,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:07,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:07,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-23 13:38:07,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-23 13:38:07,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.43 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:38:07,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} open  
 
 2020-11-23 13:38:07,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Header: [count(0)]  
 
 2020-11-23 13:38:07,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [2]  
 
 2020-11-23 13:38:07,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} closed  
 
 2020-11-23 13:38:07,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:38:07,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [4]  
 
 2020-11-23 13:38:07,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:38:07,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.8695 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:38:07,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} open  
 
 2020-11-23 13:38:07,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:38:07,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:38:07,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:38:07,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} closed  
 
 2020-11-23 13:38:07,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:38:07,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:08,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:08,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 13:38:08,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:38:08,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.0288 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:38:08,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} open  
 
 2020-11-23 13:38:08,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:38:08,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:38:08,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} closed  
 
 2020-11-23 13:38:08,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:38:08,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:08,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:08,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 13:38:08,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:38:08,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.075 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:38:08,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} open  
 
 2020-11-23 13:38:08,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:08,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 13:38:08,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 13:38:08,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} closed  
 
 2020-11-23 13:38:08,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:38:08,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:08,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:08,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 13:38:08,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:38:08,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.267 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:08,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} open  
 
 2020-11-23 13:38:08,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:08,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 13:38:08,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} closed  
 
 2020-11-23 13:38:08,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:38:08,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:08,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:08,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-23 13:38:08,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:38:08,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.7312 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:38:08,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50024} open  
 
 2020-11-23 13:38:08,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50024} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:08,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50024} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 13:38:08,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50024} closed  
 
 2020-11-23 13:38:08,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:38:08,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:10,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:10,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:38:10,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:38:10,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8073 millis. select * from t_types  
 
 2020-11-23 13:38:10,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} open  
 
 2020-11-23 13:38:10,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} Header: [id, name]  
 
 2020-11-23 13:38:10,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} Result: [8, 方法论]  
 
 2020-11-23 13:38:10,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} Result: [9, 理论类]  
 
 2020-11-23 13:38:10,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} Result: [21, 错误日记]  
 
 2020-11-23 13:38:10,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} Result: [23, 开发日记]  
 
 2020-11-23 13:38:10,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} Result: [24, 实践论]  
 
 2020-11-23 13:38:10,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} Result: [25, 想法论]  
 
 2020-11-23 13:38:10,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50025} closed  
 
 2020-11-23 13:38:10,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:38:10,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:10,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:10,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:38:10,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:38:10,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7391 millis. select * from t_tages  
 
 2020-11-23 13:38:10,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} open  
 
 2020-11-23 13:38:10,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} Header: [id, tage]  
 
 2020-11-23 13:38:10,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} Result: [1, 学习日记]  
 
 2020-11-23 13:38:10,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} Result: [2, 错误笔记]  
 
 2020-11-23 13:38:10,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} Result: [3, 数据库笔记]  
 
 2020-11-23 13:38:10,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} Result: [4, 程序运行日记]  
 
 2020-11-23 13:38:10,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} Result: [5, 开发日记]  
 
 2020-11-23 13:38:10,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} Result: [8, 开发手册]  
 
 2020-11-23 13:38:10,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} Result: [10, 搭建日记]  
 
 2020-11-23 13:38:10,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50026} closed  
 
 2020-11-23 13:38:10,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:38:10,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:10,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:10,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-23 13:38:10,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-23 13:38:10,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.5144 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:38:10,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50027} open  
 
 2020-11-23 13:38:10,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50027} Header: [count(0)]  
 
 2020-11-23 13:38:10,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50027} Result: [2]  
 
 2020-11-23 13:38:10,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50027} closed  
 
 2020-11-23 13:38:10,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:38:10,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [4]  
 
 2020-11-23 13:38:10,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:38:10,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2573 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:38:10,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} open  
 
 2020-11-23 13:38:10,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:38:10,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:38:10,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:38:10,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} closed  
 
 2020-11-23 13:38:10,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:38:10,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:11,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:11,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [12]  
 
 2020-11-23 13:38:11,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:38:11,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.2161 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:38:11,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50029} open  
 
 2020-11-23 13:38:11,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50029} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:38:11,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:38:11,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50029} closed  
 
 2020-11-23 13:38:11,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:38:11,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:11,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:11,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-23 13:38:11,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:38:11,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.1629 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:38:11,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50030} open  
 
 2020-11-23 13:38:11,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50030} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:38:11,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50030} closed  
 
 2020-11-23 13:38:11,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:38:11,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:13,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:13,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:38:13,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:38:13,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9246 millis. select * from t_types  
 
 2020-11-23 13:38:13,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} open  
 
 2020-11-23 13:38:13,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} Header: [id, name]  
 
 2020-11-23 13:38:13,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} Result: [8, 方法论]  
 
 2020-11-23 13:38:13,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} Result: [9, 理论类]  
 
 2020-11-23 13:38:13,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} Result: [21, 错误日记]  
 
 2020-11-23 13:38:13,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} Result: [23, 开发日记]  
 
 2020-11-23 13:38:13,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} Result: [24, 实践论]  
 
 2020-11-23 13:38:13,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} Result: [25, 想法论]  
 
 2020-11-23 13:38:13,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50031} closed  
 
 2020-11-23 13:38:13,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:38:13,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:13,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:13,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:38:13,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:38:13,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2869 millis. select * from t_tages  
 
 2020-11-23 13:38:13,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} open  
 
 2020-11-23 13:38:13,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} Header: [id, tage]  
 
 2020-11-23 13:38:13,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} Result: [1, 学习日记]  
 
 2020-11-23 13:38:13,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} Result: [2, 错误笔记]  
 
 2020-11-23 13:38:13,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} Result: [3, 数据库笔记]  
 
 2020-11-23 13:38:13,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} Result: [4, 程序运行日记]  
 
 2020-11-23 13:38:13,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} Result: [5, 开发日记]  
 
 2020-11-23 13:38:13,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} Result: [8, 开发手册]  
 
 2020-11-23 13:38:13,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} Result: [10, 搭建日记]  
 
 2020-11-23 13:38:13,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50032} closed  
 
 2020-11-23 13:38:13,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:38:13,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:38:13,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:38:13,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-23 13:38:13,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-23 13:38:14,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.7851 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:38:14,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50033} open  
 
 2020-11-23 13:38:14,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50033} Header: [count(0)]  
 
 2020-11-23 13:38:14,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50033} Result: [2]  
 
 2020-11-23 13:38:14,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50033} closed  
 
 2020-11-23 13:38:14,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:38:14,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [4]  
 
 2020-11-23 13:38:14,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:38:14,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.1601 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:38:14,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} open  
 
 2020-11-23 13:38:14,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:38:14,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:38:14,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:38:14,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} closed  
 
 2020-11-23 13:38:14,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:38:14,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:40,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1123} connected  
 
 2020-11-23 13:48:40,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1124} connected  
 
 2020-11-23 13:48:40,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1125} connected  
 
 2020-11-23 13:48:40,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1126} connected  
 
 2020-11-23 13:48:40,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1127} connected  
 
 2020-11-23 13:48:40,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:40,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 13:48:40,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 13:48:40,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 13:48:40,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.6954 millis. select * from t_types  
 
 2020-11-23 13:48:40,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 13:48:40,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 13:48:40,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 13:48:40,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 13:48:40,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 13:48:40,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 13:48:40,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 13:48:40,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 13:48:40,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 13:48:40,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:48:40,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:40,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:40,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 13:48:40,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:48:40,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:48:40,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4849 millis. select * from t_tages  
 
 2020-11-23 13:48:40,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 13:48:40,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 13:48:40,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 13:48:40,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 13:48:40,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 13:48:40,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 13:48:40,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 13:48:40,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 13:48:40,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 13:48:40,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 13:48:40,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:48:40,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:40,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:40,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:40,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:40,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:48:40,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:48:40,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:48:40,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.1163 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:48:40,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 13:48:40,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 13:48:40,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 13:48:40,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 13:48:40,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:48:40,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:48:40,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 13:48:40,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 13:48:40,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 7.557 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:48:40,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 13:48:40,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:48:40,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 3, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:48:40,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:48:40,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 13:48:40,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:48:40,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:43,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:43,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:48:43,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-23 13:48:43,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:48:43,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.5884 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:48:43,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 13:48:43,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:48:43,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 3, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:48:43,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 13:48:43,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:48:43,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:43,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:43,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:48:43,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 13:48:43,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:48:43,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 7.254 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:48:43,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:48:43,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:43,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:43,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:48:43,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 13:48:43,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:48:43,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.4351 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:48:43,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50005} open  
 
 2020-11-23 13:48:44,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50005} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:44,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50005} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 13:48:44,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50005} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 13:48:44,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50005} closed  
 
 2020-11-23 13:48:44,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:48:44,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:44,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:44,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:44,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 13:48:44,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:48:44,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.8683 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:44,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} open  
 
 2020-11-23 13:48:44,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:44,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 13:48:44,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50006} closed  
 
 2020-11-23 13:48:44,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:48:44,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:44,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:44,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-23 13:48:44,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:48:44,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.4409 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:44,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} open  
 
 2020-11-23 13:48:44,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:44,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 13:48:44,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} closed  
 
 2020-11-23 13:48:44,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:48:44,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:45,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:45,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-23 13:48:45,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:48:45,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.0225 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:48:45,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-23 13:48:45,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:48:45,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 4, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:48:45,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-23 13:48:45,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:48:45,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:45,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:45,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 13:48:45,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:48:45,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 12.352 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:48:45,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:48:45,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:46,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:46,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 13:48:46,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:48:46,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.7227 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:48:46,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} open  
 
 2020-11-23 13:48:46,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:46,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 13:48:46,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 13:48:46,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} closed  
 
 2020-11-23 13:48:46,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:48:46,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:46,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:46,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 13:48:46,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:48:46,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.0592 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:46,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50010} open  
 
 2020-11-23 13:48:46,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50010} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:46,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50010} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 13:48:46,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50010} closed  
 
 2020-11-23 13:48:46,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:48:46,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:46,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:46,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-23 13:48:46,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:48:46,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.238 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:46,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} open  
 
 2020-11-23 13:48:46,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:46,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 13:48:46,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} closed  
 
 2020-11-23 13:48:46,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:48:46,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:47,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:47,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-23 13:48:47,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:48:47,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.0277 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:48:47,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} open  
 
 2020-11-23 13:48:47,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:48:47,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 5, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:48:47,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} closed  
 
 2020-11-23 13:48:47,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:48:47,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:47,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:47,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 13:48:47,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:48:47,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 8.9262 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:48:47,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:48:47,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:48,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:48,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 13:48:48,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:48:48,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.9882 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:48:48,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50013} open  
 
 2020-11-23 13:48:48,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50013} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:48,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50013} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 13:48:48,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50013} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 13:48:48,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50013} closed  
 
 2020-11-23 13:48:48,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:48:48,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:48,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:48,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 13:48:48,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:48:48,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.7849 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:48,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50014} open  
 
 2020-11-23 13:48:48,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50014} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:48,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50014} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 13:48:48,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50014} closed  
 
 2020-11-23 13:48:48,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:48:48,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:48,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:48,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-23 13:48:48,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:48:48,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.1084 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:48,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} open  
 
 2020-11-23 13:48:48,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:48,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 13:48:48,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} closed  
 
 2020-11-23 13:48:48,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:48:48,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:49,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:49,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-23 13:48:49,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:48:49,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9939 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:48:49,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} open  
 
 2020-11-23 13:48:49,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:48:49,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 6, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:48:49,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} closed  
 
 2020-11-23 13:48:49,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:48:49,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:49,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:49,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 13:48:49,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:48:49,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 10.4518 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:48:49,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:48:49,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:50,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:50,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 13:48:50,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:48:50,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.5412 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:48:50,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} open  
 
 2020-11-23 13:48:50,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:50,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 13:48:50,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 13:48:50,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} closed  
 
 2020-11-23 13:48:50,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:48:50,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:50,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:50,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 13:48:50,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:48:50,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.6353 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:50,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} open  
 
 2020-11-23 13:48:50,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:50,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 13:48:50,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} closed  
 
 2020-11-23 13:48:50,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:48:50,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:50,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:50,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [9]  
 
 2020-11-23 13:48:50,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 13:48:50,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.407 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 13:48:50,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50019} open  
 
 2020-11-23 13:48:50,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50019} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:50,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50019} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 13:48:50,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50019} closed  
 
 2020-11-23 13:48:50,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 13:48:50,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:51,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:51,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 13:48:51,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 13:48:51,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.8176 millis. select * from t_types  
 
 2020-11-23 13:48:51,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} open  
 
 2020-11-23 13:48:51,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Header: [id, name]  
 
 2020-11-23 13:48:51,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [8, 方法论]  
 
 2020-11-23 13:48:51,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [9, 理论类]  
 
 2020-11-23 13:48:51,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [21, 错误日记]  
 
 2020-11-23 13:48:51,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [23, 开发日记]  
 
 2020-11-23 13:48:51,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [24, 实践论]  
 
 2020-11-23 13:48:51,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [25, 想法论]  
 
 2020-11-23 13:48:51,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} closed  
 
 2020-11-23 13:48:51,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:48:51,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:51,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:51,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:48:51,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:48:51,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4524 millis. select * from t_tages  
 
 2020-11-23 13:48:51,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} open  
 
 2020-11-23 13:48:51,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} Header: [id, tage]  
 
 2020-11-23 13:48:51,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} Result: [1, 学习日记]  
 
 2020-11-23 13:48:51,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} Result: [2, 错误笔记]  
 
 2020-11-23 13:48:51,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} Result: [3, 数据库笔记]  
 
 2020-11-23 13:48:51,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} Result: [4, 程序运行日记]  
 
 2020-11-23 13:48:51,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} Result: [5, 开发日记]  
 
 2020-11-23 13:48:51,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} Result: [8, 开发手册]  
 
 2020-11-23 13:48:51,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} Result: [10, 搭建日记]  
 
 2020-11-23 13:48:51,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50021} closed  
 
 2020-11-23 13:48:51,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:48:51,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:51,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:51,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:48:51,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:48:51,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3072 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:48:51,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50022} open  
 
 2020-11-23 13:48:51,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50022} Header: [count(0)]  
 
 2020-11-23 13:48:51,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50022} Result: [2]  
 
 2020-11-23 13:48:51,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50022} closed  
 
 2020-11-23 13:48:51,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:48:51,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 13:48:51,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 13:48:51,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.8695 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:48:51,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50023} open  
 
 2020-11-23 13:48:51,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50023} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:48:51,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50023} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:48:51,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50023} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:48:51,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50023} closed  
 
 2020-11-23 13:48:51,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:48:51,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:53,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:53,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-23 13:48:53,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:48:53,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.4565 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:48:53,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50024} open  
 
 2020-11-23 13:48:53,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50024} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:48:53,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:48:53,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50024} closed  
 
 2020-11-23 13:48:53,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:48:53,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:53,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:53,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [12]  
 
 2020-11-23 13:48:53,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:48:53,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 6.5832 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:48:53,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:48:53,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:53,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:53,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-23 13:48:53,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:48:53,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.3117 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:48:53,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50025} open  
 
 2020-11-23 13:48:53,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50025} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:53,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50025} closed  
 
 2020-11-23 13:48:53,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:48:53,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:56,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:56,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-23 13:48:56,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:48:56,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2845 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:48:56,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} open  
 
 2020-11-23 13:48:56,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:48:56,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 1, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:48:56,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} closed  
 
 2020-11-23 13:48:56,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:48:56,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:56,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:56,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [12]  
 
 2020-11-23 13:48:56,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:48:56,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 14.5211 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:48:56,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:48:56,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:56,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:56,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-23 13:48:56,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:48:56,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.4552 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:48:56,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50027} open  
 
 2020-11-23 13:48:56,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50027} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:48:56,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50027} closed  
 
 2020-11-23 13:48:56,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:48:56,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:58,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:58,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 13:48:58,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 13:48:58,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.3649 millis. select * from t_types  
 
 2020-11-23 13:48:58,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} open  
 
 2020-11-23 13:48:58,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} Header: [id, name]  
 
 2020-11-23 13:48:58,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} Result: [8, 方法论]  
 
 2020-11-23 13:48:58,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} Result: [9, 理论类]  
 
 2020-11-23 13:48:58,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} Result: [21, 错误日记]  
 
 2020-11-23 13:48:58,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} Result: [23, 开发日记]  
 
 2020-11-23 13:48:58,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} Result: [24, 实践论]  
 
 2020-11-23 13:48:58,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} Result: [25, 想法论]  
 
 2020-11-23 13:48:58,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50028} closed  
 
 2020-11-23 13:48:58,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:48:58,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:58,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:58,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:48:58,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:48:58,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.5062 millis. select * from t_tages  
 
 2020-11-23 13:48:58,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} open  
 
 2020-11-23 13:48:58,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} Header: [id, tage]  
 
 2020-11-23 13:48:58,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} Result: [1, 学习日记]  
 
 2020-11-23 13:48:58,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} Result: [2, 错误笔记]  
 
 2020-11-23 13:48:58,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} Result: [3, 数据库笔记]  
 
 2020-11-23 13:48:58,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} Result: [4, 程序运行日记]  
 
 2020-11-23 13:48:58,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} Result: [5, 开发日记]  
 
 2020-11-23 13:48:58,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} Result: [8, 开发手册]  
 
 2020-11-23 13:48:58,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} Result: [10, 搭建日记]  
 
 2020-11-23 13:48:58,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50029} closed  
 
 2020-11-23 13:48:58,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:48:58,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:48:58,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:48:59,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:48:59,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:48:59,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.9637 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:48:59,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50030} open  
 
 2020-11-23 13:48:59,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50030} Header: [count(0)]  
 
 2020-11-23 13:48:59,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50030} Result: [2]  
 
 2020-11-23 13:48:59,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50030} closed  
 
 2020-11-23 13:48:59,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:48:59,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 13:48:59,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 13:48:59,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.8687 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:48:59,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50031} open  
 
 2020-11-23 13:48:59,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50031} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:48:59,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50031} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:48:59,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50031} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 2, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:48:59,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50031} closed  
 
 2020-11-23 13:48:59,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:48:59,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:00,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:00,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-23 13:49:00,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:49:00,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.5738 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:49:00,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} open  
 
 2020-11-23 13:49:00,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:49:00,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 2, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:49:00,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} closed  
 
 2020-11-23 13:49:00,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:49:00,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:00,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:00,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [12]  
 
 2020-11-23 13:49:00,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:49:00,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 9.428 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:49:00,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:49:00,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:00,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:00,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-23 13:49:00,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:49:00,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.1316 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:49:00,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50033} open  
 
 2020-11-23 13:49:00,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50033} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:49:00,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50033} closed  
 
 2020-11-23 13:49:00,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:49:00,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:02,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:02,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 13:49:02,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 13:49:02,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.1627 millis. select * from t_types  
 
 2020-11-23 13:49:02,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} open  
 
 2020-11-23 13:49:02,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} Header: [id, name]  
 
 2020-11-23 13:49:02,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} Result: [8, 方法论]  
 
 2020-11-23 13:49:02,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} Result: [9, 理论类]  
 
 2020-11-23 13:49:02,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} Result: [21, 错误日记]  
 
 2020-11-23 13:49:02,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} Result: [23, 开发日记]  
 
 2020-11-23 13:49:02,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} Result: [24, 实践论]  
 
 2020-11-23 13:49:02,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} Result: [25, 想法论]  
 
 2020-11-23 13:49:02,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50034} closed  
 
 2020-11-23 13:49:02,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:49:02,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:02,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:02,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:49:02,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:49:02,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7688 millis. select * from t_tages  
 
 2020-11-23 13:49:02,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} open  
 
 2020-11-23 13:49:02,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} Header: [id, tage]  
 
 2020-11-23 13:49:02,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} Result: [1, 学习日记]  
 
 2020-11-23 13:49:02,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} Result: [2, 错误笔记]  
 
 2020-11-23 13:49:02,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} Result: [3, 数据库笔记]  
 
 2020-11-23 13:49:02,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} Result: [4, 程序运行日记]  
 
 2020-11-23 13:49:02,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} Result: [5, 开发日记]  
 
 2020-11-23 13:49:02,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} Result: [8, 开发手册]  
 
 2020-11-23 13:49:02,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} Result: [10, 搭建日记]  
 
 2020-11-23 13:49:02,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50035} closed  
 
 2020-11-23 13:49:02,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:49:02,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:02,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:02,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:49:02,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:49:02,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.1764 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:49:02,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50036} open  
 
 2020-11-23 13:49:02,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50036} Header: [count(0)]  
 
 2020-11-23 13:49:02,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50036} Result: [2]  
 
 2020-11-23 13:49:02,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50036} closed  
 
 2020-11-23 13:49:02,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:49:02,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 13:49:02,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 13:49:02,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.3919 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:49:02,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} open  
 
 2020-11-23 13:49:02,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:49:02,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:49:02,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 3, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:49:02,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50037} closed  
 
 2020-11-23 13:49:02,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:49:02,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:03,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:03,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-23 13:49:03,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:49:03,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.7599 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:49:03,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} open  
 
 2020-11-23 13:49:03,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:49:03,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 3, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:49:03,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50038} closed  
 
 2020-11-23 13:49:03,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:49:03,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:03,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:03,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [12]  
 
 2020-11-23 13:49:03,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:49:03,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 14.0007 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:49:03,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:49:03,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:03,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:03,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-23 13:49:03,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:49:03,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.3543 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:49:03,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50039} open  
 
 2020-11-23 13:49:03,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50039} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:49:03,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50039} closed  
 
 2020-11-23 13:49:03,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:49:03,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:05,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:05,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [12]  
 
 2020-11-23 13:49:05,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 13:49:05,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.5374 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 13:49:05,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} open  
 
 2020-11-23 13:49:05,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 13:49:05,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 4, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 13:49:05,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} closed  
 
 2020-11-23 13:49:05,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 13:49:05,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:05,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:05,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [12]  
 
 2020-11-23 13:49:05,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 13:49:05,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 8.8335 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 13:49:05,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 13:49:05,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:06,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:06,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-23 13:49:06,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 13:49:06,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.6168 millis. select * from t_comment where parentcomment_id  is null and blog_id=? ORDER BY creatTime desc  
 
 2020-11-23 13:49:06,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50041} open  
 
 2020-11-23 13:49:06,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50041} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 13:49:06,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50041} closed  
 
 2020-11-23 13:49:06,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 13:49:06,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:19,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:19,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 13:49:19,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 13:49:19,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.6013 millis. select * from t_types  
 
 2020-11-23 13:49:19,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} open  
 
 2020-11-23 13:49:19,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} Header: [id, name]  
 
 2020-11-23 13:49:19,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} Result: [8, 方法论]  
 
 2020-11-23 13:49:19,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} Result: [9, 理论类]  
 
 2020-11-23 13:49:19,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} Result: [21, 错误日记]  
 
 2020-11-23 13:49:19,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} Result: [23, 开发日记]  
 
 2020-11-23 13:49:19,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} Result: [24, 实践论]  
 
 2020-11-23 13:49:19,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} Result: [25, 想法论]  
 
 2020-11-23 13:49:19,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50042} closed  
 
 2020-11-23 13:49:19,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 13:49:19,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:19,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:19,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 13:49:19,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 13:49:19,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9348 millis. select * from t_tages  
 
 2020-11-23 13:49:19,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} open  
 
 2020-11-23 13:49:19,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} Header: [id, tage]  
 
 2020-11-23 13:49:19,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} Result: [1, 学习日记]  
 
 2020-11-23 13:49:19,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} Result: [2, 错误笔记]  
 
 2020-11-23 13:49:19,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} Result: [3, 数据库笔记]  
 
 2020-11-23 13:49:19,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} Result: [4, 程序运行日记]  
 
 2020-11-23 13:49:19,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} Result: [5, 开发日记]  
 
 2020-11-23 13:49:19,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} Result: [8, 开发手册]  
 
 2020-11-23 13:49:19,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} Result: [10, 搭建日记]  
 
 2020-11-23 13:49:19,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50043} closed  
 
 2020-11-23 13:49:19,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 13:49:19,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 13:49:19,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 13:49:19,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 13:49:19,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 13:49:19,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7705 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 13:49:19,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50044} open  
 
 2020-11-23 13:49:19,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50044} Header: [count(0)]  
 
 2020-11-23 13:49:19,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50044} Result: [2]  
 
 2020-11-23 13:49:19,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50044} closed  
 
 2020-11-23 13:49:19,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 13:49:19,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 13:49:19,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 13:49:19,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.0211 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 13:49:19,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50045} open  
 
 2020-11-23 13:49:19,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50045} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 13:49:19,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50045} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 13:49:19,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50045} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 13:49:19,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50045} closed  
 
 2020-11-23 13:49:19,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 13:49:19,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:13:54,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1128} connected  
 
 2020-11-23 14:13:54,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1129} connected  
 
 2020-11-23 14:13:54,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1130} connected  
 
 2020-11-23 14:13:54,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1131} connected  
 
 2020-11-23 14:13:54,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1132} connected  
 
 2020-11-23 14:13:54,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:13:54,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:13:54,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:13:54,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:13:54,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.1903 millis. select * from t_types  
 
 2020-11-23 14:13:54,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:13:54,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:13:54,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:13:54,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:13:54,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:13:54,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:13:54,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:13:54,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:13:54,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:13:54,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:13:54,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:13:54,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:13:54,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:13:54,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:13:54,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:13:54,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3124 millis. select * from t_tages  
 
 2020-11-23 14:13:54,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:13:54,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:13:54,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:13:54,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:13:54,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:13:54,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:13:54,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:13:54,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:13:54,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:13:54,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:13:54,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:13:54,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:13:54,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:13:54,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:13:54,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:13:55,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:13:55,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:13:55,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:13:55,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.6949 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:13:55,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:13:55,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:13:55,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:13:55,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:13:55,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:13:55,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:13:55,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:13:55,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:13:55,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6363 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:13:55,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:13:55,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:13:55,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:13:55,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:13:55,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:13:55,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:13:55,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:14:08,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:14:08,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:14:08,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:14:08,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.6754 millis. select * from t_types  
 
 2020-11-23 14:14:08,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-23 14:14:08,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-23 14:14:08,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-23 14:14:08,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-23 14:14:08,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-23 14:14:08,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-23 14:14:08,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-23 14:14:08,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-23 14:14:08,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-23 14:14:08,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:14:08,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:14:08,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:14:08,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:14:08,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:14:08,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.5539 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:14:08,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-23 14:14:08,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [count(0)]  
 
 2020-11-23 14:14:08,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [2]  
 
 2020-11-23 14:14:08,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-23 14:14:08,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:14:08,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:14:08,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:14:08,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.8124 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:14:08,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} open  
 
 2020-11-23 14:14:08,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:14:08,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:14:08,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:14:08,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} closed  
 
 2020-11-23 14:14:08,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:14:08,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:17:11,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1133} connected  
 
 2020-11-23 14:17:11,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1134} connected  
 
 2020-11-23 14:17:11,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1135} connected  
 
 2020-11-23 14:17:11,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1136} connected  
 
 2020-11-23 14:17:11,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1137} connected  
 
 2020-11-23 14:17:11,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:17:11,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:17:11,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:17:11,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:17:11,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 12.0042 millis. select * from t_types  
 
 2020-11-23 14:17:11,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:17:11,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:17:11,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:17:11,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:17:11,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:17:11,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:17:11,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:17:11,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:17:11,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:17:11,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:17:11,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:17:11,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:17:11,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:17:11,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:17:11,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:17:11,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:17:11,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:17:11,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.567 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:17:11,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:17:11,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-23 14:17:11,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2]  
 
 2020-11-23 14:17:11,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:17:11,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:17:11,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:17:11,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-23 14:17:11,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-23 14:17:11,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.0682 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:17:11,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:17:11,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:17:11,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:17:11,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:17:11,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:17:11,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:17:11,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:17:14,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:17:14,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:17:14,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:17:14,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.1068 millis. select * from t_types  
 
 2020-11-23 14:17:14,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-23 14:17:14,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [id, name]  
 
 2020-11-23 14:17:14,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [8, 方法论]  
 
 2020-11-23 14:17:14,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [9, 理论类]  
 
 2020-11-23 14:17:14,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [21, 错误日记]  
 
 2020-11-23 14:17:14,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [23, 开发日记]  
 
 2020-11-23 14:17:14,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [24, 实践论]  
 
 2020-11-23 14:17:14,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [25, 想法论]  
 
 2020-11-23 14:17:14,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-23 14:17:14,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:17:14,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:17:14,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:17:14,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_tages  
 
 2020-11-23 14:17:14,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-23 14:17:14,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-23 14:17:14,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.6711 millis. select * from t_tages  
 
 2020-11-23 14:17:14,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-23 14:17:14,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, tage]  
 
 2020-11-23 14:17:14,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [1, 学习日记]  
 
 2020-11-23 14:17:14,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [2, 错误笔记]  
 
 2020-11-23 14:17:14,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [3, 数据库笔记]  
 
 2020-11-23 14:17:14,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [4, 程序运行日记]  
 
 2020-11-23 14:17:14,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [5, 开发日记]  
 
 2020-11-23 14:17:14,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [8, 开发手册]  
 
 2020-11-23 14:17:14,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-23 14:17:14,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-23 14:17:14,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:17:14,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:17:14,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:17:14,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:17:14,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:17:14,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.0673 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:17:14,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 14:17:14,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [count(0)]  
 
 2020-11-23 14:17:14,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2]  
 
 2020-11-23 14:17:14,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 14:17:14,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:17:14,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-23 14:17:14,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-23 14:17:14,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.5252 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:17:14,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 14:17:14,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:17:14,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:17:14,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:17:14,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 14:17:14,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:17:14,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:18:03,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1138} connected  
 
 2020-11-23 14:18:03,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1139} connected  
 
 2020-11-23 14:18:03,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1140} connected  
 
 2020-11-23 14:18:03,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1141} connected  
 
 2020-11-23 14:18:03,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1142} connected  
 
 2020-11-23 14:18:03,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:18:03,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:18:03,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:18:03,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:18:03,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 22.6569 millis. select * from t_types  
 
 2020-11-23 14:18:03,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:18:03,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:18:03,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:18:03,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:18:03,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:18:03,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:18:03,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:18:03,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:18:03,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:18:03,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:18:03,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:18:03,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:18:03,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:18:03,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:18:03,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:18:03,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.1598 millis. select * from t_tages  
 
 2020-11-23 14:18:03,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:18:03,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:18:03,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:18:03,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:18:03,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:18:03,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:18:03,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:18:03,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:18:03,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:18:03,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:18:03,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:18:03,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:18:03,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:18:03,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:18:03,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:18:03,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:18:03,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:18:03,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:18:03,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.9095 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:18:03,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:18:03,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:18:03,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:18:03,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:18:03,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:18:03,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:18:03,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:18:03,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:18:03,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0943 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:18:03,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:18:03,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:18:03,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:18:03,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:18:03,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:18:03,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:18:03,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:19:42,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1143} connected  
 
 2020-11-23 14:19:42,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1144} connected  
 
 2020-11-23 14:19:42,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1145} connected  
 
 2020-11-23 14:19:42,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1146} connected  
 
 2020-11-23 14:19:42,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1147} connected  
 
 2020-11-23 14:19:42,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:19:42,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:19:42,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:19:42,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:19:42,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 18.5 millis. select * from t_types  
 
 2020-11-23 14:19:42,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:19:42,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:19:42,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:19:42,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:19:42,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:19:42,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:19:42,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:19:42,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:19:42,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:19:42,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:19:42,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:19:42,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:19:42,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:19:42,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:19:42,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:19:42,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1881 millis. select * from t_tages  
 
 2020-11-23 14:19:42,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:19:42,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:19:42,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:19:42,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:19:42,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:19:42,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:19:42,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:19:42,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:19:42,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:19:42,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:19:42,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:19:42,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:19:42,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:19:42,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:19:42,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:19:42,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:19:42,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:19:42,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:19:42,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.6902 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:19:42,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:19:42,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:19:42,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:19:42,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:19:42,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:19:42,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:19:42,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:19:42,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:19:42,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.2977 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:19:42,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:19:42,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:19:42,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:19:42,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:19:42,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:19:42,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:19:42,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:21:14,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1148} connected  
 
 2020-11-23 14:21:14,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1149} connected  
 
 2020-11-23 14:21:14,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1150} connected  
 
 2020-11-23 14:21:14,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1151} connected  
 
 2020-11-23 14:21:14,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1152} connected  
 
 2020-11-23 14:21:14,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:21:14,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:21:14,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:21:14,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:21:14,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.7546 millis. select * from t_types  
 
 2020-11-23 14:21:14,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:21:14,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:21:14,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:21:14,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:21:14,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:21:14,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:21:14,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:21:14,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:21:14,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:21:14,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:21:14,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:21:14,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:21:14,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:21:14,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:21:14,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:21:14,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9027 millis. select * from t_tages  
 
 2020-11-23 14:21:14,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:21:14,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:21:14,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:21:14,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:21:14,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:21:14,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:21:14,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:21:14,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:21:14,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:21:14,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:21:14,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:21:14,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:21:14,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:21:14,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:21:14,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:21:14,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:21:14,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:21:14,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:21:14,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.733 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:21:14,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:21:14,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:21:14,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:21:14,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:21:14,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:21:14,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:21:14,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:21:14,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:21:14,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6191 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:21:14,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:21:14,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:21:14,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:21:14,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:21:14,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:21:14,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:21:14,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:21:15,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:21:15,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:21:15,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:21:15,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:21:15,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.152 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:21:15,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:21:15,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:21:15,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:21:15,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:21:15,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:21:15,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:21:15,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:21:15,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:21:15,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:21:15,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:21:15,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.0887 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:21:15,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} open  
 
 2020-11-23 14:21:15,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:21:15,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:21:15,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:21:15,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} closed  
 
 2020-11-23 14:21:15,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:21:15,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:21:39,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:21:39,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:21:39,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:21:39,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.5252 millis. select * from t_types  
 
 2020-11-23 14:21:39,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} open  
 
 2020-11-23 14:21:39,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Header: [id, name]  
 
 2020-11-23 14:21:39,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [8, 方法论]  
 
 2020-11-23 14:21:39,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [9, 理论类]  
 
 2020-11-23 14:21:39,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [21, 错误日记]  
 
 2020-11-23 14:21:39,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [23, 开发日记]  
 
 2020-11-23 14:21:39,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [24, 实践论]  
 
 2020-11-23 14:21:39,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [25, 想法论]  
 
 2020-11-23 14:21:39,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} closed  
 
 2020-11-23 14:21:39,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:21:39,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:21:39,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:21:39,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:21:39,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:21:39,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4785 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:21:39,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} open  
 
 2020-11-23 14:21:39,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Header: [count(0)]  
 
 2020-11-23 14:21:39,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [2]  
 
 2020-11-23 14:21:39,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} closed  
 
 2020-11-23 14:21:39,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:21:39,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:21:39,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:21:39,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.4461 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:21:39,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} open  
 
 2020-11-23 14:21:39,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:21:39,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:21:39,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:21:39,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} closed  
 
 2020-11-23 14:21:39,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:21:39,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:22:47,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1153} connected  
 
 2020-11-23 14:22:47,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1154} connected  
 
 2020-11-23 14:22:47,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1155} connected  
 
 2020-11-23 14:22:47,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1156} connected  
 
 2020-11-23 14:22:47,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1157} connected  
 
 2020-11-23 14:22:47,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:22:48,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:22:48,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:22:48,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:22:48,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.0253 millis. select * from t_types  
 
 2020-11-23 14:22:48,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:22:48,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:22:48,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:22:48,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:22:48,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:22:48,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:22:48,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:22:48,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:22:48,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:22:48,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:22:48,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:22:48,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:22:48,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:22:48,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:22:48,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:22:48,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:22:48,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:22:48,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.6571 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:22:48,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:22:48,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-23 14:22:48,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2]  
 
 2020-11-23 14:22:48,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:22:48,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:22:48,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:22:48,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-23 14:22:48,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-23 14:22:48,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.6162 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:22:48,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:22:48,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:22:48,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:22:48,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:22:48,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:22:48,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:22:48,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:22:51,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:22:51,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:22:51,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:22:51,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.462 millis. select * from t_types  
 
 2020-11-23 14:22:51,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-23 14:22:51,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [id, name]  
 
 2020-11-23 14:22:51,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [8, 方法论]  
 
 2020-11-23 14:22:51,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [9, 理论类]  
 
 2020-11-23 14:22:51,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [21, 错误日记]  
 
 2020-11-23 14:22:51,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [23, 开发日记]  
 
 2020-11-23 14:22:51,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [24, 实践论]  
 
 2020-11-23 14:22:51,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [25, 想法论]  
 
 2020-11-23 14:22:51,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-23 14:22:51,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:22:51,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:22:51,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:22:51,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_tages  
 
 2020-11-23 14:22:51,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-23 14:22:51,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-23 14:22:51,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.3013 millis. select * from t_tages  
 
 2020-11-23 14:22:51,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-23 14:22:51,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, tage]  
 
 2020-11-23 14:22:51,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [1, 学习日记]  
 
 2020-11-23 14:22:51,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [2, 错误笔记]  
 
 2020-11-23 14:22:51,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [3, 数据库笔记]  
 
 2020-11-23 14:22:51,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [4, 程序运行日记]  
 
 2020-11-23 14:22:51,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [5, 开发日记]  
 
 2020-11-23 14:22:51,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [8, 开发手册]  
 
 2020-11-23 14:22:51,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-23 14:22:51,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-23 14:22:51,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:22:51,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:22:51,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:22:51,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:22:51,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:22:51,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3527 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:22:51,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 14:22:51,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [count(0)]  
 
 2020-11-23 14:22:51,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2]  
 
 2020-11-23 14:22:51,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 14:22:51,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:22:51,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-23 14:22:51,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-23 14:22:51,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.3055 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:22:51,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 14:22:51,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:22:51,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:22:51,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:22:51,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 14:22:51,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:22:51,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:22:51,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:22:51,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:22:51,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:22:51,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:22:51,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.0514 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:22:51,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} open  
 
 2020-11-23 14:22:51,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:22:51,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:22:51,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:22:51,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} closed  
 
 2020-11-23 14:22:51,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:22:51,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:33,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1158} connected  
 
 2020-11-23 14:24:33,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1159} connected  
 
 2020-11-23 14:24:33,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1160} connected  
 
 2020-11-23 14:24:33,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1161} connected  
 
 2020-11-23 14:24:33,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1162} connected  
 
 2020-11-23 14:24:33,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:33,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:24:33,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:24:33,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:24:33,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.6702 millis. select * from t_types  
 
 2020-11-23 14:24:34,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:24:34,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:24:34,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:24:34,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:24:34,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:24:34,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:24:34,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:24:34,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:24:34,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:24:34,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:24:34,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:34,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:34,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:24:34,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:24:34,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:24:34,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.7177 millis. select * from t_tages  
 
 2020-11-23 14:24:34,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:24:34,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:24:34,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:24:34,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:24:34,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:24:34,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:24:34,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:24:34,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:24:34,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:24:34,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:24:34,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:24:34,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:34,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:34,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:34,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:34,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:24:34,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:24:34,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:24:34,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.8024 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:24:34,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:24:34,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:24:34,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:24:34,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:24:34,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:24:34,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:24:34,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:24:34,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:24:34,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.5012 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:24:34,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:24:34,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:24:34,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:24:34,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:24:34,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:24:34,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:24:34,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:35,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:35,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:24:35,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:24:35,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:24:35,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 7.1648 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:24:35,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:24:35,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:24:35,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:24:35,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:24:35,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:24:35,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:24:35,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:42,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:42,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:24:42,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:24:42,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.9126 millis. select * from t_types  
 
 2020-11-23 14:24:42,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} open  
 
 2020-11-23 14:24:42,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Header: [id, name]  
 
 2020-11-23 14:24:42,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [8, 方法论]  
 
 2020-11-23 14:24:42,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [9, 理论类]  
 
 2020-11-23 14:24:42,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [21, 错误日记]  
 
 2020-11-23 14:24:42,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [23, 开发日记]  
 
 2020-11-23 14:24:42,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [24, 实践论]  
 
 2020-11-23 14:24:42,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [25, 想法论]  
 
 2020-11-23 14:24:42,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} closed  
 
 2020-11-23 14:24:42,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:24:42,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:42,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:42,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:24:42,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:24:42,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7397 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:24:42,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 14:24:42,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-23 14:24:42,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-23 14:24:42,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 14:24:42,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:24:42,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:24:42,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:24:42,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.3813 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:24:42,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-23 14:24:42,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:24:42,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:24:42,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:24:42,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-23 14:24:42,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:24:42,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:46,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:46,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:24:46,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:24:46,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.0195 millis. select * from t_tages  
 
 2020-11-23 14:24:46,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} open  
 
 2020-11-23 14:24:46,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Header: [id, tage]  
 
 2020-11-23 14:24:46,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [1, 学习日记]  
 
 2020-11-23 14:24:46,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [2, 错误笔记]  
 
 2020-11-23 14:24:46,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [3, 数据库笔记]  
 
 2020-11-23 14:24:46,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [4, 程序运行日记]  
 
 2020-11-23 14:24:46,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [5, 开发日记]  
 
 2020-11-23 14:24:46,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [8, 开发手册]  
 
 2020-11-23 14:24:46,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [10, 搭建日记]  
 
 2020-11-23 14:24:46,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} closed  
 
 2020-11-23 14:24:46,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:24:46,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:46,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:46,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:24:46,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:24:46,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2252 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:24:46,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} open  
 
 2020-11-23 14:24:46,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} Header: [count(0)]  
 
 2020-11-23 14:24:46,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} Result: [2]  
 
 2020-11-23 14:24:46,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} closed  
 
 2020-11-23 14:24:46,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:24:46,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:24:46,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:24:46,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0751 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:24:46,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} open  
 
 2020-11-23 14:24:46,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:24:46,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:24:46,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:24:46,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} closed  
 
 2020-11-23 14:24:46,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:24:46,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:54,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:54,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:24:54,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:24:54,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.8074 millis. select * from t_types  
 
 2020-11-23 14:24:54,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} open  
 
 2020-11-23 14:24:54,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} Header: [id, name]  
 
 2020-11-23 14:24:54,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} Result: [8, 方法论]  
 
 2020-11-23 14:24:54,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} Result: [9, 理论类]  
 
 2020-11-23 14:24:54,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} Result: [21, 错误日记]  
 
 2020-11-23 14:24:54,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} Result: [23, 开发日记]  
 
 2020-11-23 14:24:54,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} Result: [24, 实践论]  
 
 2020-11-23 14:24:54,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} Result: [25, 想法论]  
 
 2020-11-23 14:24:54,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50011} closed  
 
 2020-11-23 14:24:54,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:24:54,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:54,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:54,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:24:54,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:24:54,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.4617 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:24:54,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} open  
 
 2020-11-23 14:24:54,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} Header: [count(0)]  
 
 2020-11-23 14:24:54,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} Result: [2]  
 
 2020-11-23 14:24:54,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} closed  
 
 2020-11-23 14:24:54,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:24:54,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:24:54,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:24:54,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.7238 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:24:54,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} open  
 
 2020-11-23 14:24:54,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:24:54,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:24:54,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:24:54,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} closed  
 
 2020-11-23 14:24:54,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:24:54,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:55,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:55,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:24:55,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:24:55,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.3129 millis. select * from t_types  
 
 2020-11-23 14:24:55,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} open  
 
 2020-11-23 14:24:55,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} Header: [id, name]  
 
 2020-11-23 14:24:55,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} Result: [8, 方法论]  
 
 2020-11-23 14:24:55,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} Result: [9, 理论类]  
 
 2020-11-23 14:24:55,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} Result: [21, 错误日记]  
 
 2020-11-23 14:24:55,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} Result: [23, 开发日记]  
 
 2020-11-23 14:24:55,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} Result: [24, 实践论]  
 
 2020-11-23 14:24:55,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} Result: [25, 想法论]  
 
 2020-11-23 14:24:55,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50014} closed  
 
 2020-11-23 14:24:55,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:24:55,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:55,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:55,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:24:55,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:24:55,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8529 millis. select * from t_tages  
 
 2020-11-23 14:24:55,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} open  
 
 2020-11-23 14:24:55,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} Header: [id, tage]  
 
 2020-11-23 14:24:55,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} Result: [1, 学习日记]  
 
 2020-11-23 14:24:55,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} Result: [2, 错误笔记]  
 
 2020-11-23 14:24:55,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} Result: [3, 数据库笔记]  
 
 2020-11-23 14:24:55,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} Result: [4, 程序运行日记]  
 
 2020-11-23 14:24:55,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} Result: [5, 开发日记]  
 
 2020-11-23 14:24:55,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} Result: [8, 开发手册]  
 
 2020-11-23 14:24:55,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} Result: [10, 搭建日记]  
 
 2020-11-23 14:24:55,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50015} closed  
 
 2020-11-23 14:24:55,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:24:55,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:55,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:55,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:24:55,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:24:55,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4692 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:24:55,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50016} open  
 
 2020-11-23 14:24:55,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50016} Header: [count(0)]  
 
 2020-11-23 14:24:55,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50016} Result: [2]  
 
 2020-11-23 14:24:55,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50016} closed  
 
 2020-11-23 14:24:55,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:24:55,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:24:55,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:24:55,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.6115 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:24:55,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50017} open  
 
 2020-11-23 14:24:55,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50017} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:24:55,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50017} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:24:55,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50017} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:24:55,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50017} closed  
 
 2020-11-23 14:24:55,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:24:55,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:24:55,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:24:55,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:24:55,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:24:55,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.235 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:24:55,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50018} open  
 
 2020-11-23 14:24:55,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50018} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:24:55,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50018} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:24:55,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50018} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:24:55,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50018} closed  
 
 2020-11-23 14:24:55,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:24:55,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:00,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1163} connected  
 
 2020-11-23 14:26:00,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1164} connected  
 
 2020-11-23 14:26:00,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1165} connected  
 
 2020-11-23 14:26:00,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1166} connected  
 
 2020-11-23 14:26:00,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1167} connected  
 
 2020-11-23 14:26:00,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:01,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:26:01,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:26:01,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:26:01,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.9156 millis. select * from t_types  
 
 2020-11-23 14:26:01,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:26:01,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:26:01,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:26:01,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:26:01,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:26:01,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:26:01,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:26:01,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:26:01,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:26:01,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:26:01,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:01,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:01,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:26:01,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:26:01,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:26:01,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9776 millis. select * from t_tages  
 
 2020-11-23 14:26:01,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:26:01,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:26:01,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:26:01,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:26:01,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:26:01,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:26:01,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:26:01,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:26:01,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:26:01,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:26:01,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:26:01,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:01,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:01,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:01,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:01,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:26:01,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:26:01,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:26:01,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8387 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:26:01,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:26:01,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:26:01,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:26:01,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:26:01,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:26:01,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:26:01,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:26:01,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:26:01,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.4824 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:26:01,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:26:01,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:26:01,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:26:01,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:26:01,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:26:01,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:26:01,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:01,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:01,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:26:01,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:26:01,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:26:01,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.7901 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:26:01,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:26:01,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:26:01,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:26:01,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:26:01,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:26:01,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:26:01,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:05,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:06,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:26:06,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:26:06,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.0075 millis. select * from t_types  
 
 2020-11-23 14:26:06,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} open  
 
 2020-11-23 14:26:06,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Header: [id, name]  
 
 2020-11-23 14:26:06,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [8, 方法论]  
 
 2020-11-23 14:26:06,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [9, 理论类]  
 
 2020-11-23 14:26:06,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [21, 错误日记]  
 
 2020-11-23 14:26:06,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [23, 开发日记]  
 
 2020-11-23 14:26:06,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [24, 实践论]  
 
 2020-11-23 14:26:06,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [25, 想法论]  
 
 2020-11-23 14:26:06,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} closed  
 
 2020-11-23 14:26:06,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:26:06,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:06,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:06,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:26:06,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:26:06,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.6481 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:26:06,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 14:26:06,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-23 14:26:06,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-23 14:26:06,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 14:26:06,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:26:06,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:26:06,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:26:06,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.4526 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:26:06,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-23 14:26:06,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:26:06,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:26:06,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:26:06,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-23 14:26:06,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:26:06,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:06,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:06,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:26:06,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:26:06,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.5005 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:26:06,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-23 14:26:06,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:26:06,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:26:06,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:26:06,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-23 14:26:06,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:26:06,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:08,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:08,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:26:08,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:26:08,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3056 millis. select * from t_tages  
 
 2020-11-23 14:26:08,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} open  
 
 2020-11-23 14:26:08,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Header: [id, tage]  
 
 2020-11-23 14:26:08,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [1, 学习日记]  
 
 2020-11-23 14:26:08,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [2, 错误笔记]  
 
 2020-11-23 14:26:08,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [3, 数据库笔记]  
 
 2020-11-23 14:26:08,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [4, 程序运行日记]  
 
 2020-11-23 14:26:08,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [5, 开发日记]  
 
 2020-11-23 14:26:08,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [8, 开发手册]  
 
 2020-11-23 14:26:08,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [10, 搭建日记]  
 
 2020-11-23 14:26:08,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} closed  
 
 2020-11-23 14:26:08,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:26:08,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:08,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:08,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:26:08,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:26:08,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2509 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:26:08,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} open  
 
 2020-11-23 14:26:08,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Header: [count(0)]  
 
 2020-11-23 14:26:08,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [2]  
 
 2020-11-23 14:26:08,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} closed  
 
 2020-11-23 14:26:08,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:26:08,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:26:08,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:26:08,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.1104 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:26:08,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} open  
 
 2020-11-23 14:26:08,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:26:08,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:26:08,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:26:08,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} closed  
 
 2020-11-23 14:26:08,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:26:08,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:26:08,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:26:08,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:26:08,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:26:08,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.142 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:26:08,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} open  
 
 2020-11-23 14:26:08,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:26:08,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:26:08,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:26:08,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} closed  
 
 2020-11-23 14:26:08,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:26:08,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:30:30,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1168} connected  
 
 2020-11-23 14:30:30,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1169} connected  
 
 2020-11-23 14:30:30,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1170} connected  
 
 2020-11-23 14:30:30,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1171} connected  
 
 2020-11-23 14:30:30,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1172} connected  
 
 2020-11-23 14:30:30,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:30:31,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-23 14:30:31,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-23 14:30:31,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-23 14:30:31,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 22.7525 millis. select * from t_user where username=?  
 
 2020-11-23 14:30:31,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:30:31,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 14:30:31,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 14:30:31,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:30:31,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:30:31,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:30:31,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:30:31,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:30:31,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:30:31,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:30:31,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.7405 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:30:31,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:30:31,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:30:31,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:30:31,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:30:31,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:30:31,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:30:31,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:30:32,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:30:32,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:30:32,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:30:32,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.6592 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:30:32,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} open  
 
 2020-11-23 14:30:32,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:30:32,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:30:32,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:30:32,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} closed  
 
 2020-11-23 14:30:33,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:30:33,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:30:35,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:30:35,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_tages  
 
 2020-11-23 14:30:35,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:30:35,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:30:35,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8303 millis. select * from t_tages  
 
 2020-11-23 14:30:35,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} open  
 
 2020-11-23 14:30:35,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Header: [id, tage]  
 
 2020-11-23 14:30:35,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [1, 学习日记]  
 
 2020-11-23 14:30:35,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-23 14:30:35,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-23 14:30:35,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-23 14:30:35,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [5, 开发日记]  
 
 2020-11-23 14:30:35,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [8, 开发手册]  
 
 2020-11-23 14:30:35,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [10, 搭建日记]  
 
 2020-11-23 14:30:35,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} closed  
 
 2020-11-23 14:30:35,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:30:35,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:30:35,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:30:35,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_types  
 
 2020-11-23 14:30:35,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-23 14:30:35,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-23 14:30:35,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.8898 millis. select * from t_types  
 
 2020-11-23 14:30:35,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-23 14:30:35,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, name]  
 
 2020-11-23 14:30:35,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [8, 方法论]  
 
 2020-11-23 14:30:35,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [9, 理论类]  
 
 2020-11-23 14:30:35,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [21, 错误日记]  
 
 2020-11-23 14:30:35,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [23, 开发日记]  
 
 2020-11-23 14:30:35,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [24, 实践论]  
 
 2020-11-23 14:30:35,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [25, 想法论]  
 
 2020-11-23 14:30:35,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-23 14:30:35,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:30:35,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:30:42,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:30:42,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 14:30:42,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:30:42,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:30:42,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.1335 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 14:30:42,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} open  
 
 2020-11-23 14:30:42,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Header: [year]  
 
 2020-11-23 14:30:42,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Result: [2020]  
 
 2020-11-23 14:30:42,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} closed  
 
 2020-11-23 14:30:42,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:30:42,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:30:42,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:30:42,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 14:30:42,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [2020]  
 
 2020-11-23 14:30:42,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 14:30:42,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.7478 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 14:30:42,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} open  
 
 2020-11-23 14:30:42,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} Header: [id, title, updatetime, flag]  
 
 2020-11-23 14:30:42,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 14:30:42,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 14:30:42,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50006} closed  
 
 2020-11-23 14:30:42,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 14:30:42,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:21,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1173} connected  
 
 2020-11-23 14:32:21,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1174} connected  
 
 2020-11-23 14:32:21,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1175} connected  
 
 2020-11-23 14:32:21,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1176} connected  
 
 2020-11-23 14:32:21,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1177} connected  
 
 2020-11-23 14:32:21,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:21,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-23 14:32:21,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-23 14:32:21,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-23 14:32:21,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.0654 millis. select * from t_user where username=?  
 
 2020-11-23 14:32:21,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:32:21,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 14:32:21,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 14:32:21,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:32:21,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:32:21,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:21,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:21,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:21,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:32:21,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:32:21,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8912 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:21,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:32:21,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:21,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:21,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:21,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:32:21,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:32:21,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:21,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:21,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:32:21,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:32:21,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.2638 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:21,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} open  
 
 2020-11-23 14:32:21,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:21,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:21,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:21,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} closed  
 
 2020-11-23 14:32:21,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:32:21,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:24,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:24,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:24,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:24,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_types  
 
 2020-11-23 14:32:24,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:32:24,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:32:24,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 10.1553 millis. SELECT count(0) FROM t_types  
 
 2020-11-23 14:32:24,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} open  
 
 2020-11-23 14:32:24,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Header: [count(0)]  
 
 2020-11-23 14:32:24,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [6]  
 
 2020-11-23 14:32:24,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} closed  
 
 2020-11-23 14:32:24,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:32:24,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_types LIMIT ?   
 
 2020-11-23 14:32:24,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [5]  
 
 2020-11-23 14:32:24,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:32:24,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.9602 millis. select * from t_types LIMIT ?   
 
 2020-11-23 14:32:24,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-23 14:32:24,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, name]  
 
 2020-11-23 14:32:24,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [8, 方法论]  
 
 2020-11-23 14:32:24,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [9, 理论类]  
 
 2020-11-23 14:32:24,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [21, 错误日记]  
 
 2020-11-23 14:32:24,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [23, 开发日记]  
 
 2020-11-23 14:32:24,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [24, 实践论]  
 
 2020-11-23 14:32:24,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-23 14:32:24,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:32:24,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:24,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:24,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:32:24,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:32:24,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.5177 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:24,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 14:32:24,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:24,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:24,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:24,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 14:32:24,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:32:24,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:26,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:26,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT count(0) FROM t_tages  
 
 2020-11-23 14:32:26,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:32:26,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:32:26,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.3214 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 14:32:26,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} open  
 
 2020-11-23 14:32:26,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Header: [count(0)]  
 
 2020-11-23 14:32:26,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [7]  
 
 2020-11-23 14:32:26,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} closed  
 
 2020-11-23 14:32:26,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:32:26,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_tages LIMIT ?   
 
 2020-11-23 14:32:26,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [5]  
 
 2020-11-23 14:32:26,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 14:32:26,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.8483 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 14:32:26,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} open  
 
 2020-11-23 14:32:26,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Header: [id, tage]  
 
 2020-11-23 14:32:26,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [1, 学习日记]  
 
 2020-11-23 14:32:26,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [2, 错误笔记]  
 
 2020-11-23 14:32:26,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [3, 数据库笔记]  
 
 2020-11-23 14:32:26,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [4, 程序运行日记]  
 
 2020-11-23 14:32:26,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [5, 开发日记]  
 
 2020-11-23 14:32:26,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} closed  
 
 2020-11-23 14:32:26,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 14:32:26,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:26,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:26,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:32:26,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:32:26,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7692 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:26,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} open  
 
 2020-11-23 14:32:26,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:26,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 5, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:26,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:26,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} closed  
 
 2020-11-23 14:32:26,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:32:26,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:28,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:28,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:32:28,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-23 14:32:28,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 14:32:28,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 5.0848 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:32:28,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} open  
 
 2020-11-23 14:32:28,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:32:28,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 5, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:32:28,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50009} closed  
 
 2020-11-23 14:32:28,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 14:32:28,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:28,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:28,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:32:28,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [12]  
 
 2020-11-23 14:32:28,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 14:32:28,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 7.4845 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:32:28,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 14:32:28,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:28,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:28,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:32:28,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:32:28,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.7403 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:28,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} open  
 
 2020-11-23 14:32:28,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:28,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 6, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:28,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:28,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} closed  
 
 2020-11-23 14:32:28,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:32:28,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:28,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:28,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:32:28,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [12]  
 
 2020-11-23 14:32:28,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:32:28,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.3714 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:32:28,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50011} open  
 
 2020-11-23 14:32:28,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50011} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:32:28,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50011} closed  
 
 2020-11-23 14:32:28,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:32:28,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:38,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:38,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. select * from t_types  
 
 2020-11-23 14:32:38,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : []  
 
 2020-11-23 14:32:38,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : []  
 
 2020-11-23 14:32:38,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.9335 millis. select * from t_types  
 
 2020-11-23 14:32:38,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} open  
 
 2020-11-23 14:32:38,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Header: [id, name]  
 
 2020-11-23 14:32:38,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [8, 方法论]  
 
 2020-11-23 14:32:38,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [9, 理论类]  
 
 2020-11-23 14:32:38,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [21, 错误日记]  
 
 2020-11-23 14:32:38,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [23, 开发日记]  
 
 2020-11-23 14:32:38,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [24, 实践论]  
 
 2020-11-23 14:32:38,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [25, 想法论]  
 
 2020-11-23 14:32:38,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} closed  
 
 2020-11-23 14:32:38,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-23 14:32:38,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:38,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:38,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. select * from t_tages  
 
 2020-11-23 14:32:38,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : []  
 
 2020-11-23 14:32:38,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : []  
 
 2020-11-23 14:32:38,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 2.0631 millis. select * from t_tages  
 
 2020-11-23 14:32:38,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} open  
 
 2020-11-23 14:32:38,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} Header: [id, tage]  
 
 2020-11-23 14:32:38,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} Result: [1, 学习日记]  
 
 2020-11-23 14:32:38,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} Result: [2, 错误笔记]  
 
 2020-11-23 14:32:38,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} Result: [3, 数据库笔记]  
 
 2020-11-23 14:32:38,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} Result: [4, 程序运行日记]  
 
 2020-11-23 14:32:38,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} Result: [5, 开发日记]  
 
 2020-11-23 14:32:38,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} Result: [8, 开发手册]  
 
 2020-11-23 14:32:38,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} Result: [10, 搭建日记]  
 
 2020-11-23 14:32:38,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50013} closed  
 
 2020-11-23 14:32:38,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-23 14:32:38,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:38,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:38,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:32:38,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : []  
 
 2020-11-23 14:32:38,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : []  
 
 2020-11-23 14:32:38,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 2.5971 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:32:38,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50014} open  
 
 2020-11-23 14:32:38,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50014} Header: [count(0)]  
 
 2020-11-23 14:32:38,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50014} Result: [2]  
 
 2020-11-23 14:32:38,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50014} closed  
 
 2020-11-23 14:32:38,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-23 14:32:38,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:32:38,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [4]  
 
 2020-11-23 14:32:38,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER]  
 
 2020-11-23 14:32:38,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 3.244 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:32:38,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50015} open  
 
 2020-11-23 14:32:38,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50015} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:32:38,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:32:38,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 6, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:32:38,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50015} closed  
 
 2020-11-23 14:32:38,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-23 14:32:38,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:38,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:38,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:32:38,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:32:38,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3013 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:38,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} open  
 
 2020-11-23 14:32:38,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:38,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 6, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:38,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:38,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} closed  
 
 2020-11-23 14:32:38,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:32:38,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:42,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:42,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [12]  
 
 2020-11-23 14:32:42,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 14:32:42,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 31.3639 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:32:42,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} open  
 
 2020-11-23 14:32:42,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:32:42,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 6, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:32:42,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50017} closed  
 
 2020-11-23 14:32:42,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 14:32:42,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:42,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:42,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [12]  
 
 2020-11-23 14:32:42,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 14:32:42,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 8.237 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:32:42,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 14:32:42,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:42,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:42,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:32:42,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:32:42,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.886 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:42,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} open  
 
 2020-11-23 14:32:42,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:42,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:42,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:42,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} closed  
 
 2020-11-23 14:32:42,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:32:42,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:32:42,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:42,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:32:42,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} Parameters : [12]  
 
 2020-11-23 14:32:42,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} Types : [INTEGER]  
 
 2020-11-23 14:32:42,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} executed. 4.1623 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:32:42,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50019} open  
 
 2020-11-23 14:32:42,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50019} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:32:42,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50019} closed  
 
 2020-11-23 14:32:42,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} clearParameters.   
 
 2020-11-23 14:32:42,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:32:47,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:32:47,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} created. select * from t_types  
 
 2020-11-23 14:32:47,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} Parameters : []  
 
 2020-11-23 14:32:47,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} Types : []  
 
 2020-11-23 14:32:47,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} executed. 2.03 millis. select * from t_types  
 
 2020-11-23 14:32:47,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} open  
 
 2020-11-23 14:32:47,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} Header: [id, name]  
 
 2020-11-23 14:32:47,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} Result: [8, 方法论]  
 
 2020-11-23 14:32:47,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} Result: [9, 理论类]  
 
 2020-11-23 14:32:47,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} Result: [21, 错误日记]  
 
 2020-11-23 14:32:47,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} Result: [23, 开发日记]  
 
 2020-11-23 14:32:47,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} Result: [24, 实践论]  
 
 2020-11-23 14:32:47,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} Result: [25, 想法论]  
 
 2020-11-23 14:32:47,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50020} closed  
 
 2020-11-23 14:32:47,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} clearParameters.   
 
 2020-11-23 14:32:47,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:32:47,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:32:47,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} created. select * from t_tages  
 
 2020-11-23 14:32:47,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} Parameters : []  
 
 2020-11-23 14:32:47,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} Types : []  
 
 2020-11-23 14:32:47,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} executed. 2.111 millis. select * from t_tages  
 
 2020-11-23 14:32:47,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} open  
 
 2020-11-23 14:32:47,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} Header: [id, tage]  
 
 2020-11-23 14:32:47,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} Result: [1, 学习日记]  
 
 2020-11-23 14:32:47,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} Result: [2, 错误笔记]  
 
 2020-11-23 14:32:47,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} Result: [3, 数据库笔记]  
 
 2020-11-23 14:32:47,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} Result: [4, 程序运行日记]  
 
 2020-11-23 14:32:47,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} Result: [5, 开发日记]  
 
 2020-11-23 14:32:47,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} Result: [8, 开发手册]  
 
 2020-11-23 14:32:47,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} Result: [10, 搭建日记]  
 
 2020-11-23 14:32:47,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20015, rs-50021} closed  
 
 2020-11-23 14:32:47,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} clearParameters.   
 
 2020-11-23 14:32:47,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:32:47,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:32:47,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:32:47,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} Parameters : []  
 
 2020-11-23 14:32:47,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} Types : []  
 
 2020-11-23 14:32:47,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} executed. 2.735 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:32:47,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50022} open  
 
 2020-11-23 14:32:47,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50022} Header: [count(0)]  
 
 2020-11-23 14:32:47,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50022} Result: [2]  
 
 2020-11-23 14:32:47,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20016, rs-50022} closed  
 
 2020-11-23 14:32:47,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20016} clearParameters.   
 
 2020-11-23 14:32:47,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:32:47,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} Parameters : [4]  
 
 2020-11-23 14:32:47,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} Types : [INTEGER]  
 
 2020-11-23 14:32:47,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} executed. 2.8967 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:32:47,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50023} open  
 
 2020-11-23 14:32:47,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50023} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:32:47,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50023} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:32:47,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50023} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:32:47,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20017, rs-50023} closed  
 
 2020-11-23 14:32:47,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20017} clearParameters.   
 
 2020-11-23 14:32:47,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:32:47,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:32:47,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:47,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} Parameters : []  
 
 2020-11-23 14:32:47,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} Types : []  
 
 2020-11-23 14:32:47,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} executed. 1.4225 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:47,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50024} open  
 
 2020-11-23 14:32:47,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50024} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:47,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50024} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:47,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50024} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:47,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50024} closed  
 
 2020-11-23 14:32:47,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} clearParameters.   
 
 2020-11-23 14:32:47,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:32:47,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:32:47,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20019} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:32:47,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20019} Parameters : [11]  
 
 2020-11-23 14:32:47,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20019} Types : [INTEGER]  
 
 2020-11-23 14:32:47,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20019} executed. 5.1725 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:32:47,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20019, rs-50025} open  
 
 2020-11-23 14:32:47,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20019, rs-50025} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:32:47,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20019, rs-50025} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 7, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:32:47,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20019, rs-50025} closed  
 
 2020-11-23 14:32:47,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20019} clearParameters.   
 
 2020-11-23 14:32:47,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:32:47,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:32:47,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20020} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:32:47,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20020} Parameters : [11]  
 
 2020-11-23 14:32:47,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20020} Types : [INTEGER]  
 
 2020-11-23 14:32:47,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20020} executed. 8.1806 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:32:47,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20020} clearParameters.   
 
 2020-11-23 14:32:47,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:32:48,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:32:48,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} Parameters : []  
 
 2020-11-23 14:32:48,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} Types : []  
 
 2020-11-23 14:32:48,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} executed. 1.7712 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:32:48,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} open  
 
 2020-11-23 14:32:48,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:32:48,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:32:48,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 8, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:32:48,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20018, rs-50026} closed  
 
 2020-11-23 14:32:48,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:48,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20018} clearParameters.   
 
 2020-11-23 14:32:48,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [11]  
 
 2020-11-23 14:32:48,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:32:48,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:32:48,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.1598 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:32:48,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50027} open  
 
 2020-11-23 14:32:48,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50027} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:32:48,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50027} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 14:32:48,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50027} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 14:32:48,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50027} closed  
 
 2020-11-23 14:32:48,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:32:48,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:48,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:48,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:32:48,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} Parameters : [11]  
 
 2020-11-23 14:32:48,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} Types : [INTEGER]  
 
 2020-11-23 14:32:48,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} executed. 1.8419 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:32:48,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20021, rs-50028} open  
 
 2020-11-23 14:32:48,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20021, rs-50028} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:32:48,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20021, rs-50028} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 14:32:48,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20021, rs-50028} closed  
 
 2020-11-23 14:32:48,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} clearParameters.   
 
 2020-11-23 14:32:48,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:32:48,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:32:48,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} Parameters : [9]  
 
 2020-11-23 14:32:48,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} Types : [INTEGER]  
 
 2020-11-23 14:32:48,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} executed. 2.2474 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:32:48,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20021, rs-50029} open  
 
 2020-11-23 14:32:48,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20021, rs-50029} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:32:48,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20021, rs-50029} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 14:32:48,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20021, rs-50029} closed  
 
 2020-11-23 14:32:48,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20021} clearParameters.   
 
 2020-11-23 14:32:48,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:32,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1178} connected  
 
 2020-11-23 14:35:32,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1179} connected  
 
 2020-11-23 14:35:32,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1180} connected  
 
 2020-11-23 14:35:32,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1181} connected  
 
 2020-11-23 14:35:32,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1182} connected  
 
 2020-11-23 14:35:32,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:33,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:35:33,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:35:33,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:35:33,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.3819 millis. select * from t_types  
 
 2020-11-23 14:35:33,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:35:33,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:35:33,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:35:33,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:35:33,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:35:33,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:35:33,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:35:33,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:35:33,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:35:33,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:35:33,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:33,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:33,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:35:33,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:35:33,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:35:33,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0042 millis. select * from t_tages  
 
 2020-11-23 14:35:33,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:35:33,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:35:33,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:35:33,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:35:33,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:35:33,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:35:33,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:35:33,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:35:33,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:35:33,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:35:33,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:35:33,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:33,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:33,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:33,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:33,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:35:33,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:35:33,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:35:33,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7978 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:35:33,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:35:33,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:35:33,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:35:33,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:35:33,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:35:33,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:35:33,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:35:33,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:35:33,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.2768 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:35:33,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:35:33,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:35:33,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 8, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:35:33,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:35:33,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:35:33,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:35:33,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:33,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:33,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:35:33,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:35:33,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 20.7312 millis. select * from t_types  
 
 2020-11-23 14:35:33,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-23 14:35:33,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-23 14:35:33,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-23 14:35:33,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-23 14:35:33,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-23 14:35:33,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-23 14:35:33,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-23 14:35:33,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-23 14:35:33,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-23 14:35:33,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:35:33,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:33,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:33,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:35:33,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:35:33,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.6187 millis. select * from t_tages  
 
 2020-11-23 14:35:33,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 14:35:33,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-23 14:35:33,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-23 14:35:33,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-23 14:35:33,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-23 14:35:33,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-23 14:35:33,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-23 14:35:33,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-23 14:35:33,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-23 14:35:33,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 14:35:33,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:35:33,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:33,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:33,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:35:33,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:35:33,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.729 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:35:33,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 14:35:33,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-23 14:35:33,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-23 14:35:33,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 14:35:33,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:35:33,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:35:33,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:35:33,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.1883 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:35:33,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-23 14:35:33,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:35:33,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 8, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:35:33,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:35:33,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-23 14:35:33,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:35:33,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:34,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:34,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:35:34,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:35:34,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:35:34,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.1606 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:35:34,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-23 14:35:34,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:35:34,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:35:34,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 8, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:35:34,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-23 14:35:34,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:35:34,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:35,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:35,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:35:35,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 14:35:35,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 14:35:35,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.2741 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:35:35,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-23 14:35:35,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:35:35,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 8, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:35:35,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-23 14:35:35,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 14:35:35,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:35,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:35,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:35:35,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 14:35:35,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 14:35:35,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 8.7218 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:35:35,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 14:35:35,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:35,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:35,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:35:35,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:35:35,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.8684 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:35:35,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} open  
 
 2020-11-23 14:35:35,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:35:35,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:35:35,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:35:35,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} closed  
 
 2020-11-23 14:35:35,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:35:35,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:35,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:35,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:35:35,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 14:35:35,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 14:35:35,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.9884 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:35:35,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} open  
 
 2020-11-23 14:35:35,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:35:35,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 14:35:35,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 14:35:35,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} closed  
 
 2020-11-23 14:35:35,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 14:35:35,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:35,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:35,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:35:35,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [11]  
 
 2020-11-23 14:35:35,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:35:35,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 1.4495 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:35:35,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} open  
 
 2020-11-23 14:35:35,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:35:35,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 14:35:35,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} closed  
 
 2020-11-23 14:35:35,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:35:35,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:35,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:35,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [9]  
 
 2020-11-23 14:35:35,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:35:35,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.0293 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:35:35,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} open  
 
 2020-11-23 14:35:35,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:35:35,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 14:35:35,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} closed  
 
 2020-11-23 14:35:35,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:35:35,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:48,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:48,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. select * from t_user where username=?  
 
 2020-11-23 14:35:48,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [admin]  
 
 2020-11-23 14:35:48,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [VARCHAR]  
 
 2020-11-23 14:35:48,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 1.3074 millis. select * from t_user where username=?  
 
 2020-11-23 14:35:48,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} open  
 
 2020-11-23 14:35:48,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 14:35:48,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Result: [4, admin, $2a$10$77KRGBQYXA3LOR.2plwkGex4Ns9uhk0EFw7LwGvKCqFKvRCeYFXne, 24354666@qq.com, 2, https://picsum.photos/seed/picsum/200/300, 2020-11-14 05:06:04.0, 2020-11-14 05:06:04.0]  
 
 2020-11-23 14:35:48,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} closed  
 
 2020-11-23 14:35:48,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-23 14:35:48,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:48,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:48,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:35:48,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:35:48,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.6021 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:35:48,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} open  
 
 2020-11-23 14:35:48,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:35:48,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:35:48,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:35:48,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} closed  
 
 2020-11-23 14:35:48,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:35:48,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:48,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:48,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:35:48,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:35:48,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 4.8875 millis. select * from t_types  
 
 2020-11-23 14:35:48,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} open  
 
 2020-11-23 14:35:48,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Header: [id, name]  
 
 2020-11-23 14:35:48,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [8, 方法论]  
 
 2020-11-23 14:35:48,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [9, 理论类]  
 
 2020-11-23 14:35:48,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [21, 错误日记]  
 
 2020-11-23 14:35:48,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [23, 开发日记]  
 
 2020-11-23 14:35:48,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [24, 实践论]  
 
 2020-11-23 14:35:48,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [25, 想法论]  
 
 2020-11-23 14:35:49,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} closed  
 
 2020-11-23 14:35:49,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:35:49,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:49,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:49,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:35:49,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:35:49,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.5267 millis. select * from t_tages  
 
 2020-11-23 14:35:49,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} open  
 
 2020-11-23 14:35:49,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Header: [id, tage]  
 
 2020-11-23 14:35:49,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [1, 学习日记]  
 
 2020-11-23 14:35:49,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [2, 错误笔记]  
 
 2020-11-23 14:35:49,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [3, 数据库笔记]  
 
 2020-11-23 14:35:49,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [4, 程序运行日记]  
 
 2020-11-23 14:35:49,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [5, 开发日记]  
 
 2020-11-23 14:35:49,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [8, 开发手册]  
 
 2020-11-23 14:35:49,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [10, 搭建日记]  
 
 2020-11-23 14:35:49,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} closed  
 
 2020-11-23 14:35:49,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:35:49,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:49,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:49,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:35:49,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:35:49,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.8604 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:35:49,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} open  
 
 2020-11-23 14:35:49,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Header: [count(0)]  
 
 2020-11-23 14:35:49,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [2]  
 
 2020-11-23 14:35:49,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} closed  
 
 2020-11-23 14:35:49,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:35:49,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:35:49,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:35:49,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.7376 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:35:49,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} open  
 
 2020-11-23 14:35:49,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:35:49,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 9, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:35:49,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:35:49,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} closed  
 
 2020-11-23 14:35:49,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:35:49,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:49,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:49,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:35:49,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:35:49,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.3555 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:35:49,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} open  
 
 2020-11-23 14:35:49,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:35:49,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:35:49,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:35:49,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} closed  
 
 2020-11-23 14:35:49,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:35:49,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:53,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:53,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 14:35:53,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 14:35:53,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.0335 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:35:53,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} open  
 
 2020-11-23 14:35:53,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:35:53,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 9, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:35:53,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} closed  
 
 2020-11-23 14:35:53,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 14:35:53,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:53,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:53,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 14:35:53,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 14:35:53,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 15.5025 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:35:53,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 14:35:53,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:53,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:53,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:35:53,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:35:53,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6646 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:35:53,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50022} open  
 
 2020-11-23 14:35:53,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50022} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:35:53,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50022} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:35:53,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50022} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 10, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:35:53,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50022} closed  
 
 2020-11-23 14:35:53,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:35:53,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:53,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:53,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 14:35:53,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 14:35:53,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.7912 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:35:53,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} open  
 
 2020-11-23 14:35:53,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:35:53,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 14:35:53,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 14:35:53,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} closed  
 
 2020-11-23 14:35:53,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 14:35:53,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:53,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:53,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [11]  
 
 2020-11-23 14:35:53,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:35:53,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 1.4612 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:35:53,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} open  
 
 2020-11-23 14:35:53,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:35:53,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 14:35:53,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} closed  
 
 2020-11-23 14:35:53,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:35:53,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:35:53,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:35:53,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [9]  
 
 2020-11-23 14:35:53,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:35:53,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 1.9642 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:35:53,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} open  
 
 2020-11-23 14:35:53,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:35:53,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 14:35:53,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} closed  
 
 2020-11-23 14:35:53,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:35:53,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:37:29,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1183} connected  
 
 2020-11-23 14:37:29,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1184} connected  
 
 2020-11-23 14:37:29,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1185} connected  
 
 2020-11-23 14:37:29,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1186} connected  
 
 2020-11-23 14:37:29,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1187} connected  
 
 2020-11-23 14:37:29,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:37:30,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:37:30,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-23 14:37:30,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-23 14:37:30,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.1083 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:37:30,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:37:30,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:37:30,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 10, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:37:30,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:37:30,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:37:30,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:37:30,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:37:30,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:37:30,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-23 14:37:30,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-23 14:37:30,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 11.8046 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:37:30,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:37:30,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:37:30,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:37:30,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:37:30,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:37:30,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:37:30,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.7658 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:37:30,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} open  
 
 2020-11-23 14:37:30,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:37:30,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:30,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:37:30,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:37:30,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : [11]  
 
 2020-11-23 14:37:30,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:37:30,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 3.2017 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:37:30,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 11, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:37:30,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} open  
 
 2020-11-23 14:37:30,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:37:30,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} closed  
 
 2020-11-23 14:37:30,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 14:37:30,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:37:30,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:37:30,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 14:37:30,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} closed  
 
 2020-11-23 14:37:30,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-23 14:37:30,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:30,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:30,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:37:30,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} Parameters : [11]  
 
 2020-11-23 14:37:30,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 14:37:30,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} executed. 1.7824 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:37:30,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20004, rs-50003} open  
 
 2020-11-23 14:37:30,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20004, rs-50003} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:37:30,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20004, rs-50003} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 14:37:30,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20004, rs-50003} closed  
 
 2020-11-23 14:37:30,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} clearParameters.   
 
 2020-11-23 14:37:30,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:30,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:30,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} Parameters : [9]  
 
 2020-11-23 14:37:30,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 14:37:30,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} executed. 1.545 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:37:30,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:37:30,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20004, rs-50004} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:37:30,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20004, rs-50004} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 14:37:30,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:37:30,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20004} clearParameters.   
 
 2020-11-23 14:37:30,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:38,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:38,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} created. select * from t_user where username=?  
 
 2020-11-23 14:37:38,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : [admin]  
 
 2020-11-23 14:37:38,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 14:37:38,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 3.3496 millis. select * from t_user where username=?  
 
 2020-11-23 14:37:38,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} open  
 
 2020-11-23 14:37:38,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 14:37:38,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} Result: [4, admin, $2a$10$77KRGBQYXA3LOR.2plwkGex4Ns9uhk0EFw7LwGvKCqFKvRCeYFXne, 24354666@qq.com, 2, https://picsum.photos/seed/picsum/200/300, 2020-11-14 05:06:04.0, 2020-11-14 05:06:04.0]  
 
 2020-11-23 14:37:38,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50005} closed  
 
 2020-11-23 14:37:38,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-23 14:37:38,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:38,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:38,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:37:38,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : []  
 
 2020-11-23 14:37:38,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : []  
 
 2020-11-23 14:37:38,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 4.3957 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:37:38,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} open  
 
 2020-11-23 14:37:38,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:37:38,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:37:38,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 11, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:37:38,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} closed  
 
 2020-11-23 14:37:38,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-23 14:37:38,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:38,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:38,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} created. select * from t_types  
 
 2020-11-23 14:37:38,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Parameters : []  
 
 2020-11-23 14:37:38,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Types : []  
 
 2020-11-23 14:37:38,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} executed. 2.8841 millis. select * from t_types  
 
 2020-11-23 14:37:38,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} open  
 
 2020-11-23 14:37:38,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Header: [id, name]  
 
 2020-11-23 14:37:38,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Result: [8, 方法论]  
 
 2020-11-23 14:37:38,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Result: [9, 理论类]  
 
 2020-11-23 14:37:38,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Result: [21, 错误日记]  
 
 2020-11-23 14:37:38,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Result: [23, 开发日记]  
 
 2020-11-23 14:37:38,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Result: [24, 实践论]  
 
 2020-11-23 14:37:38,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Result: [25, 想法论]  
 
 2020-11-23 14:37:38,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} closed  
 
 2020-11-23 14:37:38,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} clearParameters.   
 
 2020-11-23 14:37:38,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:38,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:38,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} created. select * from t_tages  
 
 2020-11-23 14:37:38,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : []  
 
 2020-11-23 14:37:38,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : []  
 
 2020-11-23 14:37:38,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 2.6977 millis. select * from t_tages  
 
 2020-11-23 14:37:38,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} open  
 
 2020-11-23 14:37:38,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Header: [id, tage]  
 
 2020-11-23 14:37:38,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [1, 学习日记]  
 
 2020-11-23 14:37:38,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [2, 错误笔记]  
 
 2020-11-23 14:37:38,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [3, 数据库笔记]  
 
 2020-11-23 14:37:38,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [4, 程序运行日记]  
 
 2020-11-23 14:37:38,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [5, 开发日记]  
 
 2020-11-23 14:37:38,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [8, 开发手册]  
 
 2020-11-23 14:37:38,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [10, 搭建日记]  
 
 2020-11-23 14:37:38,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} closed  
 
 2020-11-23 14:37:38,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-23 14:37:38,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:38,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:38,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:38,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:38,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:37:38,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : []  
 
 2020-11-23 14:37:38,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : []  
 
 2020-11-23 14:37:38,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 2.8361 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:37:38,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} open  
 
 2020-11-23 14:37:38,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} Header: [count(0)]  
 
 2020-11-23 14:37:38,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} Result: [2]  
 
 2020-11-23 14:37:38,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50009} closed  
 
 2020-11-23 14:37:38,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-23 14:37:38,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:37:38,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Parameters : [4]  
 
 2020-11-23 14:37:38,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Types : [INTEGER]  
 
 2020-11-23 14:37:38,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} executed. 3.9262 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:37:38,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50010} open  
 
 2020-11-23 14:37:38,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:37:38,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 11, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:37:38,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:37:38,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50010} closed  
 
 2020-11-23 14:37:38,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} clearParameters.   
 
 2020-11-23 14:37:38,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:38,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:38,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : []  
 
 2020-11-23 14:37:38,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : []  
 
 2020-11-23 14:37:38,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 2.1885 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:37:38,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50011} open  
 
 2020-11-23 14:37:38,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50011} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:37:38,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50011} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:37:38,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50011} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 11, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:37:38,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50011} closed  
 
 2020-11-23 14:37:38,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-23 14:37:38,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:46,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:46,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:37:46,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : [11]  
 
 2020-11-23 14:37:46,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : [INTEGER]  
 
 2020-11-23 14:37:46,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 6.6937 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:37:46,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} open  
 
 2020-11-23 14:37:46,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:37:46,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 11, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:37:46,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} closed  
 
 2020-11-23 14:37:46,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-23 14:37:46,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:46,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:46,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:37:46,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Parameters : [11]  
 
 2020-11-23 14:37:46,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Types : [INTEGER]  
 
 2020-11-23 14:37:46,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} executed. 7.3368 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:37:46,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} clearParameters.   
 
 2020-11-23 14:37:46,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:47,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:37:47,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : []  
 
 2020-11-23 14:37:47,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : []  
 
 2020-11-23 14:37:47,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 1.9666 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:37:47,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} open  
 
 2020-11-23 14:37:47,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:37:47,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:37:47,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 12, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:37:47,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:37:47,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} closed  
 
 2020-11-23 14:37:47,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:37:47,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-23 14:37:47,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Parameters : [11]  
 
 2020-11-23 14:37:47,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:37:47,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Types : [INTEGER]  
 
 2020-11-23 14:37:47,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} executed. 3.3883 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:37:47,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50014} open  
 
 2020-11-23 14:37:47,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50014} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:37:47,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50014} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 14:37:47,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50014} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 14:37:47,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50014} closed  
 
 2020-11-23 14:37:47,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} clearParameters.   
 
 2020-11-23 14:37:47,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:37:47,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:37:47,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:37:47,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} Parameters : [11]  
 
 2020-11-23 14:37:47,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} Types : [INTEGER]  
 
 2020-11-23 14:37:47,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} executed. 2.4025 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:37:47,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50015} open  
 
 2020-11-23 14:37:47,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50015} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:37:47,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50015} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 14:37:47,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50015} closed  
 
 2020-11-23 14:37:47,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} clearParameters.   
 
 2020-11-23 14:37:47,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:37:47,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:37:47,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} Parameters : [9]  
 
 2020-11-23 14:37:47,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} Types : [INTEGER]  
 
 2020-11-23 14:37:47,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} executed. 1.571 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:37:47,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50016} open  
 
 2020-11-23 14:37:47,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50016} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:37:47,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50016} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 14:37:47,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50016} closed  
 
 2020-11-23 14:37:47,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} clearParameters.   
 
 2020-11-23 14:37:47,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:43:05,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1192} connected  
 
 2020-11-23 14:43:05,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1193} connected  
 
 2020-11-23 14:43:05,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1194} connected  
 
 2020-11-23 14:43:05,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1195} connected  
 
 2020-11-23 14:43:05,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1196} connected  
 
 2020-11-23 14:43:05,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:43:06,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:43:06,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:43:06,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:43:06,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 44.3681 millis. select * from t_types  
 
 2020-11-23 14:43:06,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:43:06,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:43:06,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:43:06,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:43:06,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:43:06,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:43:06,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:43:06,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:43:06,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:43:06,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:43:06,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:43:06,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:43:06,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:43:06,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:43:06,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:43:06,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.9675 millis. select * from t_tages  
 
 2020-11-23 14:43:06,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:43:06,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:43:06,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:43:06,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:43:06,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:43:06,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:43:06,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:43:06,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:43:06,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:43:06,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:43:06,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:43:06,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:43:06,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:43:06,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:43:06,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:43:06,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:43:06,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:43:06,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:43:06,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 5.3292 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:43:06,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:43:06,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:43:06,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:43:06,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:43:06,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:43:06,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:43:06,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:43:06,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:43:06,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 9.4701 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:43:06,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:43:06,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:43:06,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 12, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:43:06,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:43:06,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:43:06,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:43:06,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:43:07,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:43:07,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:43:07,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:43:07,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:43:07,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.426 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:43:07,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:43:07,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:43:07,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:43:07,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 12, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:43:07,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:43:07,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:43:07,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:47:45,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1197} connected  
 
 2020-11-23 14:47:45,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1198} connected  
 
 2020-11-23 14:47:45,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1199} connected  
 
 2020-11-23 14:47:45,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1200} connected  
 
 2020-11-23 14:47:45,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1201} connected  
 
 2020-11-23 14:47:45,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:47:45,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:47:45,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:47:45,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:47:45,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.0687 millis. select * from t_types  
 
 2020-11-23 14:47:45,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:47:45,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:47:45,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:47:45,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:47:45,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:47:45,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:47:45,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:47:45,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:47:45,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:47:45,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:47:45,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:47:45,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:47:45,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:47:45,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:47:45,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:47:45,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8697 millis. select * from t_tages  
 
 2020-11-23 14:47:45,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:47:45,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:47:45,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:47:45,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:47:45,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:47:45,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:47:45,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:47:45,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:47:45,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:47:45,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:47:45,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:47:45,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:47:45,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:47:45,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:47:45,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:47:45,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:47:45,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:47:45,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:47:45,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.984 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:47:45,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:47:45,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:47:45,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:47:45,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:47:45,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:47:45,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:47:45,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:47:45,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:47:45,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.9331 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:47:45,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:47:45,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:47:45,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 12, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:47:45,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:47:45,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:47:45,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:47:45,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:47:46,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:47:46,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:47:46,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:47:46,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:47:46,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.5359 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:47:46,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:47:46,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:47:46,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:47:46,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 12, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:47:46,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:47:46,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:47:46,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:51,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1202} connected  
 
 2020-11-23 14:50:51,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1203} connected  
 
 2020-11-23 14:50:51,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1204} connected  
 
 2020-11-23 14:50:51,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1205} connected  
 
 2020-11-23 14:50:51,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1206} connected  
 
 2020-11-23 14:50:51,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:50:51,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:50:51,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:50:51,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:50:51,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 24.6826 millis. select * from t_types  
 
 2020-11-23 14:50:51,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:50:51,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:50:51,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:50:51,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:50:51,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:50:51,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:50:51,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:50:51,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:50:51,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:50:51,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:50:51,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:51,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:50:51,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:50:51,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:50:51,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:50:51,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9082 millis. select * from t_tages  
 
 2020-11-23 14:50:51,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:50:51,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:50:51,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:50:51,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:50:51,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:50:51,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:50:51,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:50:51,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:50:51,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:50:51,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:50:51,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:50:51,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:51,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:50:51,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:51,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:50:51,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:50:51,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:50:51,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:50:51,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.6849 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:50:51,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:50:51,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:50:51,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:50:51,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:50:51,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:50:51,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:50:51,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:50:51,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:50:51,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.9043 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:50:51,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:50:51,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:50:51,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 12, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:50:51,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:50:51,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:50:51,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:50:51,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:52,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:50:52,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:50:52,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:50:52,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:50:52,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.4547 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:50:52,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:50:52,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:50:52,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:50:52,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 12, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:50:52,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:50:52,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:50:52,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:55,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:50:55,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:50:55,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 14:50:55,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 14:50:55,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 4.726 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:50:55,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-23 14:50:55,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:50:55,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 12, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:50:55,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-23 14:50:55,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 14:50:55,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:55,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:50:55,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:50:55,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 14:50:55,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 14:50:55,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 8.0402 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:50:55,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 14:50:55,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:56,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:50:56,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:50:56,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:50:56,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.887 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:50:56,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} open  
 
 2020-11-23 14:50:56,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:50:56,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:50:56,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 13, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:50:56,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} closed  
 
 2020-11-23 14:50:56,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:50:56,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:50:56,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:50:56,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:50:56,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Parameters : [11]  
 
 2020-11-23 14:50:56,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 14:50:56,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} executed. 4.3204 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:50:56,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} open  
 
 2020-11-23 14:50:56,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:50:56,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 14:50:56,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 14:50:56,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50007} closed  
 
 2020-11-23 14:50:56,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} clearParameters.   
 
 2020-11-23 14:50:56,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:50:56,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:50:56,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:50:56,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : [11]  
 
 2020-11-23 14:50:56,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:50:56,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 2.3279 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:50:56,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} open  
 
 2020-11-23 14:50:56,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:50:56,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 14:50:56,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50008} closed  
 
 2020-11-23 14:50:56,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-23 14:50:56,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:50:56,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:50:56,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : [9]  
 
 2020-11-23 14:50:56,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:50:56,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 2.4911 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:50:56,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50009} open  
 
 2020-11-23 14:50:56,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50009} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:50:56,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50009} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 14:50:56,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50009} closed  
 
 2020-11-23 14:50:56,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-23 14:50:56,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:44,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1207} connected  
 
 2020-11-23 14:52:44,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1208} connected  
 
 2020-11-23 14:52:44,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1209} connected  
 
 2020-11-23 14:52:44,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1210} connected  
 
 2020-11-23 14:52:44,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1211} connected  
 
 2020-11-23 14:52:44,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:44,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:52:44,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-23 14:52:44,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-23 14:52:44,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 30.6053 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:52:44,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:52:44,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:52:44,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 13, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:52:44,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:52:44,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:52:44,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:44,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:44,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:52:44,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-23 14:52:44,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-23 14:52:44,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 11.3211 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:52:44,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:52:44,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:45,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:45,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:45,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:52:45,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:52:45,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:45,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.3873 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:45,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} open  
 
 2020-11-23 14:52:45,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:52:45,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:52:45,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:52:45,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : [11]  
 
 2020-11-23 14:52:45,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:52:45,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 3.4578 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:52:45,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} open  
 
 2020-11-23 14:52:45,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:52:45,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 14:52:45,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 14, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:52:45,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 14:52:45,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} closed  
 
 2020-11-23 14:52:45,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50001} closed  
 
 2020-11-23 14:52:45,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-23 14:52:45,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:52:45,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:45,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:45,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:45,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:52:45,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-23 14:52:45,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 14:52:45,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.244 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:52:45,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50003} open  
 
 2020-11-23 14:52:45,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50003} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:52:45,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50003} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 14:52:45,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50003} closed  
 
 2020-11-23 14:52:45,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:52:45,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:45,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:45,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [9]  
 
 2020-11-23 14:52:45,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 14:52:45,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.018 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:52:45,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:52:45,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:52:45,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 14:52:45,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:52:45,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:52:45,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:49,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:49,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_types  
 
 2020-11-23 14:52:49,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-23 14:52:49,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-23 14:52:49,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.5615 millis. select * from t_types  
 
 2020-11-23 14:52:49,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-23 14:52:49,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, name]  
 
 2020-11-23 14:52:49,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [8, 方法论]  
 
 2020-11-23 14:52:49,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, 理论类]  
 
 2020-11-23 14:52:49,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [21, 错误日记]  
 
 2020-11-23 14:52:49,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [23, 开发日记]  
 
 2020-11-23 14:52:49,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [24, 实践论]  
 
 2020-11-23 14:52:49,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [25, 想法论]  
 
 2020-11-23 14:52:49,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-23 14:52:49,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 14:52:49,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:49,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:49,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_tages  
 
 2020-11-23 14:52:49,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 14:52:49,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 14:52:49,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 8.0321 millis. select * from t_tages  
 
 2020-11-23 14:52:49,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-23 14:52:49,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [id, tage]  
 
 2020-11-23 14:52:49,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [1, 学习日记]  
 
 2020-11-23 14:52:49,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-23 14:52:49,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-23 14:52:49,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-23 14:52:49,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [5, 开发日记]  
 
 2020-11-23 14:52:49,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [8, 开发手册]  
 
 2020-11-23 14:52:49,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [10, 搭建日记]  
 
 2020-11-23 14:52:49,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-23 14:52:49,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 14:52:49,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:49,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:49,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:49,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:49,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:52:49,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-23 14:52:49,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-23 14:52:49,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.1813 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:52:49,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} open  
 
 2020-11-23 14:52:49,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Header: [count(0)]  
 
 2020-11-23 14:52:49,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [2]  
 
 2020-11-23 14:52:49,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} closed  
 
 2020-11-23 14:52:49,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 14:52:49,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:52:49,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [4]  
 
 2020-11-23 14:52:49,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:52:49,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.5861 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:52:49,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} open  
 
 2020-11-23 14:52:49,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:52:49,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 14, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:52:49,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:52:49,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} closed  
 
 2020-11-23 14:52:49,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:52:49,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:49,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:49,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:52:49,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:52:49,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2918 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:49,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} open  
 
 2020-11-23 14:52:49,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:52:49,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 7, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:52:49,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 14, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:52:49,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} closed  
 
 2020-11-23 14:52:49,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:52:49,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:51,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:51,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [12]  
 
 2020-11-23 14:52:51,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-23 14:52:51,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.4217 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:52:51,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} open  
 
 2020-11-23 14:52:51,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:52:51,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 7, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:52:51,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} closed  
 
 2020-11-23 14:52:51,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:52:51,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:51,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:51,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [12]  
 
 2020-11-23 14:52:51,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-23 14:52:51,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 7.7876 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:52:51,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:52:51,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:51,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:51,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:52:51,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:52:51,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.69 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:51,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} open  
 
 2020-11-23 14:52:51,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:52:51,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 8, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:52:51,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 14, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:52:51,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:51,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} closed  
 
 2020-11-23 14:52:51,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : [12]  
 
 2020-11-23 14:52:51,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:52:51,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:52:51,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:51,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 2.0036 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:52:51,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50012} open  
 
 2020-11-23 14:52:51,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50012} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:52:51,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50012} closed  
 
 2020-11-23 14:52:51,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-23 14:52:51,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:54,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:54,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} created. select * from t_types  
 
 2020-11-23 14:52:54,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : []  
 
 2020-11-23 14:52:54,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : []  
 
 2020-11-23 14:52:54,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 3.0389 millis. select * from t_types  
 
 2020-11-23 14:52:54,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} open  
 
 2020-11-23 14:52:54,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Header: [id, name]  
 
 2020-11-23 14:52:54,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [8, 方法论]  
 
 2020-11-23 14:52:54,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [9, 理论类]  
 
 2020-11-23 14:52:54,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [21, 错误日记]  
 
 2020-11-23 14:52:54,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [23, 开发日记]  
 
 2020-11-23 14:52:54,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [24, 实践论]  
 
 2020-11-23 14:52:54,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [25, 想法论]  
 
 2020-11-23 14:52:54,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} closed  
 
 2020-11-23 14:52:54,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-23 14:52:54,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:54,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:54,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} created. select * from t_tages  
 
 2020-11-23 14:52:54,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Parameters : []  
 
 2020-11-23 14:52:54,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Types : []  
 
 2020-11-23 14:52:54,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} executed. 2.4246 millis. select * from t_tages  
 
 2020-11-23 14:52:54,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} open  
 
 2020-11-23 14:52:54,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Header: [id, tage]  
 
 2020-11-23 14:52:54,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [1, 学习日记]  
 
 2020-11-23 14:52:54,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [2, 错误笔记]  
 
 2020-11-23 14:52:54,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [3, 数据库笔记]  
 
 2020-11-23 14:52:54,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [4, 程序运行日记]  
 
 2020-11-23 14:52:54,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [5, 开发日记]  
 
 2020-11-23 14:52:54,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [8, 开发手册]  
 
 2020-11-23 14:52:54,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [10, 搭建日记]  
 
 2020-11-23 14:52:54,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} closed  
 
 2020-11-23 14:52:54,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} clearParameters.   
 
 2020-11-23 14:52:54,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:54,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:54,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:52:54,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : []  
 
 2020-11-23 14:52:54,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : []  
 
 2020-11-23 14:52:54,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 2.9382 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:52:54,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} open  
 
 2020-11-23 14:52:54,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Header: [count(0)]  
 
 2020-11-23 14:52:54,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Result: [2]  
 
 2020-11-23 14:52:54,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} closed  
 
 2020-11-23 14:52:54,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-23 14:52:54,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:52:54,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Parameters : [4]  
 
 2020-11-23 14:52:54,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Types : [INTEGER]  
 
 2020-11-23 14:52:54,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} executed. 2.884 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:52:54,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} open  
 
 2020-11-23 14:52:54,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:52:54,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 14, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:52:54,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 8, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:52:54,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} closed  
 
 2020-11-23 14:52:54,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} clearParameters.   
 
 2020-11-23 14:52:54,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:54,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:54,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:54,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} Parameters : []  
 
 2020-11-23 14:52:54,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} Types : []  
 
 2020-11-23 14:52:54,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} executed. 3.5537 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:54,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50017} open  
 
 2020-11-23 14:52:54,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50017} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:52:54,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50017} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 8, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:52:54,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50017} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 14, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:52:54,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50017} closed  
 
 2020-11-23 14:52:54,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} clearParameters.   
 
 2020-11-23 14:52:54,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:55,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:55,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:52:55,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} Parameters : [12]  
 
 2020-11-23 14:52:55,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} Types : [INTEGER]  
 
 2020-11-23 14:52:55,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} executed. 3.0148 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:52:55,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50018} open  
 
 2020-11-23 14:52:55,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50018} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:52:55,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 8, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:52:55,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20014, rs-50018} closed  
 
 2020-11-23 14:52:55,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20014} clearParameters.   
 
 2020-11-23 14:52:55,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:55,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:55,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:52:55,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} Parameters : [12]  
 
 2020-11-23 14:52:55,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} Types : [INTEGER]  
 
 2020-11-23 14:52:55,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} executed. 9.0457 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:52:55,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20015} clearParameters.   
 
 2020-11-23 14:52:55,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:55,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-23 14:52:55,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} Parameters : []  
 
 2020-11-23 14:52:55,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} Types : []  
 
 2020-11-23 14:52:55,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} executed. 5.3768 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:55,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50019} open  
 
 2020-11-23 14:52:55,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50019} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:52:55,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50019} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:52:55,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50019} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 14, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:52:55,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:55,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20013, rs-50019} closed  
 
 2020-11-23 14:52:55,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:52:55,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20013} clearParameters.   
 
 2020-11-23 14:52:55,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-23 14:52:55,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} Parameters : [12]  
 
 2020-11-23 14:52:55,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} Types : [INTEGER]  
 
 2020-11-23 14:52:55,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} executed. 3.7792 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:52:55,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50020} open  
 
 2020-11-23 14:52:55,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50020} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:52:55,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50020} closed  
 
 2020-11-23 14:52:55,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} clearParameters.   
 
 2020-11-23 14:52:55,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:56,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:56,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-23 14:52:56,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-23 14:52:56,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.6534 millis. select * from t_types  
 
 2020-11-23 14:52:56,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} open  
 
 2020-11-23 14:52:56,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Header: [id, name]  
 
 2020-11-23 14:52:56,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Result: [8, 方法论]  
 
 2020-11-23 14:52:56,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Result: [9, 理论类]  
 
 2020-11-23 14:52:56,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Result: [21, 错误日记]  
 
 2020-11-23 14:52:56,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Result: [23, 开发日记]  
 
 2020-11-23 14:52:56,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Result: [24, 实践论]  
 
 2020-11-23 14:52:56,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} Result: [25, 想法论]  
 
 2020-11-23 14:52:56,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50021} closed  
 
 2020-11-23 14:52:56,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 14:52:56,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:56,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:56,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 14:52:56,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 14:52:56,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.6885 millis. select * from t_tages  
 
 2020-11-23 14:52:56,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} open  
 
 2020-11-23 14:52:56,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Header: [id, tage]  
 
 2020-11-23 14:52:56,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [1, 学习日记]  
 
 2020-11-23 14:52:56,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [2, 错误笔记]  
 
 2020-11-23 14:52:56,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [3, 数据库笔记]  
 
 2020-11-23 14:52:56,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [4, 程序运行日记]  
 
 2020-11-23 14:52:56,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [5, 开发日记]  
 
 2020-11-23 14:52:56,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [8, 开发手册]  
 
 2020-11-23 14:52:56,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} Result: [10, 搭建日记]  
 
 2020-11-23 14:52:56,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50022} closed  
 
 2020-11-23 14:52:56,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 14:52:56,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:56,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:56,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-23 14:52:56,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-23 14:52:56,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.401 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:52:56,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} open  
 
 2020-11-23 14:52:56,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} Header: [count(0)]  
 
 2020-11-23 14:52:56,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} Result: [2]  
 
 2020-11-23 14:52:56,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50023} closed  
 
 2020-11-23 14:52:56,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 14:52:56,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [4]  
 
 2020-11-23 14:52:56,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:52:56,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.1327 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:52:56,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} open  
 
 2020-11-23 14:52:56,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:52:56,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 14, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:52:56,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:52:56,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50024} closed  
 
 2020-11-23 14:52:56,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:52:56,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:56,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:56,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:52:56,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:52:56,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.1986 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:56,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50025} open  
 
 2020-11-23 14:52:56,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50025} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:52:56,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50025} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:52:56,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50025} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 14, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:52:56,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50025} closed  
 
 2020-11-23 14:52:56,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:52:56,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:57,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:57,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-23 14:52:57,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-23 14:52:57,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.615 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 14:52:57,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} open  
 
 2020-11-23 14:52:57,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 14:52:57,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 14, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 14:52:57,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} closed  
 
 2020-11-23 14:52:57,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:52:57,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:57,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:57,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [11]  
 
 2020-11-23 14:52:57,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-23 14:52:57,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 9.002 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 14:52:57,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:52:57,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:58,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:58,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:52:58,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:52:58,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.1961 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:52:58,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50027} open  
 
 2020-11-23 14:52:58,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50027} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:52:58,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50027} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:52:58,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50027} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:52:58,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50027} closed  
 
 2020-11-23 14:52:58,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:52:58,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:58,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:58,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} Parameters : [11]  
 
 2020-11-23 14:52:58,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} Types : [INTEGER]  
 
 2020-11-23 14:52:58,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} executed. 3.1911 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 14:52:58,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50028} open  
 
 2020-11-23 14:52:58,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50028} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:52:58,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50028} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 14:52:58,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50028} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 14:52:58,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50028} closed  
 
 2020-11-23 14:52:58,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} clearParameters.   
 
 2020-11-23 14:52:58,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:58,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:58,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-23 14:52:58,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 14:52:58,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9453 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:52:58,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50029} open  
 
 2020-11-23 14:52:58,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50029} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:52:58,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50029} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 14:52:58,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50029} closed  
 
 2020-11-23 14:52:58,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:52:58,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:52:58,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:52:58,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [9]  
 
 2020-11-23 14:52:58,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 14:52:58,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.8913 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 14:52:58,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} open  
 
 2020-11-23 14:52:58,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 14:52:58,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 14:52:58,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} closed  
 
 2020-11-23 14:52:58,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:52:58,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:53:02,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:53:02,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-23 14:53:02,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-23 14:53:02,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.438 millis. select * from t_types  
 
 2020-11-23 14:53:02,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} open  
 
 2020-11-23 14:53:02,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Header: [id, name]  
 
 2020-11-23 14:53:02,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Result: [8, 方法论]  
 
 2020-11-23 14:53:02,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Result: [9, 理论类]  
 
 2020-11-23 14:53:02,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Result: [21, 错误日记]  
 
 2020-11-23 14:53:02,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Result: [23, 开发日记]  
 
 2020-11-23 14:53:02,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Result: [24, 实践论]  
 
 2020-11-23 14:53:02,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Result: [25, 想法论]  
 
 2020-11-23 14:53:02,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} closed  
 
 2020-11-23 14:53:02,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 14:53:02,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:53:02,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:53:02,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 14:53:02,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 14:53:02,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.643 millis. select * from t_tages  
 
 2020-11-23 14:53:02,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} open  
 
 2020-11-23 14:53:02,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Header: [id, tage]  
 
 2020-11-23 14:53:02,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Result: [1, 学习日记]  
 
 2020-11-23 14:53:02,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Result: [2, 错误笔记]  
 
 2020-11-23 14:53:02,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Result: [3, 数据库笔记]  
 
 2020-11-23 14:53:02,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Result: [4, 程序运行日记]  
 
 2020-11-23 14:53:02,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Result: [5, 开发日记]  
 
 2020-11-23 14:53:02,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Result: [8, 开发手册]  
 
 2020-11-23 14:53:02,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Result: [10, 搭建日记]  
 
 2020-11-23 14:53:02,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} closed  
 
 2020-11-23 14:53:02,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 14:53:02,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:53:02,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:53:02,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-23 14:53:02,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-23 14:53:02,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.8113 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:53:02,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} open  
 
 2020-11-23 14:53:02,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} Header: [count(0)]  
 
 2020-11-23 14:53:02,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} Result: [2]  
 
 2020-11-23 14:53:02,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} closed  
 
 2020-11-23 14:53:02,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 14:53:02,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [4]  
 
 2020-11-23 14:53:02,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 14:53:02,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 1.7283 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:53:02,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50034} open  
 
 2020-11-23 14:53:02,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50034} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:53:02,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50034} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:53:02,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50034} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:53:02,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50034} closed  
 
 2020-11-23 14:53:02,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 14:53:02,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:53:02,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:53:02,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:53:02,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:53:02,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.293 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:53:02,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50035} open  
 
 2020-11-23 14:53:02,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50035} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:53:02,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50035} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:53:02,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50035} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:53:02,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50035} closed  
 
 2020-11-23 14:53:02,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:53:02,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:32,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1212} connected  
 
 2020-11-23 14:59:32,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1213} connected  
 
 2020-11-23 14:59:32,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1214} connected  
 
 2020-11-23 14:59:32,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1215} connected  
 
 2020-11-23 14:59:32,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1216} connected  
 
 2020-11-23 14:59:32,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:32,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 14:59:32,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:59:32,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:59:32,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 22.4425 millis. select * from t_types  
 
 2020-11-23 14:59:32,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 14:59:32,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 14:59:32,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 14:59:32,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 14:59:32,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 14:59:32,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 14:59:32,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 14:59:32,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 14:59:32,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 14:59:32,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:59:32,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:32,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:32,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 14:59:32,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:59:32,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:59:32,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.6051 millis. select * from t_tages  
 
 2020-11-23 14:59:32,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 14:59:32,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 14:59:32,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 14:59:32,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 14:59:32,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 14:59:32,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 14:59:32,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 14:59:32,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 14:59:32,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 14:59:32,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 14:59:32,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:59:32,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:32,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:32,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:32,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:32,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:59:32,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:59:32,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:59:32,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7486 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:59:32,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 14:59:32,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 14:59:32,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 14:59:32,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 14:59:32,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:59:32,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:59:32,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:59:32,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:59:32,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.7256 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:59:32,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 14:59:32,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:59:32,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:59:32,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:59:32,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 14:59:32,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:59:32,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:33,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:33,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:59:33,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:59:33,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:59:33,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.1797 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:59:33,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 14:59:33,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:59:33,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:59:33,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:59:33,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 14:59:33,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:59:33,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:48,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:48,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:59:48,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:59:48,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 7.7338 millis. select * from t_types  
 
 2020-11-23 14:59:48,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} open  
 
 2020-11-23 14:59:48,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Header: [id, name]  
 
 2020-11-23 14:59:48,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [8, 方法论]  
 
 2020-11-23 14:59:48,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [9, 理论类]  
 
 2020-11-23 14:59:48,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [21, 错误日记]  
 
 2020-11-23 14:59:48,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [23, 开发日记]  
 
 2020-11-23 14:59:48,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [24, 实践论]  
 
 2020-11-23 14:59:48,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [25, 想法论]  
 
 2020-11-23 14:59:48,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} closed  
 
 2020-11-23 14:59:48,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:59:48,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:48,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:48,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:59:48,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:59:48,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8084 millis. select * from t_tages  
 
 2020-11-23 14:59:48,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-23 14:59:48,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-23 14:59:48,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-23 14:59:48,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-23 14:59:48,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-23 14:59:48,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-23 14:59:48,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-23 14:59:48,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-23 14:59:48,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [10, 搭建日记]  
 
 2020-11-23 14:59:48,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-23 14:59:48,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:59:48,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:48,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:48,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:59:48,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:59:48,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.3116 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:59:48,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} open  
 
 2020-11-23 14:59:48,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Header: [count(0)]  
 
 2020-11-23 14:59:48,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [2]  
 
 2020-11-23 14:59:48,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} closed  
 
 2020-11-23 14:59:48,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:59:48,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:59:48,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:59:48,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0502 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:59:48,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} open  
 
 2020-11-23 14:59:48,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:59:48,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:59:48,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:59:48,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} closed  
 
 2020-11-23 14:59:48,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:59:48,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:48,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:48,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:59:48,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:59:48,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.5446 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:59:48,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} open  
 
 2020-11-23 14:59:48,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:59:48,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:59:48,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:59:48,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} closed  
 
 2020-11-23 14:59:48,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:59:48,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:49,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:49,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:59:49,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:59:49,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4518 millis. select * from t_tages  
 
 2020-11-23 14:59:49,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} open  
 
 2020-11-23 14:59:49,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Header: [id, tage]  
 
 2020-11-23 14:59:49,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [1, 学习日记]  
 
 2020-11-23 14:59:49,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-23 14:59:49,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-23 14:59:49,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-23 14:59:49,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [5, 开发日记]  
 
 2020-11-23 14:59:49,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [8, 开发手册]  
 
 2020-11-23 14:59:49,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [10, 搭建日记]  
 
 2020-11-23 14:59:49,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} closed  
 
 2020-11-23 14:59:49,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:59:49,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:49,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:49,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:59:49,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:59:49,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.9937 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:59:49,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} open  
 
 2020-11-23 14:59:49,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Header: [count(0)]  
 
 2020-11-23 14:59:49,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [2]  
 
 2020-11-23 14:59:49,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} closed  
 
 2020-11-23 14:59:49,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:59:49,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:59:49,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:59:49,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2741 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:59:49,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} open  
 
 2020-11-23 14:59:49,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:59:49,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:59:49,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:59:49,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} closed  
 
 2020-11-23 14:59:49,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:59:49,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:49,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:49,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:59:49,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:59:49,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.727 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:59:49,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} open  
 
 2020-11-23 14:59:49,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:59:49,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:59:49,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:59:49,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50013} closed  
 
 2020-11-23 14:59:49,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:59:49,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:57,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:57,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 14:59:57,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 14:59:57,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.7885 millis. select * from t_tages  
 
 2020-11-23 14:59:57,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} open  
 
 2020-11-23 14:59:57,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Header: [id, tage]  
 
 2020-11-23 14:59:57,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [1, 学习日记]  
 
 2020-11-23 14:59:57,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [2, 错误笔记]  
 
 2020-11-23 14:59:57,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [3, 数据库笔记]  
 
 2020-11-23 14:59:57,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [4, 程序运行日记]  
 
 2020-11-23 14:59:57,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [5, 开发日记]  
 
 2020-11-23 14:59:57,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [8, 开发手册]  
 
 2020-11-23 14:59:57,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} Result: [10, 搭建日记]  
 
 2020-11-23 14:59:57,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50014} closed  
 
 2020-11-23 14:59:57,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 14:59:57,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:57,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:57,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:59:57,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:59:57,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.9146 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:59:57,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50015} open  
 
 2020-11-23 14:59:57,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50015} Header: [count(0)]  
 
 2020-11-23 14:59:57,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50015} Result: [2]  
 
 2020-11-23 14:59:57,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50015} closed  
 
 2020-11-23 14:59:57,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:59:57,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:59:57,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:59:57,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.0226 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:59:57,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} open  
 
 2020-11-23 14:59:57,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:59:57,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:59:57,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:59:57,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50016} closed  
 
 2020-11-23 14:59:57,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:59:57,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:57,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:57,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:59:57,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:59:57,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.1305 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:59:57,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} open  
 
 2020-11-23 14:59:57,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:59:57,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:59:57,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:59:57,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} closed  
 
 2020-11-23 14:59:57,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:59:57,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:58,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:58,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 14:59:58,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 14:59:58,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.5133 millis. select * from t_types  
 
 2020-11-23 14:59:58,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} open  
 
 2020-11-23 14:59:58,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} Header: [id, name]  
 
 2020-11-23 14:59:58,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} Result: [8, 方法论]  
 
 2020-11-23 14:59:58,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} Result: [9, 理论类]  
 
 2020-11-23 14:59:58,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} Result: [21, 错误日记]  
 
 2020-11-23 14:59:58,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} Result: [23, 开发日记]  
 
 2020-11-23 14:59:58,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} Result: [24, 实践论]  
 
 2020-11-23 14:59:58,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} Result: [25, 想法论]  
 
 2020-11-23 14:59:58,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50018} closed  
 
 2020-11-23 14:59:58,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 14:59:58,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:58,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:58,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 14:59:58,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 14:59:58,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8368 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 14:59:58,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50019} open  
 
 2020-11-23 14:59:58,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50019} Header: [count(0)]  
 
 2020-11-23 14:59:58,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50019} Result: [2]  
 
 2020-11-23 14:59:58,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50019} closed  
 
 2020-11-23 14:59:58,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 14:59:58,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 14:59:58,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 14:59:58,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.4952 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 14:59:58,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} open  
 
 2020-11-23 14:59:58,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 14:59:58,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 14:59:58,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 14:59:58,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} closed  
 
 2020-11-23 14:59:58,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 14:59:58,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 14:59:58,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 14:59:58,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 14:59:58,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 14:59:58,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6936 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 14:59:58,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} open  
 
 2020-11-23 14:59:58,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 14:59:58,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 14:59:58,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 14:59:58,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} closed  
 
 2020-11-23 14:59:58,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 14:59:58,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:03,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:03,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:00:03,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:00:03,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1465 millis. select * from t_tages  
 
 2020-11-23 15:00:03,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} open  
 
 2020-11-23 15:00:03,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Header: [id, tage]  
 
 2020-11-23 15:00:03,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [1, 学习日记]  
 
 2020-11-23 15:00:03,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [2, 错误笔记]  
 
 2020-11-23 15:00:03,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [3, 数据库笔记]  
 
 2020-11-23 15:00:03,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [4, 程序运行日记]  
 
 2020-11-23 15:00:03,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [5, 开发日记]  
 
 2020-11-23 15:00:03,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [8, 开发手册]  
 
 2020-11-23 15:00:03,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [10, 搭建日记]  
 
 2020-11-23 15:00:03,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} closed  
 
 2020-11-23 15:00:03,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:00:03,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:03,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:03,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:00:03,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:00:03,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2524 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:00:03,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} open  
 
 2020-11-23 15:00:03,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} Header: [count(0)]  
 
 2020-11-23 15:00:03,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} Result: [2]  
 
 2020-11-23 15:00:03,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} closed  
 
 2020-11-23 15:00:03,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:00:03,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:00:03,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:00:03,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.293 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:00:03,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} open  
 
 2020-11-23 15:00:03,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:00:03,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:00:03,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:00:03,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} closed  
 
 2020-11-23 15:00:03,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:00:03,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:03,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:03,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:00:03,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:00:03,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6876 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:00:03,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} open  
 
 2020-11-23 15:00:03,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:00:03,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:00:03,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:00:03,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} closed  
 
 2020-11-23 15:00:03,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:00:03,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:05,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:05,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:00:05,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:00:05,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.2377 millis. select * from t_types  
 
 2020-11-23 15:00:05,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} open  
 
 2020-11-23 15:00:05,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Header: [id, name]  
 
 2020-11-23 15:00:05,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [8, 方法论]  
 
 2020-11-23 15:00:05,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [9, 理论类]  
 
 2020-11-23 15:00:05,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [21, 错误日记]  
 
 2020-11-23 15:00:05,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [23, 开发日记]  
 
 2020-11-23 15:00:05,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [24, 实践论]  
 
 2020-11-23 15:00:05,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [25, 想法论]  
 
 2020-11-23 15:00:05,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} closed  
 
 2020-11-23 15:00:05,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:00:05,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:05,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:05,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:00:05,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:00:05,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1485 millis. select * from t_tages  
 
 2020-11-23 15:00:05,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} open  
 
 2020-11-23 15:00:05,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Header: [id, tage]  
 
 2020-11-23 15:00:05,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [1, 学习日记]  
 
 2020-11-23 15:00:05,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [2, 错误笔记]  
 
 2020-11-23 15:00:05,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [3, 数据库笔记]  
 
 2020-11-23 15:00:05,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [4, 程序运行日记]  
 
 2020-11-23 15:00:05,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [5, 开发日记]  
 
 2020-11-23 15:00:05,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [8, 开发手册]  
 
 2020-11-23 15:00:05,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [10, 搭建日记]  
 
 2020-11-23 15:00:05,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} closed  
 
 2020-11-23 15:00:05,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:00:05,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:05,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:05,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:00:05,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:00:05,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3598 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:00:05,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} open  
 
 2020-11-23 15:00:05,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} Header: [count(0)]  
 
 2020-11-23 15:00:05,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} Result: [2]  
 
 2020-11-23 15:00:05,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} closed  
 
 2020-11-23 15:00:05,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:00:05,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:00:05,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:00:05,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.5963 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:00:05,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} open  
 
 2020-11-23 15:00:05,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:00:05,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:00:05,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:00:05,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} closed  
 
 2020-11-23 15:00:05,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:00:05,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:05,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:05,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:00:05,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:00:05,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2214 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:00:05,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} open  
 
 2020-11-23 15:00:05,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:00:05,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:00:05,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:00:05,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} closed  
 
 2020-11-23 15:00:05,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:00:05,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:06,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:06,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:00:06,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:00:06,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.4881 millis. select * from t_types  
 
 2020-11-23 15:00:06,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} open  
 
 2020-11-23 15:00:06,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} Header: [id, name]  
 
 2020-11-23 15:00:06,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} Result: [8, 方法论]  
 
 2020-11-23 15:00:06,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} Result: [9, 理论类]  
 
 2020-11-23 15:00:06,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} Result: [21, 错误日记]  
 
 2020-11-23 15:00:06,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} Result: [23, 开发日记]  
 
 2020-11-23 15:00:06,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} Result: [24, 实践论]  
 
 2020-11-23 15:00:06,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} Result: [25, 想法论]  
 
 2020-11-23 15:00:06,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50031} closed  
 
 2020-11-23 15:00:06,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:00:06,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:06,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:06,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:00:06,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:00:06,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9218 millis. select * from t_tages  
 
 2020-11-23 15:00:06,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} open  
 
 2020-11-23 15:00:06,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} Header: [id, tage]  
 
 2020-11-23 15:00:06,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} Result: [1, 学习日记]  
 
 2020-11-23 15:00:06,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} Result: [2, 错误笔记]  
 
 2020-11-23 15:00:06,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} Result: [3, 数据库笔记]  
 
 2020-11-23 15:00:06,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} Result: [4, 程序运行日记]  
 
 2020-11-23 15:00:06,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} Result: [5, 开发日记]  
 
 2020-11-23 15:00:06,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} Result: [8, 开发手册]  
 
 2020-11-23 15:00:06,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} Result: [10, 搭建日记]  
 
 2020-11-23 15:00:06,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50032} closed  
 
 2020-11-23 15:00:06,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:00:06,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:06,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:06,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:00:06,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:00:06,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.9134 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:00:06,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50033} open  
 
 2020-11-23 15:00:06,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50033} Header: [count(0)]  
 
 2020-11-23 15:00:06,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50033} Result: [2]  
 
 2020-11-23 15:00:06,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50033} closed  
 
 2020-11-23 15:00:06,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:00:06,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:00:06,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:00:06,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.3888 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:00:06,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50034} open  
 
 2020-11-23 15:00:06,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50034} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:00:06,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50034} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:00:06,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50034} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:00:06,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50034} closed  
 
 2020-11-23 15:00:06,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:00:06,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:00:06,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:00:06,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:00:06,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:00:06,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.808 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:00:06,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50035} open  
 
 2020-11-23 15:00:06,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50035} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:00:06,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50035} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:00:06,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50035} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:00:06,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50035} closed  
 
 2020-11-23 15:00:06,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:00:06,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:52,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1217} connected  
 
 2020-11-23 15:24:52,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1218} connected  
 
 2020-11-23 15:24:52,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1219} connected  
 
 2020-11-23 15:24:52,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1220} connected  
 
 2020-11-23 15:24:52,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1221} connected  
 
 2020-11-23 15:24:52,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:52,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 15:24:52,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:24:52,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:24:52,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.455 millis. select * from t_types  
 
 2020-11-23 15:24:52,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 15:24:52,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 15:24:52,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 15:24:52,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 15:24:52,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 15:24:52,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 15:24:52,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 15:24:52,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 15:24:52,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 15:24:52,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:24:52,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:52,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:52,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 15:24:52,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:24:52,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:24:52,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9976 millis. select * from t_tages  
 
 2020-11-23 15:24:52,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 15:24:52,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 15:24:52,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 15:24:52,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 15:24:52,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 15:24:52,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 15:24:52,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 15:24:52,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 15:24:52,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 15:24:52,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 15:24:52,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:24:52,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:52,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:52,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:52,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:52,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:24:52,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:24:52,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:24:52,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.467 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:24:52,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 15:24:52,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 15:24:52,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 15:24:52,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 15:24:52,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:24:52,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:24:52,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:24:52,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:24:52,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0909 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:24:52,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 15:24:52,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:24:52,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:24:52,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:24:52,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 15:24:52,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:24:52,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:53,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:53,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:24:53,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:24:53,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:24:53,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.5574 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:24:53,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 15:24:53,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:24:53,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:24:53,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:24:53,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 15:24:53,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:24:53,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:57,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:57,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:24:57,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:24:57,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.3887 millis. select * from t_types  
 
 2020-11-23 15:24:57,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} open  
 
 2020-11-23 15:24:57,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Header: [id, name]  
 
 2020-11-23 15:24:57,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [8, 方法论]  
 
 2020-11-23 15:24:57,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [9, 理论类]  
 
 2020-11-23 15:24:57,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [21, 错误日记]  
 
 2020-11-23 15:24:57,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [23, 开发日记]  
 
 2020-11-23 15:24:57,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [24, 实践论]  
 
 2020-11-23 15:24:57,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [25, 想法论]  
 
 2020-11-23 15:24:57,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} closed  
 
 2020-11-23 15:24:57,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:24:57,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:57,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:57,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:24:57,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:24:57,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.763 millis. select * from t_tages  
 
 2020-11-23 15:24:57,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-23 15:24:57,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [id, tage]  
 
 2020-11-23 15:24:57,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1, 学习日记]  
 
 2020-11-23 15:24:57,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-23 15:24:57,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-23 15:24:57,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-23 15:24:57,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [5, 开发日记]  
 
 2020-11-23 15:24:57,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [8, 开发手册]  
 
 2020-11-23 15:24:57,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [10, 搭建日记]  
 
 2020-11-23 15:24:57,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-23 15:24:57,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:24:57,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:57,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:57,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:24:57,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:24:57,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.211 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:24:57,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} open  
 
 2020-11-23 15:24:57,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Header: [count(0)]  
 
 2020-11-23 15:24:57,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [2]  
 
 2020-11-23 15:24:57,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} closed  
 
 2020-11-23 15:24:57,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:24:57,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:24:57,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:24:57,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.994 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:24:57,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} open  
 
 2020-11-23 15:24:57,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:24:57,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:24:57,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:24:57,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50008} closed  
 
 2020-11-23 15:24:57,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:24:57,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:57,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:57,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:24:57,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:24:57,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.0485 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:24:57,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} open  
 
 2020-11-23 15:24:57,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:24:57,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:24:57,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:24:57,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} closed  
 
 2020-11-23 15:24:57,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:24:57,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:58,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:58,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:24:58,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:24:58,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:44,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1229} connected  
 
 2020-11-23 15:28:44,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1230} connected  
 
 2020-11-23 15:28:44,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1231} connected  
 
 2020-11-23 15:28:44,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1232} connected  
 
 2020-11-23 15:28:44,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1233} connected  
 
 2020-11-23 15:28:44,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:44,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 15:28:44,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:28:44,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:28:44,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 48.4983 millis. select * from t_types  
 
 2020-11-23 15:28:44,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 15:28:44,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 15:28:44,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 15:28:44,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 15:28:44,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 15:28:44,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 15:28:44,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 15:28:44,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 15:28:44,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 15:28:44,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:28:44,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:44,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:44,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 15:28:45,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:28:45,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:28:45,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.7845 millis. select * from t_tages  
 
 2020-11-23 15:28:45,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 15:28:45,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 15:28:45,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 15:28:45,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 15:28:45,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 15:28:45,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 15:28:45,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 15:28:45,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 15:28:45,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 15:28:45,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 15:28:45,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:28:45,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:45,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:45,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:45,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:45,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:28:45,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:28:45,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:28:45,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.9457 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:28:45,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 15:28:45,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 15:28:45,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 15:28:45,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 15:28:45,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:28:45,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:28:45,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:28:45,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:28:45,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.0911 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:28:45,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 15:28:45,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:28:45,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:28:45,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:28:45,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 15:28:45,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:28:45,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:46,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:46,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:28:46,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:28:46,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:28:46,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.5292 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:28:46,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 15:28:46,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:28:46,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:28:46,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:28:46,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 15:28:46,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:28:46,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:49,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:49,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_blog_tages tbt, t_tages tages WHERE tb.id = tub.bid AND tub.uid = us.id AND tages.id = tbt.tid AND tb.id = tbt.bid AND tages.tage = ?  
 
 2020-11-23 15:28:49,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [学习日记]  
 
 2020-11-23 15:28:49,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 15:28:49,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.5389 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_blog_tages tbt, t_tages tages WHERE tb.id = tub.bid AND tub.uid = us.id AND tages.id = tbt.tid AND tb.id = tbt.bid AND tages.tage = ?  
 
 2020-11-23 15:28:49,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-23 15:28:49,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-23 15:28:49,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [1]  
 
 2020-11-23 15:28:49,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-23 15:28:49,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 15:28:49,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag

          from
        t_blog tb,t_user_blog tub,t_user us,t_blog_tages tbt,t_tages tages
         where
        tb.id=tub.bid and tub.uid=us.id and tages.id=tbt.tid and tb.id=tbt.bid
            and
            tages.tage=? LIMIT ?   
 
 2020-11-23 15:28:49,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [学习日记, 4]  
 
 2020-11-23 15:28:49,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 15:28:49,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.5744 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag

          from
        t_blog tb,t_user_blog tub,t_user us,t_blog_tages tbt,t_tages tages
         where
        tb.id=tub.bid and tub.uid=us.id and tages.id=tbt.tid and tb.id=tbt.bid
            and
            tages.tage=? LIMIT ?   
 
 2020-11-23 15:28:49,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-23 15:28:49,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-23 15:28:49,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创]  
 
 2020-11-23 15:28:49,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-23 15:28:49,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 15:28:49,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:49,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:49,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:28:49,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:28:49,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.5208 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:28:49,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} open  
 
 2020-11-23 15:28:49,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:28:49,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:28:49,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:28:49,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} closed  
 
 2020-11-23 15:28:49,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:28:49,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:58,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:58,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:28:58,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:28:58,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.049 millis. select * from t_types  
 
 2020-11-23 15:28:58,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} open  
 
 2020-11-23 15:28:58,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Header: [id, name]  
 
 2020-11-23 15:28:58,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [8, 方法论]  
 
 2020-11-23 15:28:58,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [9, 理论类]  
 
 2020-11-23 15:28:58,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [21, 错误日记]  
 
 2020-11-23 15:28:58,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [23, 开发日记]  
 
 2020-11-23 15:28:58,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [24, 实践论]  
 
 2020-11-23 15:28:58,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [25, 想法论]  
 
 2020-11-23 15:28:58,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} closed  
 
 2020-11-23 15:28:58,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:28:58,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:58,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:58,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:28:58,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:28:58,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0178 millis. select * from t_tages  
 
 2020-11-23 15:28:58,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} open  
 
 2020-11-23 15:28:58,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Header: [id, tage]  
 
 2020-11-23 15:28:58,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [1, 学习日记]  
 
 2020-11-23 15:28:58,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [2, 错误笔记]  
 
 2020-11-23 15:28:58,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [3, 数据库笔记]  
 
 2020-11-23 15:28:58,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [4, 程序运行日记]  
 
 2020-11-23 15:28:58,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [5, 开发日记]  
 
 2020-11-23 15:28:58,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [8, 开发手册]  
 
 2020-11-23 15:28:58,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [10, 搭建日记]  
 
 2020-11-23 15:28:58,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} closed  
 
 2020-11-23 15:28:58,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:28:58,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:58,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:58,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:28:58,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:28:58,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2635 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:28:58,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} open  
 
 2020-11-23 15:28:58,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Header: [count(0)]  
 
 2020-11-23 15:28:58,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [2]  
 
 2020-11-23 15:28:58,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} closed  
 
 2020-11-23 15:28:58,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:28:58,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:28:58,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:28:58,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.5135 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:28:58,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} open  
 
 2020-11-23 15:28:58,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:28:58,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:28:58,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:28:58,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} closed  
 
 2020-11-23 15:28:58,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:28:58,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:58,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:58,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:28:58,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:28:58,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.9445 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:28:58,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} open  
 
 2020-11-23 15:28:58,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:28:58,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:28:58,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:28:58,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} closed  
 
 2020-11-23 15:28:58,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:28:58,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:59,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:59,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [错误笔记]  
 
 2020-11-23 15:28:59,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 15:28:59,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 5.2353 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_blog_tages tbt, t_tages tages WHERE tb.id = tub.bid AND tub.uid = us.id AND tages.id = tbt.tid AND tb.id = tbt.bid AND tages.tage = ?  
 
 2020-11-23 15:28:59,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} open  
 
 2020-11-23 15:28:59,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Header: [count(0)]  
 
 2020-11-23 15:28:59,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [0]  
 
 2020-11-23 15:28:59,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} closed  
 
 2020-11-23 15:28:59,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 15:28:59,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:28:59,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:28:59,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:28:59,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:28:59,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6801 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:28:59,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} open  
 
 2020-11-23 15:28:59,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:28:59,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:28:59,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:28:59,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} closed  
 
 2020-11-23 15:28:59,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:28:59,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:03,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:03,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:29:03,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:29:03,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.1242 millis. select * from t_types  
 
 2020-11-23 15:29:03,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} open  
 
 2020-11-23 15:29:03,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Header: [id, name]  
 
 2020-11-23 15:29:03,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [8, 方法论]  
 
 2020-11-23 15:29:03,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [9, 理论类]  
 
 2020-11-23 15:29:03,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [21, 错误日记]  
 
 2020-11-23 15:29:03,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [23, 开发日记]  
 
 2020-11-23 15:29:03,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [24, 实践论]  
 
 2020-11-23 15:29:03,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [25, 想法论]  
 
 2020-11-23 15:29:03,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} closed  
 
 2020-11-23 15:29:03,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:29:03,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:03,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:03,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:29:03,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:29:03,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.5668 millis. select * from t_tages  
 
 2020-11-23 15:29:03,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} open  
 
 2020-11-23 15:29:03,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Header: [id, tage]  
 
 2020-11-23 15:29:03,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [1, 学习日记]  
 
 2020-11-23 15:29:03,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [2, 错误笔记]  
 
 2020-11-23 15:29:03,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [3, 数据库笔记]  
 
 2020-11-23 15:29:03,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [4, 程序运行日记]  
 
 2020-11-23 15:29:03,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [5, 开发日记]  
 
 2020-11-23 15:29:03,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [8, 开发手册]  
 
 2020-11-23 15:29:03,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [10, 搭建日记]  
 
 2020-11-23 15:29:03,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} closed  
 
 2020-11-23 15:29:03,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:29:03,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:03,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:03,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:29:03,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:29:03,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7316 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:29:03,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50017} open  
 
 2020-11-23 15:29:03,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50017} Header: [count(0)]  
 
 2020-11-23 15:29:03,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50017} Result: [2]  
 
 2020-11-23 15:29:03,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50017} closed  
 
 2020-11-23 15:29:03,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:29:03,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:29:03,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:29:03,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.9756 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:29:03,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} open  
 
 2020-11-23 15:29:03,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:29:03,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:29:03,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:29:03,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} closed  
 
 2020-11-23 15:29:03,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:29:03,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:03,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:03,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:29:03,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:29:03,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.0444 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:29:03,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} open  
 
 2020-11-23 15:29:03,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:29:03,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:29:03,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:29:03,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} closed  
 
 2020-11-23 15:29:03,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:29:03,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:04,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:04,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [数据库笔记]  
 
 2020-11-23 15:29:04,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 15:29:04,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.1256 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_blog_tages tbt, t_tages tages WHERE tb.id = tub.bid AND tub.uid = us.id AND tages.id = tbt.tid AND tb.id = tbt.bid AND tages.tage = ?  
 
 2020-11-23 15:29:04,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50020} open  
 
 2020-11-23 15:29:04,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50020} Header: [count(0)]  
 
 2020-11-23 15:29:04,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50020} Result: [0]  
 
 2020-11-23 15:29:04,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50020} closed  
 
 2020-11-23 15:29:04,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 15:29:04,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:05,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:05,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:29:05,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:29:05,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9971 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:29:05,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} open  
 
 2020-11-23 15:29:05,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:29:05,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:29:05,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:29:05,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} closed  
 
 2020-11-23 15:29:05,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:29:05,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:06,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:06,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:29:06,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:29:06,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.7714 millis. select * from t_types  
 
 2020-11-23 15:29:06,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} open  
 
 2020-11-23 15:29:06,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Header: [id, name]  
 
 2020-11-23 15:29:06,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [8, 方法论]  
 
 2020-11-23 15:29:06,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [9, 理论类]  
 
 2020-11-23 15:29:06,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [21, 错误日记]  
 
 2020-11-23 15:29:06,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [23, 开发日记]  
 
 2020-11-23 15:29:06,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [24, 实践论]  
 
 2020-11-23 15:29:06,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [25, 想法论]  
 
 2020-11-23 15:29:06,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} closed  
 
 2020-11-23 15:29:06,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:29:06,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:06,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:06,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:29:06,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:29:06,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.4535 millis. select * from t_tages  
 
 2020-11-23 15:29:06,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} open  
 
 2020-11-23 15:29:06,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Header: [id, tage]  
 
 2020-11-23 15:29:06,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [1, 学习日记]  
 
 2020-11-23 15:29:06,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [2, 错误笔记]  
 
 2020-11-23 15:29:06,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [3, 数据库笔记]  
 
 2020-11-23 15:29:06,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [4, 程序运行日记]  
 
 2020-11-23 15:29:06,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [5, 开发日记]  
 
 2020-11-23 15:29:06,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [8, 开发手册]  
 
 2020-11-23 15:29:06,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [10, 搭建日记]  
 
 2020-11-23 15:29:06,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} closed  
 
 2020-11-23 15:29:06,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:29:06,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:06,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:06,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:29:06,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:29:06,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.5723 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:29:06,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50024} open  
 
 2020-11-23 15:29:06,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50024} Header: [count(0)]  
 
 2020-11-23 15:29:06,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50024} Result: [2]  
 
 2020-11-23 15:29:06,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50024} closed  
 
 2020-11-23 15:29:06,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:29:06,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:29:06,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:29:06,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.3676 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:29:06,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} open  
 
 2020-11-23 15:29:06,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:29:06,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:29:06,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:29:06,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} closed  
 
 2020-11-23 15:29:06,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:29:06,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:06,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:06,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:29:06,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:29:06,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6135 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:29:06,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} open  
 
 2020-11-23 15:29:06,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:29:06,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:29:06,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:29:06,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} closed  
 
 2020-11-23 15:29:06,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:29:06,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:07,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:07,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [开发手册]  
 
 2020-11-23 15:29:07,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 15:29:07,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.8831 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_blog_tages tbt, t_tages tages WHERE tb.id = tub.bid AND tub.uid = us.id AND tages.id = tbt.tid AND tb.id = tbt.bid AND tages.tage = ?  
 
 2020-11-23 15:29:07,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50027} open  
 
 2020-11-23 15:29:07,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50027} Header: [count(0)]  
 
 2020-11-23 15:29:07,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50027} Result: [0]  
 
 2020-11-23 15:29:07,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50027} closed  
 
 2020-11-23 15:29:07,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 15:29:07,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:07,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:07,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:29:07,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:29:07,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9986 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:29:07,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} open  
 
 2020-11-23 15:29:07,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:29:07,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:29:07,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:29:07,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} closed  
 
 2020-11-23 15:29:07,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:29:07,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:08,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:08,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:29:08,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:29:08,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.482 millis. select * from t_types  
 
 2020-11-23 15:29:08,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} open  
 
 2020-11-23 15:29:08,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} Header: [id, name]  
 
 2020-11-23 15:29:08,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} Result: [8, 方法论]  
 
 2020-11-23 15:29:08,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} Result: [9, 理论类]  
 
 2020-11-23 15:29:08,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} Result: [21, 错误日记]  
 
 2020-11-23 15:29:08,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} Result: [23, 开发日记]  
 
 2020-11-23 15:29:08,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} Result: [24, 实践论]  
 
 2020-11-23 15:29:08,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} Result: [25, 想法论]  
 
 2020-11-23 15:29:08,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50029} closed  
 
 2020-11-23 15:29:08,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:29:08,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:08,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:08,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:29:08,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:29:08,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.423 millis. select * from t_tages  
 
 2020-11-23 15:29:08,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} open  
 
 2020-11-23 15:29:08,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} Header: [id, tage]  
 
 2020-11-23 15:29:08,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} Result: [1, 学习日记]  
 
 2020-11-23 15:29:08,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} Result: [2, 错误笔记]  
 
 2020-11-23 15:29:08,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} Result: [3, 数据库笔记]  
 
 2020-11-23 15:29:08,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} Result: [4, 程序运行日记]  
 
 2020-11-23 15:29:08,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} Result: [5, 开发日记]  
 
 2020-11-23 15:29:08,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} Result: [8, 开发手册]  
 
 2020-11-23 15:29:08,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} Result: [10, 搭建日记]  
 
 2020-11-23 15:29:08,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50030} closed  
 
 2020-11-23 15:29:08,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:29:08,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:08,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:08,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:29:08,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:29:08,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.925 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:29:08,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50031} open  
 
 2020-11-23 15:29:08,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50031} Header: [count(0)]  
 
 2020-11-23 15:29:08,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50031} Result: [2]  
 
 2020-11-23 15:29:08,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50031} closed  
 
 2020-11-23 15:29:08,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:29:08,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:29:08,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:29:08,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.8355 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:29:08,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50032} open  
 
 2020-11-23 15:29:08,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50032} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:29:08,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50032} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:29:08,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50032} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:29:08,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50032} closed  
 
 2020-11-23 15:29:08,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:29:08,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:09,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:09,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:29:09,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:29:09,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.7599 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:29:09,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} open  
 
 2020-11-23 15:29:09,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:29:09,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:29:09,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:29:09,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} closed  
 
 2020-11-23 15:29:09,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:29:09,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:09,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:09,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [搭建日记]  
 
 2020-11-23 15:29:09,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 15:29:09,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.656 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_blog_tages tbt, t_tages tages WHERE tb.id = tub.bid AND tub.uid = us.id AND tages.id = tbt.tid AND tb.id = tbt.bid AND tages.tage = ?  
 
 2020-11-23 15:29:09,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50034} open  
 
 2020-11-23 15:29:09,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50034} Header: [count(0)]  
 
 2020-11-23 15:29:09,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50034} Result: [1]  
 
 2020-11-23 15:29:09,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50034} closed  
 
 2020-11-23 15:29:09,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 15:29:09,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [搭建日记, 4]  
 
 2020-11-23 15:29:09,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 15:29:09,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.2666 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag

          from
        t_blog tb,t_user_blog tub,t_user us,t_blog_tages tbt,t_tages tages
         where
        tb.id=tub.bid and tub.uid=us.id and tages.id=tbt.tid and tb.id=tbt.bid
            and
            tages.tage=? LIMIT ?   
 
 2020-11-23 15:29:09,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50035} open  
 
 2020-11-23 15:29:09,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50035} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-23 15:29:09,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50035} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创]  
 
 2020-11-23 15:29:09,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50035} closed  
 
 2020-11-23 15:29:09,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 15:29:09,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:09,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:09,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:29:09,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:29:09,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.9735 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:29:09,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} open  
 
 2020-11-23 15:29:09,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:29:09,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:29:09,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:29:09,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} closed  
 
 2020-11-23 15:29:09,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:29:09,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:14,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:14,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:29:14,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:29:14,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.0022 millis. select * from t_types  
 
 2020-11-23 15:29:14,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} open  
 
 2020-11-23 15:29:14,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} Header: [id, name]  
 
 2020-11-23 15:29:14,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} Result: [8, 方法论]  
 
 2020-11-23 15:29:14,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} Result: [9, 理论类]  
 
 2020-11-23 15:29:14,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} Result: [21, 错误日记]  
 
 2020-11-23 15:29:14,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} Result: [23, 开发日记]  
 
 2020-11-23 15:29:14,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} Result: [24, 实践论]  
 
 2020-11-23 15:29:14,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} Result: [25, 想法论]  
 
 2020-11-23 15:29:14,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50037} closed  
 
 2020-11-23 15:29:14,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:29:14,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:14,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:14,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:29:14,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:29:14,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.3392 millis. select * from t_tages  
 
 2020-11-23 15:29:14,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} open  
 
 2020-11-23 15:29:14,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} Header: [id, tage]  
 
 2020-11-23 15:29:14,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} Result: [1, 学习日记]  
 
 2020-11-23 15:29:14,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} Result: [2, 错误笔记]  
 
 2020-11-23 15:29:14,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} Result: [3, 数据库笔记]  
 
 2020-11-23 15:29:14,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} Result: [4, 程序运行日记]  
 
 2020-11-23 15:29:14,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} Result: [5, 开发日记]  
 
 2020-11-23 15:29:14,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} Result: [8, 开发手册]  
 
 2020-11-23 15:29:14,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} Result: [10, 搭建日记]  
 
 2020-11-23 15:29:14,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50038} closed  
 
 2020-11-23 15:29:14,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:29:14,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:14,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:14,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:29:14,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:29:14,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2899 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:29:14,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50039} open  
 
 2020-11-23 15:29:14,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50039} Header: [count(0)]  
 
 2020-11-23 15:29:14,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50039} Result: [2]  
 
 2020-11-23 15:29:14,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50039} closed  
 
 2020-11-23 15:29:14,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:29:14,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:29:14,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:29:14,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0338 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:29:14,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50040} open  
 
 2020-11-23 15:29:14,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50040} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:29:14,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50040} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:29:14,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50040} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:29:14,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50040} closed  
 
 2020-11-23 15:29:14,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:29:14,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:29:14,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:29:14,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:29:14,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:29:14,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.5437 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:29:14,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50041} open  
 
 2020-11-23 15:29:14,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50041} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:29:14,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50041} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:29:14,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50041} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:29:14,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50041} closed  
 
 2020-11-23 15:29:14,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:29:14,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:42:11,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1234} connected  
 
 2020-11-23 15:42:11,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1235} connected  
 
 2020-11-23 15:42:11,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1236} connected  
 
 2020-11-23 15:42:11,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1237} connected  
 
 2020-11-23 15:42:11,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1238} connected  
 
 2020-11-23 15:42:11,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:42:11,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 15:42:11,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:42:11,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:42:11,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.9498 millis. select * from t_types  
 
 2020-11-23 15:42:11,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 15:42:11,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 15:42:11,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 15:42:11,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 15:42:11,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 15:42:11,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 15:42:11,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 15:42:11,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 15:42:11,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 15:42:11,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:42:11,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:42:11,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:42:11,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 15:42:11,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:42:11,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:42:11,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.5839 millis. select * from t_tages  
 
 2020-11-23 15:42:11,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 15:42:11,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 15:42:11,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 15:42:11,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 15:42:11,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 15:42:11,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 15:42:11,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 15:42:11,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 15:42:11,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 15:42:11,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 15:42:11,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:42:11,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:42:11,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:42:11,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:42:11,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:42:11,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:42:11,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:42:11,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:42:11,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8775 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:42:11,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 15:42:11,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 15:42:11,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 15:42:11,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 15:42:11,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:42:11,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:42:11,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:42:11,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:42:11,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.2168 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:42:11,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 15:42:11,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:42:11,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:42:11,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:42:11,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 15:42:11,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:42:11,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:42:12,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:42:12,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:42:12,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:42:12,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:42:12,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.397 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:42:12,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 15:42:12,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:42:12,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:42:12,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:42:12,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 15:42:12,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:42:12,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:18,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1239} connected  
 
 2020-11-23 15:43:18,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1240} connected  
 
 2020-11-23 15:43:18,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1241} connected  
 
 2020-11-23 15:43:18,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1242} connected  
 
 2020-11-23 15:43:18,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1243} connected  
 
 2020-11-23 15:43:18,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:19,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 15:43:19,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:43:19,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:43:19,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 18.7746 millis. select * from t_types  
 
 2020-11-23 15:43:19,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 15:43:19,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 15:43:19,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 15:43:19,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 15:43:19,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 15:43:19,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 15:43:19,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 15:43:19,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 15:43:19,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 15:43:19,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:43:19,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:19,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:19,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 15:43:19,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:43:19,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:43:19,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2666 millis. select * from t_tages  
 
 2020-11-23 15:43:19,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 15:43:19,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 15:43:19,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 15:43:19,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 15:43:19,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 15:43:19,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 15:43:19,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 15:43:19,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 15:43:19,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 15:43:19,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 15:43:19,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:43:19,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:19,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:19,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:19,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:19,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:43:19,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:43:19,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:43:19,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.3675 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:43:19,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 15:43:19,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 15:43:19,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 15:43:19,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 15:43:19,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:43:19,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:43:19,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:43:19,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:43:19,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.1431 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:43:19,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 15:43:19,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:43:19,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:43:19,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:43:19,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 15:43:19,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:43:19,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:19,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:19,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:43:19,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:43:19,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:43:19,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.9346 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:43:19,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 15:43:19,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:43:19,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:43:19,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:43:19,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 15:43:19,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:43:19,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:22,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:22,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_types typ, t_blog_type tbt WHERE tb.id = tub.bid AND tub.uid = us.id AND tbt.bid = tb.id AND tbt.tyid = typ.id AND typ.name = ?  
 
 2020-11-23 15:43:22,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [方法论]  
 
 2020-11-23 15:43:22,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 15:43:22,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.1871 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_types typ, t_blog_type tbt WHERE tb.id = tub.bid AND tub.uid = us.id AND tbt.bid = tb.id AND tbt.tyid = typ.id AND typ.name = ?  
 
 2020-11-23 15:43:22,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-23 15:43:22,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-23 15:43:22,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [2]  
 
 2020-11-23 15:43:22,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-23 15:43:22,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 15:43:22,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
          and
        typ.name=? LIMIT ?   
 
 2020-11-23 15:43:22,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [方法论, 4]  
 
 2020-11-23 15:43:22,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 15:43:22,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.6986 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
          and
        typ.name=? LIMIT ?   
 
 2020-11-23 15:43:22,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-23 15:43:22,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-23 15:43:22,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创]  
 
 2020-11-23 15:43:22,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创]  
 
 2020-11-23 15:43:22,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-23 15:43:22,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 15:43:22,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:22,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:22,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:43:22,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:43:22,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2701 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:43:22,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} open  
 
 2020-11-23 15:43:22,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:43:22,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:43:22,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:43:22,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} closed  
 
 2020-11-23 15:43:22,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:43:22,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:24,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:24,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:43:24,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:43:24,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.118 millis. select * from t_types  
 
 2020-11-23 15:43:24,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} open  
 
 2020-11-23 15:43:24,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Header: [id, name]  
 
 2020-11-23 15:43:24,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [8, 方法论]  
 
 2020-11-23 15:43:24,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [9, 理论类]  
 
 2020-11-23 15:43:24,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [21, 错误日记]  
 
 2020-11-23 15:43:24,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [23, 开发日记]  
 
 2020-11-23 15:43:24,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [24, 实践论]  
 
 2020-11-23 15:43:24,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [25, 想法论]  
 
 2020-11-23 15:43:24,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} closed  
 
 2020-11-23 15:43:24,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:43:24,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:24,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:24,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:43:24,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:43:24,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.5799 millis. select * from t_tages  
 
 2020-11-23 15:43:24,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} open  
 
 2020-11-23 15:43:24,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Header: [id, tage]  
 
 2020-11-23 15:43:24,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [1, 学习日记]  
 
 2020-11-23 15:43:24,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [2, 错误笔记]  
 
 2020-11-23 15:43:24,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [3, 数据库笔记]  
 
 2020-11-23 15:43:24,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [4, 程序运行日记]  
 
 2020-11-23 15:43:24,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [5, 开发日记]  
 
 2020-11-23 15:43:24,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [8, 开发手册]  
 
 2020-11-23 15:43:24,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [10, 搭建日记]  
 
 2020-11-23 15:43:24,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} closed  
 
 2020-11-23 15:43:24,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:43:24,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:24,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:24,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:43:24,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:43:24,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.4803 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:43:24,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} open  
 
 2020-11-23 15:43:24,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Header: [count(0)]  
 
 2020-11-23 15:43:24,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [2]  
 
 2020-11-23 15:43:24,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} closed  
 
 2020-11-23 15:43:24,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:43:24,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:43:24,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:43:24,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2946 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:43:24,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} open  
 
 2020-11-23 15:43:24,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:43:24,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:43:24,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:43:24,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} closed  
 
 2020-11-23 15:43:24,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:43:24,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:24,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:24,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:43:24,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:43:24,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.732 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:43:24,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} open  
 
 2020-11-23 15:43:24,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:43:24,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:43:24,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:43:24,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} closed  
 
 2020-11-23 15:43:24,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:43:24,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:25,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:25,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [理论类]  
 
 2020-11-23 15:43:25,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 15:43:25,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.8201 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_types typ, t_blog_type tbt WHERE tb.id = tub.bid AND tub.uid = us.id AND tbt.bid = tb.id AND tbt.tyid = typ.id AND typ.name = ?  
 
 2020-11-23 15:43:25,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} open  
 
 2020-11-23 15:43:25,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Header: [count(0)]  
 
 2020-11-23 15:43:25,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [0]  
 
 2020-11-23 15:43:25,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} closed  
 
 2020-11-23 15:43:25,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 15:43:25,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:25,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:25,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:43:25,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:43:25,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.8816 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:43:25,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} open  
 
 2020-11-23 15:43:25,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:43:25,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:43:25,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:43:25,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} closed  
 
 2020-11-23 15:43:25,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:43:25,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:27,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:27,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:43:27,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:43:27,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.7729 millis. select * from t_types  
 
 2020-11-23 15:43:27,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} open  
 
 2020-11-23 15:43:27,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Header: [id, name]  
 
 2020-11-23 15:43:27,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [8, 方法论]  
 
 2020-11-23 15:43:27,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [9, 理论类]  
 
 2020-11-23 15:43:27,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [21, 错误日记]  
 
 2020-11-23 15:43:27,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [23, 开发日记]  
 
 2020-11-23 15:43:27,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [24, 实践论]  
 
 2020-11-23 15:43:27,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} Result: [25, 想法论]  
 
 2020-11-23 15:43:27,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50015} closed  
 
 2020-11-23 15:43:27,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:43:27,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:27,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:27,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:43:27,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:43:27,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.614 millis. select * from t_tages  
 
 2020-11-23 15:43:27,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} open  
 
 2020-11-23 15:43:27,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Header: [id, tage]  
 
 2020-11-23 15:43:27,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [1, 学习日记]  
 
 2020-11-23 15:43:27,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [2, 错误笔记]  
 
 2020-11-23 15:43:27,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [3, 数据库笔记]  
 
 2020-11-23 15:43:27,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [4, 程序运行日记]  
 
 2020-11-23 15:43:27,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [5, 开发日记]  
 
 2020-11-23 15:43:27,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [8, 开发手册]  
 
 2020-11-23 15:43:27,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} Result: [10, 搭建日记]  
 
 2020-11-23 15:43:27,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50016} closed  
 
 2020-11-23 15:43:27,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:43:27,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:27,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:27,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:43:27,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:43:27,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.4657 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:43:27,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50017} open  
 
 2020-11-23 15:43:27,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50017} Header: [count(0)]  
 
 2020-11-23 15:43:27,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50017} Result: [2]  
 
 2020-11-23 15:43:27,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50017} closed  
 
 2020-11-23 15:43:27,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:43:27,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:43:27,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:43:27,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.8816 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:43:27,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} open  
 
 2020-11-23 15:43:27,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:43:27,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:43:27,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:43:27,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50018} closed  
 
 2020-11-23 15:43:27,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:43:27,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:43:27,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:43:27,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:43:27,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:43:27,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.0937 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:43:27,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} open  
 
 2020-11-23 15:43:27,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:43:27,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:43:27,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:43:27,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} closed  
 
 2020-11-23 15:43:27,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:43:27,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:44:42,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1244} connected  
 
 2020-11-23 15:44:42,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1245} connected  
 
 2020-11-23 15:44:42,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1246} connected  
 
 2020-11-23 15:44:42,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1247} connected  
 
 2020-11-23 15:44:42,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1248} connected  
 
 2020-11-23 15:44:42,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:44:42,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 15:44:42,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:44:42,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:44:42,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 18.9615 millis. select * from t_types  
 
 2020-11-23 15:44:42,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 15:44:42,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 15:44:42,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 15:44:42,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 15:44:42,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 15:44:42,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 15:44:42,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 15:44:42,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 15:44:42,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 15:44:42,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:44:42,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:44:42,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:44:42,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 15:44:42,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:44:42,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:44:42,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9056 millis. select * from t_tages  
 
 2020-11-23 15:44:42,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 15:44:42,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 15:44:42,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 15:44:42,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 15:44:42,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 15:44:42,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 15:44:42,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 15:44:42,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 15:44:42,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 15:44:42,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 15:44:42,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:44:42,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:44:42,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:44:42,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:44:43,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:44:43,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:44:43,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:44:43,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:44:43,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8269 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:44:43,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 15:44:43,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 15:44:43,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 15:44:43,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 15:44:43,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:44:43,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:44:43,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:44:43,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:44:43,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.6645 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:44:43,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 15:44:43,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:44:43,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:44:43,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:44:43,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 15:44:43,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:44:43,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:42,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1249} connected  
 
 2020-11-23 15:45:42,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1250} connected  
 
 2020-11-23 15:45:42,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1251} connected  
 
 2020-11-23 15:45:42,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1252} connected  
 
 2020-11-23 15:45:42,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1253} connected  
 
 2020-11-23 15:45:42,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:43,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 15:45:43,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:45:43,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:45:43,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 12.7624 millis. select * from t_types  
 
 2020-11-23 15:45:43,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 15:45:43,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 15:45:43,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 15:45:43,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 15:45:43,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 15:45:43,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 15:45:43,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 15:45:43,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 15:45:43,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 15:45:43,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:45:43,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:43,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:43,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 15:45:43,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:45:43,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:45:43,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9143 millis. select * from t_tages  
 
 2020-11-23 15:45:43,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 15:45:43,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 15:45:43,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 15:45:43,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 15:45:43,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 15:45:43,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 15:45:43,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 15:45:43,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 15:45:43,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 15:45:43,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 15:45:43,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:45:43,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:43,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:43,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:43,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:43,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:45:43,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:45:43,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:45:43,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.6353 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:45:43,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 15:45:43,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 15:45:43,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 15:45:43,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 15:45:43,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:45:43,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:45:43,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:45:43,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:45:43,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.7978 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:45:43,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 15:45:43,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:45:43,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:45:43,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:45:43,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 15:45:43,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:45:43,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:43,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:43,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:45:43,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:45:43,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:45:43,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.1668 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:45:43,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-23 15:45:43,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:45:43,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:45:43,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 15, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:45:43,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-23 15:45:43,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:45:43,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:46,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:46,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 15:45:46,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [11]  
 
 2020-11-23 15:45:46,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 15:45:46,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.36 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-23 15:45:46,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-23 15:45:46,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-23 15:45:46,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 15, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-23 15:45:46,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-23 15:45:46,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 15:45:46,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:46,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:47,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 15:45:47,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-23 15:45:47,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-23 15:45:47,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 9.3503 millis. update t_blog
             SET views =views +1 
        where id=?  
 
 2020-11-23 15:45:47,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 15:45:47,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:47,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:47,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:45:47,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:45:47,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.1091 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:45:47,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} open  
 
 2020-11-23 15:45:47,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:45:47,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:45:47,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:45:47,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50006} closed  
 
 2020-11-23 15:45:47,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:45:47,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:47,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:47,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 15:45:47,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-23 15:45:47,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 15:45:47,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.4287 millis. select * from t_comment where parentcomment_id  is null and blog_id=?  ORDER BY creatTime desc  
 
 2020-11-23 15:45:47,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} open  
 
 2020-11-23 15:45:47,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 15:45:47,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [11, 小伟, cf1799749389@qq.com, 这是现在发布的, /image/weixin.jpg, 2020-11-20 21:17:27.0, 11, null]  
 
 2020-11-23 15:45:47,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [9, 小白, 245782677@qq.com, 这是测试内容, /image/loading.gif, 2020-11-20 15:01:21.0, 11, null]  
 
 2020-11-23 15:45:47,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} closed  
 
 2020-11-23 15:45:47,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 15:45:47,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:47,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:47,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 15:45:47,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [11]  
 
 2020-11-23 15:45:47,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 15:45:47,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.9436 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 15:45:47,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} open  
 
 2020-11-23 15:45:47,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 15:45:47,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [12, 小洋, 1799749389@qq.com, 这是回复@小伟的, /image/weixin.jpg, 2020-11-20 21:18:04.0, 11, 11]  
 
 2020-11-23 15:45:47,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} closed  
 
 2020-11-23 15:45:47,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 15:45:47,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:47,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:47,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [9]  
 
 2020-11-23 15:45:47,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 15:45:47,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 3.0288 millis. select * from t_comment where parentcomment_id=?  
 
 2020-11-23 15:45:47,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} open  
 
 2020-11-23 15:45:47,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} Header: [id, nickename, email, content, avator, creattime, blog_id, parentcomment_id]  
 
 2020-11-23 15:45:47,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} Result: [10, 小红, 245782677@qq.com, 这是回复测试, /image/loading.gif, 2020-11-20 15:01:31.0, 11, 9]  
 
 2020-11-23 15:45:47,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} closed  
 
 2020-11-23 15:45:47,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 15:45:47,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:49,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:49,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 15:45:49,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 15:45:49,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.1053 millis. select * from t_types  
 
 2020-11-23 15:45:49,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} open  
 
 2020-11-23 15:45:49,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Header: [id, name]  
 
 2020-11-23 15:45:49,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [8, 方法论]  
 
 2020-11-23 15:45:49,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [9, 理论类]  
 
 2020-11-23 15:45:49,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [21, 错误日记]  
 
 2020-11-23 15:45:49,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [23, 开发日记]  
 
 2020-11-23 15:45:49,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [24, 实践论]  
 
 2020-11-23 15:45:49,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} Result: [25, 想法论]  
 
 2020-11-23 15:45:49,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50010} closed  
 
 2020-11-23 15:45:49,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 15:45:49,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:49,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:49,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 15:45:49,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 15:45:49,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7365 millis. select * from t_tages  
 
 2020-11-23 15:45:49,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} open  
 
 2020-11-23 15:45:49,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Header: [id, tage]  
 
 2020-11-23 15:45:49,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [1, 学习日记]  
 
 2020-11-23 15:45:49,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [2, 错误笔记]  
 
 2020-11-23 15:45:49,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [3, 数据库笔记]  
 
 2020-11-23 15:45:49,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [4, 程序运行日记]  
 
 2020-11-23 15:45:49,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [5, 开发日记]  
 
 2020-11-23 15:45:49,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [8, 开发手册]  
 
 2020-11-23 15:45:49,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [10, 搭建日记]  
 
 2020-11-23 15:45:49,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} closed  
 
 2020-11-23 15:45:49,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 15:45:49,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:49,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:49,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 15:45:49,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 15:45:49,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8098 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 15:45:49,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} open  
 
 2020-11-23 15:45:49,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} Header: [count(0)]  
 
 2020-11-23 15:45:49,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} Result: [2]  
 
 2020-11-23 15:45:49,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50012} closed  
 
 2020-11-23 15:45:49,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 15:45:49,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 15:45:49,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 15:45:49,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.5082 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 15:45:49,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} open  
 
 2020-11-23 15:45:49,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 15:45:49,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 15:45:49,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 15:45:49,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50013} closed  
 
 2020-11-23 15:45:49,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 15:45:49,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:45:50,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:45:50,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:45:50,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:45:50,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9463 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:45:50,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} open  
 
 2020-11-23 15:45:50,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:45:50,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:45:50,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:45:50,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} closed  
 
 2020-11-23 15:45:50,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:45:50,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 15:46:02,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 15:46:02,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 15:46:02,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 15:46:02,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9657 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 15:46:02,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} open  
 
 2020-11-23 15:46:02,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 15:46:02,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 15:46:02,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 15:46:02,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50015} closed  
 
 2020-11-23 15:46:02,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 15:46:02,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:17,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1254} connected  
 
 2020-11-23 16:03:17,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1255} connected  
 
 2020-11-23 16:03:17,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1256} connected  
 
 2020-11-23 16:03:17,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1257} connected  
 
 2020-11-23 16:03:17,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1258} connected  
 
 2020-11-23 16:03:17,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:17,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 16:03:17,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 16:03:17,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 16:03:17,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 26.1131 millis. select * from t_types  
 
 2020-11-23 16:03:17,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 16:03:17,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 16:03:17,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 16:03:17,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 16:03:17,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 16:03:17,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 16:03:17,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 16:03:17,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 16:03:17,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 16:03:17,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 16:03:17,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:17,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:17,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 16:03:17,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 16:03:17,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 16:03:17,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7899 millis. select * from t_tages  
 
 2020-11-23 16:03:17,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 16:03:17,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 16:03:17,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 16:03:17,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 16:03:17,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 16:03:17,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 16:03:17,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 16:03:17,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 16:03:17,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 16:03:17,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 16:03:17,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 16:03:17,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:17,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:17,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:17,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:17,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 16:03:17,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 16:03:17,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 16:03:17,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.1954 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 16:03:17,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 16:03:17,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 16:03:17,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 16:03:17,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 16:03:17,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 16:03:17,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 16:03:17,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 16:03:17,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 16:03:17,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.8525 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 16:03:17,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 16:03:17,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 16:03:17,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 16:03:17,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 16:03:17,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 16:03:17,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 16:03:17,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:18,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:18,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 16:03:18,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 16:03:18,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 4.2038 millis. select * from t_types  
 
 2020-11-23 16:03:18,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-23 16:03:18,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-23 16:03:18,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-23 16:03:18,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-23 16:03:18,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-23 16:03:18,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-23 16:03:18,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-23 16:03:18,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-23 16:03:18,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-23 16:03:18,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 16:03:18,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:18,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:18,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 16:03:18,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 16:03:18,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3825 millis. select * from t_tages  
 
 2020-11-23 16:03:18,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 16:03:18,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-23 16:03:18,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-23 16:03:18,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-23 16:03:18,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-23 16:03:18,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-23 16:03:18,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-23 16:03:18,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-23 16:03:18,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-23 16:03:18,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 16:03:18,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 16:03:18,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:18,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:18,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 16:03:18,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 16:03:18,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.2812 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 16:03:18,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 16:03:18,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-23 16:03:18,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-23 16:03:18,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 16:03:18,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 16:03:18,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 16:03:18,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 16:03:18,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2333 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 16:03:18,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-23 16:03:18,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 16:03:18,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 16:03:18,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 16:03:18,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-23 16:03:18,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 16:03:18,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:19,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:19,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:19,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:19,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:19,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 6.1258 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:19,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-23 16:03:19,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:19,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:19,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:19,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-23 16:03:19,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:19,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:27,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:27,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 16:03:27,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 16:03:27,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.3457 millis. select * from t_types  
 
 2020-11-23 16:03:27,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} open  
 
 2020-11-23 16:03:27,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Header: [id, name]  
 
 2020-11-23 16:03:27,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [8, 方法论]  
 
 2020-11-23 16:03:27,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [9, 理论类]  
 
 2020-11-23 16:03:27,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [21, 错误日记]  
 
 2020-11-23 16:03:27,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [23, 开发日记]  
 
 2020-11-23 16:03:27,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [24, 实践论]  
 
 2020-11-23 16:03:27,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [25, 想法论]  
 
 2020-11-23 16:03:27,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} closed  
 
 2020-11-23 16:03:27,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 16:03:27,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:27,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:27,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 16:03:27,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 16:03:27,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.1562 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 16:03:27,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} open  
 
 2020-11-23 16:03:27,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Header: [count(0)]  
 
 2020-11-23 16:03:27,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [2]  
 
 2020-11-23 16:03:27,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} closed  
 
 2020-11-23 16:03:27,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 16:03:27,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 16:03:27,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 16:03:27,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.9704 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 16:03:27,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} open  
 
 2020-11-23 16:03:27,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 16:03:27,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 16:03:27,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 16:03:27,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} closed  
 
 2020-11-23 16:03:27,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 16:03:27,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:28,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:28,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:28,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:28,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.7522 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:28,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} open  
 
 2020-11-23 16:03:28,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:28,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:28,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:28,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50012} closed  
 
 2020-11-23 16:03:28,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:28,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:29,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:29,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 16:03:29,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 16:03:29,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.6156 millis. select * from t_tages  
 
 2020-11-23 16:03:29,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} open  
 
 2020-11-23 16:03:29,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Header: [id, tage]  
 
 2020-11-23 16:03:29,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [1, 学习日记]  
 
 2020-11-23 16:03:29,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [2, 错误笔记]  
 
 2020-11-23 16:03:29,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [3, 数据库笔记]  
 
 2020-11-23 16:03:29,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [4, 程序运行日记]  
 
 2020-11-23 16:03:29,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [5, 开发日记]  
 
 2020-11-23 16:03:29,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [8, 开发手册]  
 
 2020-11-23 16:03:29,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [10, 搭建日记]  
 
 2020-11-23 16:03:29,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} closed  
 
 2020-11-23 16:03:29,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 16:03:29,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:29,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:29,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 16:03:29,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 16:03:29,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.4237 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 16:03:29,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} open  
 
 2020-11-23 16:03:29,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Header: [count(0)]  
 
 2020-11-23 16:03:29,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [2]  
 
 2020-11-23 16:03:29,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} closed  
 
 2020-11-23 16:03:29,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 16:03:29,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 16:03:29,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 16:03:29,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.9175 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 16:03:29,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} open  
 
 2020-11-23 16:03:29,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 16:03:29,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 16:03:29,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 16:03:29,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} closed  
 
 2020-11-23 16:03:29,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 16:03:29,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:29,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:29,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:29,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:29,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.8263 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:29,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} open  
 
 2020-11-23 16:03:29,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:29,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:29,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:29,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} closed  
 
 2020-11-23 16:03:29,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:29,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:30,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:30,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:30,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:30,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6481 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:30,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} open  
 
 2020-11-23 16:03:30,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:30,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:30,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:30,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} closed  
 
 2020-11-23 16:03:30,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:30,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:31,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:31,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 16:03:31,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 16:03:31,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0808 millis. select * from t_tages  
 
 2020-11-23 16:03:31,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} open  
 
 2020-11-23 16:03:31,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Header: [id, tage]  
 
 2020-11-23 16:03:31,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [1, 学习日记]  
 
 2020-11-23 16:03:31,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [2, 错误笔记]  
 
 2020-11-23 16:03:31,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [3, 数据库笔记]  
 
 2020-11-23 16:03:31,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [4, 程序运行日记]  
 
 2020-11-23 16:03:31,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [5, 开发日记]  
 
 2020-11-23 16:03:31,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [8, 开发手册]  
 
 2020-11-23 16:03:31,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} Result: [10, 搭建日记]  
 
 2020-11-23 16:03:31,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50018} closed  
 
 2020-11-23 16:03:31,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 16:03:31,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:31,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:31,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 16:03:31,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 16:03:31,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7975 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 16:03:31,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50019} open  
 
 2020-11-23 16:03:31,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50019} Header: [count(0)]  
 
 2020-11-23 16:03:31,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50019} Result: [2]  
 
 2020-11-23 16:03:31,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50019} closed  
 
 2020-11-23 16:03:31,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 16:03:31,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 16:03:31,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 16:03:31,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.4045 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 16:03:31,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} open  
 
 2020-11-23 16:03:31,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 16:03:31,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 16:03:31,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 16:03:31,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50020} closed  
 
 2020-11-23 16:03:31,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 16:03:31,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:31,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:31,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:31,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:31,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2221 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:31,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} open  
 
 2020-11-23 16:03:31,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:31,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:31,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:31,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50021} closed  
 
 2020-11-23 16:03:31,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:31,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:33,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:33,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 16:03:33,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 16:03:33,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.52 millis. select * from t_types  
 
 2020-11-23 16:03:33,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} open  
 
 2020-11-23 16:03:33,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Header: [id, name]  
 
 2020-11-23 16:03:33,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [8, 方法论]  
 
 2020-11-23 16:03:33,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [9, 理论类]  
 
 2020-11-23 16:03:33,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [21, 错误日记]  
 
 2020-11-23 16:03:33,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [23, 开发日记]  
 
 2020-11-23 16:03:33,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [24, 实践论]  
 
 2020-11-23 16:03:33,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} Result: [25, 想法论]  
 
 2020-11-23 16:03:33,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50022} closed  
 
 2020-11-23 16:03:33,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 16:03:33,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:33,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:33,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 16:03:33,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 16:03:33,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8977 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 16:03:33,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} open  
 
 2020-11-23 16:03:33,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} Header: [count(0)]  
 
 2020-11-23 16:03:33,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} Result: [2]  
 
 2020-11-23 16:03:33,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} closed  
 
 2020-11-23 16:03:33,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 16:03:33,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 16:03:33,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 16:03:33,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2301 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 16:03:33,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} open  
 
 2020-11-23 16:03:33,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 16:03:33,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 16:03:33,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 16:03:33,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} closed  
 
 2020-11-23 16:03:33,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 16:03:33,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:33,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:33,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:33,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:33,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9173 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:33,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} open  
 
 2020-11-23 16:03:33,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:33,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:33,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:33,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50025} closed  
 
 2020-11-23 16:03:33,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:33,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:34,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:34,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 16:03:34,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 16:03:34,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.8739 millis. select * from t_types  
 
 2020-11-23 16:03:34,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} open  
 
 2020-11-23 16:03:34,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Header: [id, name]  
 
 2020-11-23 16:03:34,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [8, 方法论]  
 
 2020-11-23 16:03:34,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [9, 理论类]  
 
 2020-11-23 16:03:34,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [21, 错误日记]  
 
 2020-11-23 16:03:34,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [23, 开发日记]  
 
 2020-11-23 16:03:34,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [24, 实践论]  
 
 2020-11-23 16:03:34,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [25, 想法论]  
 
 2020-11-23 16:03:34,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} closed  
 
 2020-11-23 16:03:34,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 16:03:34,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:34,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:34,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 16:03:34,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 16:03:34,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4868 millis. select * from t_tages  
 
 2020-11-23 16:03:34,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} open  
 
 2020-11-23 16:03:34,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Header: [id, tage]  
 
 2020-11-23 16:03:34,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [1, 学习日记]  
 
 2020-11-23 16:03:34,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [2, 错误笔记]  
 
 2020-11-23 16:03:34,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [3, 数据库笔记]  
 
 2020-11-23 16:03:34,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [4, 程序运行日记]  
 
 2020-11-23 16:03:34,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [5, 开发日记]  
 
 2020-11-23 16:03:34,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [8, 开发手册]  
 
 2020-11-23 16:03:34,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [10, 搭建日记]  
 
 2020-11-23 16:03:34,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} closed  
 
 2020-11-23 16:03:34,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 16:03:34,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:34,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:34,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 16:03:34,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 16:03:34,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.663 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 16:03:34,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} open  
 
 2020-11-23 16:03:34,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} Header: [count(0)]  
 
 2020-11-23 16:03:34,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} Result: [2]  
 
 2020-11-23 16:03:34,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} closed  
 
 2020-11-23 16:03:34,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 16:03:34,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 16:03:34,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 16:03:34,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.7543 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 16:03:34,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} open  
 
 2020-11-23 16:03:34,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 16:03:34,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 16:03:34,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 16:03:34,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} closed  
 
 2020-11-23 16:03:34,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 16:03:34,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:34,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:34,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:34,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:34,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2027 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:34,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} open  
 
 2020-11-23 16:03:34,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:34,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:34,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:34,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50030} closed  
 
 2020-11-23 16:03:34,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:34,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:40,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:40,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_user where username=?  
 
 2020-11-23 16:03:40,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [zhangsan]  
 
 2020-11-23 16:03:40,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 16:03:40,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.9241 millis. select * from t_user where username=?  
 
 2020-11-23 16:03:40,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} open  
 
 2020-11-23 16:03:40,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 16:03:40,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 16:03:40,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50031} closed  
 
 2020-11-23 16:03:40,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 16:03:40,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:40,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:40,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:40,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:40,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2327 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:40,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} open  
 
 2020-11-23 16:03:40,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:40,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:40,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:40,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50032} closed  
 
 2020-11-23 16:03:40,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:40,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:41,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:41,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:41,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:41,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9279 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:41,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} open  
 
 2020-11-23 16:03:41,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:41,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:41,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:41,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50033} closed  
 
 2020-11-23 16:03:41,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:41,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:42,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:42,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 16:03:42,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 16:03:42,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2852 millis. select * from t_tages  
 
 2020-11-23 16:03:42,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} open  
 
 2020-11-23 16:03:42,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Header: [id, tage]  
 
 2020-11-23 16:03:42,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [1, 学习日记]  
 
 2020-11-23 16:03:42,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [2, 错误笔记]  
 
 2020-11-23 16:03:42,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [3, 数据库笔记]  
 
 2020-11-23 16:03:42,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [4, 程序运行日记]  
 
 2020-11-23 16:03:42,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [5, 开发日记]  
 
 2020-11-23 16:03:42,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [8, 开发手册]  
 
 2020-11-23 16:03:42,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} Result: [10, 搭建日记]  
 
 2020-11-23 16:03:42,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50034} closed  
 
 2020-11-23 16:03:42,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 16:03:42,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:42,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:42,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 16:03:42,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 16:03:42,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.134 millis. select * from t_types  
 
 2020-11-23 16:03:42,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} open  
 
 2020-11-23 16:03:42,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Header: [id, name]  
 
 2020-11-23 16:03:42,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [8, 方法论]  
 
 2020-11-23 16:03:42,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [9, 理论类]  
 
 2020-11-23 16:03:42,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [21, 错误日记]  
 
 2020-11-23 16:03:42,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [23, 开发日记]  
 
 2020-11-23 16:03:42,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [24, 实践论]  
 
 2020-11-23 16:03:42,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} Result: [25, 想法论]  
 
 2020-11-23 16:03:42,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50035} closed  
 
 2020-11-23 16:03:42,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 16:03:42,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:42,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:42,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:42,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:42,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.0252 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:42,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} open  
 
 2020-11-23 16:03:42,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:42,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:42,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:42,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50036} closed  
 
 2020-11-23 16:03:42,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:42,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:43,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:43,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 16:03:43,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 16:03:43,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 16:03:43,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.7571 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 16:03:43,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50037} open  
 
 2020-11-23 16:03:43,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50037} Header: [year]  
 
 2020-11-23 16:03:43,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50037} Result: [2020]  
 
 2020-11-23 16:03:43,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50037} closed  
 
 2020-11-23 16:03:43,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 16:03:43,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:43,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:43,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 16:03:43,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [2020]  
 
 2020-11-23 16:03:43,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [VARCHAR]  
 
 2020-11-23 16:03:43,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.9553 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 16:03:43,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50038} open  
 
 2020-11-23 16:03:43,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50038} Header: [id, title, updatetime, flag]  
 
 2020-11-23 16:03:43,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50038} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 16:03:43,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50038} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 16:03:43,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50038} closed  
 
 2020-11-23 16:03:43,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 16:03:43,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:43,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:43,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:43,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:43,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.727 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:43,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50039} open  
 
 2020-11-23 16:03:43,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50039} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:43,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50039} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:43,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50039} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:43,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50039} closed  
 
 2020-11-23 16:03:43,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:43,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:44,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:44,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-23 16:03:44,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [1]  
 
 2020-11-23 16:03:44,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-23 16:03:44,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.8804 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-23 16:03:44,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50040} open  
 
 2020-11-23 16:03:44,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50040} Header: [count(0)]  
 
 2020-11-23 16:03:44,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50040} Result: [2]  
 
 2020-11-23 16:03:44,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50040} closed  
 
 2020-11-23 16:03:44,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 16:03:44,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-23 16:03:44,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [1, 5]  
 
 2020-11-23 16:03:44,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER, INTEGER]  
 
 2020-11-23 16:03:44,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.6812 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-23 16:03:44,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50041} open  
 
 2020-11-23 16:03:44,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50041} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-23 16:03:44,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50041} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-23 16:03:44,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50041} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-23 16:03:44,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50041} closed  
 
 2020-11-23 16:03:44,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-23 16:03:44,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:44,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:44,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:44,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:44,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.0824 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:44,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50042} open  
 
 2020-11-23 16:03:44,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50042} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:44,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50042} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:44,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50042} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:44,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50042} closed  
 
 2020-11-23 16:03:44,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:44,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:45,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:45,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. SELECT count(0) FROM t_types  
 
 2020-11-23 16:03:45,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : []  
 
 2020-11-23 16:03:45,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : []  
 
 2020-11-23 16:03:45,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 3.5522 millis. SELECT count(0) FROM t_types  
 
 2020-11-23 16:03:45,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50043} open  
 
 2020-11-23 16:03:45,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50043} Header: [count(0)]  
 
 2020-11-23 16:03:45,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50043} Result: [6]  
 
 2020-11-23 16:03:45,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50043} closed  
 
 2020-11-23 16:03:45,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-23 16:03:45,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} created. select * from t_types LIMIT ?   
 
 2020-11-23 16:03:45,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : [5]  
 
 2020-11-23 16:03:45,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : [INTEGER]  
 
 2020-11-23 16:03:45,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 1.982 millis. select * from t_types LIMIT ?   
 
 2020-11-23 16:03:45,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50044} open  
 
 2020-11-23 16:03:45,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50044} Header: [id, name]  
 
 2020-11-23 16:03:45,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50044} Result: [8, 方法论]  
 
 2020-11-23 16:03:45,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50044} Result: [9, 理论类]  
 
 2020-11-23 16:03:45,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50044} Result: [21, 错误日记]  
 
 2020-11-23 16:03:45,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50044} Result: [23, 开发日记]  
 
 2020-11-23 16:03:45,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50044} Result: [24, 实践论]  
 
 2020-11-23 16:03:45,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50044} closed  
 
 2020-11-23 16:03:45,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-23 16:03:45,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:45,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:45,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:45,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:45,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.5947 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:45,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50045} open  
 
 2020-11-23 16:03:45,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50045} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:45,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50045} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:45,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50045} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:45,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50045} closed  
 
 2020-11-23 16:03:45,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:45,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:46,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:46,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} created. SELECT count(0) FROM t_tages  
 
 2020-11-23 16:03:46,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : []  
 
 2020-11-23 16:03:46,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : []  
 
 2020-11-23 16:03:46,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 2.0012 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 16:03:46,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50046} open  
 
 2020-11-23 16:03:46,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50046} Header: [count(0)]  
 
 2020-11-23 16:03:46,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50046} Result: [7]  
 
 2020-11-23 16:03:46,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50046} closed  
 
 2020-11-23 16:03:46,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-23 16:03:46,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} created. select * from t_tages LIMIT ?   
 
 2020-11-23 16:03:46,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Parameters : [5]  
 
 2020-11-23 16:03:46,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Types : [INTEGER]  
 
 2020-11-23 16:03:46,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} executed. 2.2344 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 16:03:46,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50047} open  
 
 2020-11-23 16:03:46,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50047} Header: [id, tage]  
 
 2020-11-23 16:03:46,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50047} Result: [1, 学习日记]  
 
 2020-11-23 16:03:46,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50047} Result: [2, 错误笔记]  
 
 2020-11-23 16:03:46,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50047} Result: [3, 数据库笔记]  
 
 2020-11-23 16:03:46,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50047} Result: [4, 程序运行日记]  
 
 2020-11-23 16:03:46,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50047} Result: [5, 开发日记]  
 
 2020-11-23 16:03:46,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50047} closed  
 
 2020-11-23 16:03:46,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} clearParameters.   
 
 2020-11-23 16:03:46,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:46,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:46,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:46,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:46,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.4537 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:46,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50048} open  
 
 2020-11-23 16:03:46,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50048} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:46,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50048} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:46,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50048} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:46,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50048} closed  
 
 2020-11-23 16:03:46,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:46,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:48,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:48,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 16:03:48,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 16:03:48,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.5136 millis. select * from t_tages  
 
 2020-11-23 16:03:48,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} open  
 
 2020-11-23 16:03:48,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} Header: [id, tage]  
 
 2020-11-23 16:03:48,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} Result: [1, 学习日记]  
 
 2020-11-23 16:03:48,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} Result: [2, 错误笔记]  
 
 2020-11-23 16:03:48,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} Result: [3, 数据库笔记]  
 
 2020-11-23 16:03:48,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} Result: [4, 程序运行日记]  
 
 2020-11-23 16:03:48,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} Result: [5, 开发日记]  
 
 2020-11-23 16:03:48,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} Result: [8, 开发手册]  
 
 2020-11-23 16:03:48,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} Result: [10, 搭建日记]  
 
 2020-11-23 16:03:48,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50049} closed  
 
 2020-11-23 16:03:48,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 16:03:48,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:48,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:48,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 16:03:48,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 16:03:48,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.1962 millis. select * from t_types  
 
 2020-11-23 16:03:48,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} open  
 
 2020-11-23 16:03:48,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} Header: [id, name]  
 
 2020-11-23 16:03:48,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} Result: [8, 方法论]  
 
 2020-11-23 16:03:48,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} Result: [9, 理论类]  
 
 2020-11-23 16:03:48,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} Result: [21, 错误日记]  
 
 2020-11-23 16:03:48,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} Result: [23, 开发日记]  
 
 2020-11-23 16:03:48,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} Result: [24, 实践论]  
 
 2020-11-23 16:03:48,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} Result: [25, 想法论]  
 
 2020-11-23 16:03:48,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50050} closed  
 
 2020-11-23 16:03:48,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 16:03:48,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:03:48,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:03:48,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:03:48,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:03:48,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.716 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:03:48,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50051} open  
 
 2020-11-23 16:03:48,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50051} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:03:48,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50051} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:03:48,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50051} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:03:48,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50051} closed  
 
 2020-11-23 16:03:48,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:03:48,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:04:08,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:04:08,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 16:04:08,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 16:04:08,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.7367 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 16:04:08,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50052} open  
 
 2020-11-23 16:04:08,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50052} Header: [year]  
 
 2020-11-23 16:04:08,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50052} Result: [2020]  
 
 2020-11-23 16:04:08,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50052} closed  
 
 2020-11-23 16:04:08,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 16:04:08,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:04:08,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:04:08,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [2020]  
 
 2020-11-23 16:04:08,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [VARCHAR]  
 
 2020-11-23 16:04:08,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.5574 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 16:04:08,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50053} open  
 
 2020-11-23 16:04:08,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50053} Header: [id, title, updatetime, flag]  
 
 2020-11-23 16:04:08,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50053} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 16:04:08,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50053} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 16:04:08,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50053} closed  
 
 2020-11-23 16:04:08,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 16:04:08,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 16:04:08,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 16:04:08,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 16:04:08,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 16:04:08,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.7716 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 16:04:08,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50054} open  
 
 2020-11-23 16:04:08,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50054} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 16:04:08,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50054} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 16:04:08,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50054} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 16:04:08,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50054} closed  
 
 2020-11-23 16:04:08,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 16:04:08,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:27,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1259} connected  
 
 2020-11-23 21:15:27,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1260} connected  
 
 2020-11-23 21:15:27,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1261} connected  
 
 2020-11-23 21:15:27,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1262} connected  
 
 2020-11-23 21:15:27,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1263} connected  
 
 2020-11-23 21:15:27,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:27,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 21:15:27,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 21:15:27,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 21:15:27,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 37.2318 millis. select * from t_types  
 
 2020-11-23 21:15:27,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 21:15:27,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 21:15:27,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 21:15:27,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 21:15:27,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 21:15:27,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 21:15:27,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 21:15:27,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 21:15:27,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 21:15:27,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 21:15:27,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:27,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:27,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 21:15:27,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:15:27,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:15:27,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.785 millis. select * from t_tages  
 
 2020-11-23 21:15:27,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 21:15:27,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 21:15:27,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 21:15:27,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 21:15:27,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 21:15:27,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 21:15:27,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 21:15:27,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 21:15:27,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 21:15:27,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 21:15:27,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:15:27,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:27,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:27,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:27,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:27,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 21:15:27,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 21:15:27,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 21:15:27,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 15.5141 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 21:15:27,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 21:15:27,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 21:15:27,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 21:15:27,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 21:15:27,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 21:15:28,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 21:15:28,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 21:15:28,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 21:15:28,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.1701 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 21:15:28,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 21:15:28,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 21:15:28,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 21:15:28,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 21:15:28,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 21:15:28,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 21:15:28,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:28,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:28,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 21:15:28,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 21:15:28,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.549 millis. select * from t_types  
 
 2020-11-23 21:15:28,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-23 21:15:28,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-23 21:15:28,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-23 21:15:28,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-23 21:15:28,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-23 21:15:28,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-23 21:15:28,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-23 21:15:28,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-23 21:15:28,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-23 21:15:28,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 21:15:28,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:28,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:28,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:15:28,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:15:28,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.7474 millis. select * from t_tages  
 
 2020-11-23 21:15:28,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 21:15:28,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-23 21:15:28,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-23 21:15:28,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-23 21:15:28,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-23 21:15:28,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-23 21:15:28,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-23 21:15:28,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-23 21:15:28,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-23 21:15:28,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 21:15:28,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:15:28,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:28,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:28,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 21:15:28,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 21:15:28,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.8443 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 21:15:28,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 21:15:28,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-23 21:15:28,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-23 21:15:28,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 21:15:28,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 21:15:28,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 21:15:28,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 21:15:28,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.1502 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 21:15:28,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-23 21:15:28,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 21:15:28,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 21:15:28,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 21:15:28,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-23 21:15:28,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 21:15:28,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:30,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:30,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:15:30,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:15:30,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:15:30,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 6.8688 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:15:30,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-23 21:15:30,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:15:30,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:15:30,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:15:30,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-23 21:15:30,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:15:30,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:34,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:34,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_blog_tages tbt, t_tages tages WHERE tb.id = tub.bid AND tub.uid = us.id AND tages.id = tbt.tid AND tb.id = tbt.bid AND tages.tage = ?  
 
 2020-11-23 21:15:34,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [学习日记]  
 
 2020-11-23 21:15:34,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 21:15:34,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 9.8025 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us, t_blog_tages tbt, t_tages tages WHERE tb.id = tub.bid AND tub.uid = us.id AND tages.id = tbt.tid AND tb.id = tbt.bid AND tages.tage = ?  
 
 2020-11-23 21:15:34,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-23 21:15:34,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-23 21:15:34,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [1]  
 
 2020-11-23 21:15:34,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-23 21:15:34,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 21:15:34,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us,t_blog_tages tbt,t_tages tages
         where
        tb.id=tub.bid and tub.uid=us.id and tages.id=tbt.tid and tb.id=tbt.bid
            and
            tages.tage=? LIMIT ?   
 
 2020-11-23 21:15:34,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [学习日记, 4]  
 
 2020-11-23 21:15:34,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 21:15:34,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.3238 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us,t_blog_tages tbt,t_tages tages
         where
        tb.id=tub.bid and tub.uid=us.id and tages.id=tbt.tid and tb.id=tbt.bid
            and
            tages.tage=? LIMIT ?   
 
 2020-11-23 21:15:34,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-23 21:15:34,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-23 21:15:34,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 原创]  
 
 2020-11-23 21:15:34,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-23 21:15:34,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:15:34,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:36,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:36,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:15:36,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:15:36,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.281 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:15:36,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} open  
 
 2020-11-23 21:15:36,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:15:36,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:15:36,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:15:36,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} closed  
 
 2020-11-23 21:15:36,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:15:36,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:42,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:42,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 21:15:42,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 21:15:42,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.3123 millis. select * from t_types  
 
 2020-11-23 21:15:42,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} open  
 
 2020-11-23 21:15:42,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Header: [id, name]  
 
 2020-11-23 21:15:42,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [8, 方法论]  
 
 2020-11-23 21:15:42,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [9, 理论类]  
 
 2020-11-23 21:15:42,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [21, 错误日记]  
 
 2020-11-23 21:15:42,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [23, 开发日记]  
 
 2020-11-23 21:15:42,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [24, 实践论]  
 
 2020-11-23 21:15:42,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [25, 想法论]  
 
 2020-11-23 21:15:42,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} closed  
 
 2020-11-23 21:15:42,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 21:15:42,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:42,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:42,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:15:42,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:15:42,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9063 millis. select * from t_tages  
 
 2020-11-23 21:15:42,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} open  
 
 2020-11-23 21:15:42,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Header: [id, tage]  
 
 2020-11-23 21:15:42,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [1, 学习日记]  
 
 2020-11-23 21:15:42,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [2, 错误笔记]  
 
 2020-11-23 21:15:42,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [3, 数据库笔记]  
 
 2020-11-23 21:15:42,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [4, 程序运行日记]  
 
 2020-11-23 21:15:42,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [5, 开发日记]  
 
 2020-11-23 21:15:42,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [8, 开发手册]  
 
 2020-11-23 21:15:42,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [10, 搭建日记]  
 
 2020-11-23 21:15:42,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} closed  
 
 2020-11-23 21:15:42,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:15:42,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:42,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:42,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 21:15:42,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 21:15:42,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4543 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 21:15:42,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} open  
 
 2020-11-23 21:15:42,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Header: [count(0)]  
 
 2020-11-23 21:15:42,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [2]  
 
 2020-11-23 21:15:42,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} closed  
 
 2020-11-23 21:15:42,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 21:15:42,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 21:15:42,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 21:15:42,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.5552 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 21:15:42,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} open  
 
 2020-11-23 21:15:42,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 21:15:42,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 21:15:42,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 21:15:42,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} closed  
 
 2020-11-23 21:15:42,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 21:15:42,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:15:42,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:15:42,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:15:42,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:15:42,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6062 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:15:42,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} open  
 
 2020-11-23 21:15:42,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:15:42,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:15:42,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:15:42,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50016} closed  
 
 2020-11-23 21:15:42,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:15:42,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:23,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1264} connected  
 
 2020-11-23 21:17:23,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1265} connected  
 
 2020-11-23 21:17:23,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1266} connected  
 
 2020-11-23 21:17:23,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1267} connected  
 
 2020-11-23 21:17:23,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1268} connected  
 
 2020-11-23 21:17:23,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:23,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-23 21:17:23,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 21:17:23,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 21:17:23,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 19.8522 millis. select * from t_types  
 
 2020-11-23 21:17:23,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 21:17:23,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-23 21:17:23,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-23 21:17:23,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-23 21:17:23,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-23 21:17:23,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-23 21:17:23,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-23 21:17:23,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-23 21:17:23,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 21:17:23,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 21:17:23,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:23,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:23,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-23 21:17:23,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:17:23,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:17:23,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.64 millis. select * from t_tages  
 
 2020-11-23 21:17:23,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 21:17:23,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-23 21:17:23,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-23 21:17:23,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-23 21:17:23,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-23 21:17:23,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-23 21:17:23,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-23 21:17:23,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-23 21:17:23,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-23 21:17:23,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 21:17:23,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:17:23,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:23,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:23,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:23,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:23,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 21:17:23,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 21:17:23,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 21:17:23,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.9755 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 21:17:23,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-23 21:17:23,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-23 21:17:23,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-23 21:17:23,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-23 21:17:23,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 21:17:23,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 21:17:23,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 21:17:23,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 21:17:23,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.27 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 21:17:23,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-23 21:17:23,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 21:17:23,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 21:17:23,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 21:17:23,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-23 21:17:23,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 21:17:23,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:26,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:26,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-23 21:17:26,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-23 21:17:26,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.7405 millis. select * from t_types  
 
 2020-11-23 21:17:26,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-23 21:17:26,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-23 21:17:26,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-23 21:17:26,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-23 21:17:26,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-23 21:17:26,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-23 21:17:26,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-23 21:17:26,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-23 21:17:26,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-23 21:17:26,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 21:17:26,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:26,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:26,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:17:26,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:17:26,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.6549 millis. select * from t_tages  
 
 2020-11-23 21:17:26,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 21:17:26,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-23 21:17:26,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-23 21:17:26,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-23 21:17:26,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-23 21:17:26,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-23 21:17:26,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-23 21:17:26,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-23 21:17:26,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-23 21:17:26,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 21:17:26,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:17:26,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:26,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:26,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 21:17:26,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 21:17:26,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3288 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-23 21:17:26,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-23 21:17:26,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-23 21:17:26,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-23 21:17:26,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-23 21:17:26,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 21:17:26,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-23 21:17:26,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 21:17:26,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.2872 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-23 21:17:26,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-23 21:17:26,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-23 21:17:26,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 16, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-23 21:17:26,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 9, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-23 21:17:26,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-23 21:17:26,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 21:17:26,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:27,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:27,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:17:27,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:17:27,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:17:27,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.7019 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:17:27,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-23 21:17:27,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:17:27,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:17:27,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:17:27,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-23 21:17:27,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:17:27,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:33,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:33,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_user where username=?  
 
 2020-11-23 21:17:33,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [zhangsan]  
 
 2020-11-23 21:17:33,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-23 21:17:33,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 6.8859 millis. select * from t_user where username=?  
 
 2020-11-23 21:17:33,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-23 21:17:33,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 21:17:33,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 21:17:33,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-23 21:17:33,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 21:17:33,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:33,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:33,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:17:33,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:17:33,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.6244 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:17:33,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} open  
 
 2020-11-23 21:17:33,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:17:33,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:17:33,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:17:33,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} closed  
 
 2020-11-23 21:17:33,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:17:33,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:33,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:33,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:17:33,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:17:33,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.1772 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:17:33,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} open  
 
 2020-11-23 21:17:33,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:17:33,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:17:33,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:17:33,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} closed  
 
 2020-11-23 21:17:33,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:17:33,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:40,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:40,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:17:40,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:17:40,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:17:40,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 15.5238 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:17:40,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} open  
 
 2020-11-23 21:17:40,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} Header: [count(0)]  
 
 2020-11-23 21:17:40,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} Result: [7]  
 
 2020-11-23 21:17:40,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50012} closed  
 
 2020-11-23 21:17:40,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:17:40,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_tages LIMIT ?   
 
 2020-11-23 21:17:40,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5]  
 
 2020-11-23 21:17:40,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 21:17:40,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.3399 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:17:40,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} open  
 
 2020-11-23 21:17:40,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Header: [id, tage]  
 
 2020-11-23 21:17:40,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Result: [1, 学习日记]  
 
 2020-11-23 21:17:40,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Result: [2, 错误笔记]  
 
 2020-11-23 21:17:40,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Result: [3, 数据库笔记]  
 
 2020-11-23 21:17:40,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Result: [4, 程序运行日记]  
 
 2020-11-23 21:17:40,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Result: [5, 开发日记]  
 
 2020-11-23 21:17:40,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} closed  
 
 2020-11-23 21:17:40,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 21:17:40,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:40,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:40,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:17:40,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:17:40,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.4598 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:17:40,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} open  
 
 2020-11-23 21:17:40,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:17:40,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:17:40,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:17:40,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} closed  
 
 2020-11-23 21:17:40,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:17:40,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:45,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:45,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:17:45,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:17:45,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.4209 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:17:45,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50015} open  
 
 2020-11-23 21:17:45,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50015} Header: [count(0)]  
 
 2020-11-23 21:17:45,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50015} Result: [7]  
 
 2020-11-23 21:17:45,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50015} closed  
 
 2020-11-23 21:17:45,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:17:45,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:17:45,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5, 5]  
 
 2020-11-23 21:17:45,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:17:45,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.0403 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:17:45,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} open  
 
 2020-11-23 21:17:45,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Header: [id, tage]  
 
 2020-11-23 21:17:45,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Result: [8, 开发手册]  
 
 2020-11-23 21:17:45,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Result: [10, 搭建日记]  
 
 2020-11-23 21:17:45,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} closed  
 
 2020-11-23 21:17:45,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 21:17:45,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:45,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:45,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:17:45,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:17:45,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.5712 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:17:45,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} open  
 
 2020-11-23 21:17:45,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:17:45,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:17:45,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:17:45,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50017} closed  
 
 2020-11-23 21:17:45,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:17:45,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:52,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:52,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. delete from t_tages where id=?  
 
 2020-11-23 21:17:52,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [10]  
 
 2020-11-23 21:17:52,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER]  
 
 2020-11-23 21:17:52,434 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20009} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:17:52,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-23 21:17:52,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} closed  
 
 2020-11-23 21:17:52,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:52,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:52,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:54,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:54,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. delete from t_tages where id=?  
 
 2020-11-23 21:17:54,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [10]  
 
 2020-11-23 21:17:54,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [INTEGER]  
 
 2020-11-23 21:17:54,993 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20010} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:17:54,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-23 21:17:54,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} closed  
 
 2020-11-23 21:17:54,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:56,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:56,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:17:56,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:17:56,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.0152 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:17:56,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50018} open  
 
 2020-11-23 21:17:56,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50018} Header: [count(0)]  
 
 2020-11-23 21:17:56,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50018} Result: [7]  
 
 2020-11-23 21:17:56,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50018} closed  
 
 2020-11-23 21:17:56,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:17:56,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5, 5]  
 
 2020-11-23 21:17:56,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:17:56,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.3703 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:17:56,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50019} open  
 
 2020-11-23 21:17:56,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50019} Header: [id, tage]  
 
 2020-11-23 21:17:56,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50019} Result: [8, 开发手册]  
 
 2020-11-23 21:17:56,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50019} Result: [10, 搭建日记]  
 
 2020-11-23 21:17:56,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50019} closed  
 
 2020-11-23 21:17:56,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 21:17:56,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:17:56,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:17:56,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:17:56,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:17:56,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.1319 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:17:56,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} open  
 
 2020-11-23 21:17:56,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:17:56,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:17:56,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:17:56,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50020} closed  
 
 2020-11-23 21:17:56,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:17:56,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:00,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:00,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:00,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:00,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.7626 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:00,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50021} open  
 
 2020-11-23 21:18:00,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50021} Header: [count(0)]  
 
 2020-11-23 21:18:00,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50021} Result: [7]  
 
 2020-11-23 21:18:00,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50021} closed  
 
 2020-11-23 21:18:00,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:00,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5]  
 
 2020-11-23 21:18:00,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 21:18:00,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.83 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:18:00,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50022} open  
 
 2020-11-23 21:18:00,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50022} Header: [id, tage]  
 
 2020-11-23 21:18:00,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50022} Result: [1, 学习日记]  
 
 2020-11-23 21:18:00,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50022} Result: [2, 错误笔记]  
 
 2020-11-23 21:18:00,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50022} Result: [3, 数据库笔记]  
 
 2020-11-23 21:18:00,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50022} Result: [4, 程序运行日记]  
 
 2020-11-23 21:18:00,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50022} Result: [5, 开发日记]  
 
 2020-11-23 21:18:00,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50022} closed  
 
 2020-11-23 21:18:00,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 21:18:00,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:01,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:01,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:01,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:01,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.1055 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:01,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50023} open  
 
 2020-11-23 21:18:01,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50023} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:01,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50023} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:01,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50023} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:01,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50023} closed  
 
 2020-11-23 21:18:01,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:01,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:02,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:02,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:02,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:02,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.7021 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:02,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50024} open  
 
 2020-11-23 21:18:02,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50024} Header: [count(0)]  
 
 2020-11-23 21:18:02,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50024} Result: [7]  
 
 2020-11-23 21:18:02,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50024} closed  
 
 2020-11-23 21:18:02,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:02,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5, 5]  
 
 2020-11-23 21:18:02,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:18:02,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.16 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:18:02,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} open  
 
 2020-11-23 21:18:02,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} Header: [id, tage]  
 
 2020-11-23 21:18:03,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} Result: [8, 开发手册]  
 
 2020-11-23 21:18:03,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} Result: [10, 搭建日记]  
 
 2020-11-23 21:18:03,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50025} closed  
 
 2020-11-23 21:18:03,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 21:18:03,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:03,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:03,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:03,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:03,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.1634 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:03,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} open  
 
 2020-11-23 21:18:03,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:03,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:03,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:03,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50026} closed  
 
 2020-11-23 21:18:03,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:03,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:05,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:05,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} created. delete from t_tages where id=?  
 
 2020-11-23 21:18:05,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : [10]  
 
 2020-11-23 21:18:05,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : [INTEGER]  
 
 2020-11-23 21:18:05,230 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20011} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:18:05,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-23 21:18:05,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} closed  
 
 2020-11-23 21:18:05,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:11,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:11,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} created. select * from t_tages where id=?  
 
 2020-11-23 21:18:11,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [8]  
 
 2020-11-23 21:18:11,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER]  
 
 2020-11-23 21:18:11,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 5.4564 millis. select * from t_tages where id=?  
 
 2020-11-23 21:18:11,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50027} open  
 
 2020-11-23 21:18:11,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50027} Header: [id, tage]  
 
 2020-11-23 21:18:11,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50027} Result: [8, 开发手册]  
 
 2020-11-23 21:18:11,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50027} closed  
 
 2020-11-23 21:18:11,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-23 21:18:11,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:11,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:11,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:11,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:11,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6296 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:11,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} open  
 
 2020-11-23 21:18:11,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:11,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:11,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:11,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50028} closed  
 
 2020-11-23 21:18:11,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:11,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:14,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:14,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:14,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:14,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.6947 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:14,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50029} open  
 
 2020-11-23 21:18:14,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50029} Header: [count(0)]  
 
 2020-11-23 21:18:14,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50029} Result: [7]  
 
 2020-11-23 21:18:14,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50029} closed  
 
 2020-11-23 21:18:14,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:14,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5, 5]  
 
 2020-11-23 21:18:14,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:18:14,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.6166 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:18:14,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} open  
 
 2020-11-23 21:18:14,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} Header: [id, tage]  
 
 2020-11-23 21:18:14,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} Result: [8, 开发手册]  
 
 2020-11-23 21:18:14,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} Result: [10, 搭建日记]  
 
 2020-11-23 21:18:14,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50030} closed  
 
 2020-11-23 21:18:14,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 21:18:14,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:15,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:15,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:15,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:15,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.6231 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:15,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50031} open  
 
 2020-11-23 21:18:15,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50031} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:15,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50031} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:15,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50031} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:15,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50031} closed  
 
 2020-11-23 21:18:15,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:15,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:16,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:16,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:16,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:16,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 4.0216 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:16,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} open  
 
 2020-11-23 21:18:16,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Header: [count(0)]  
 
 2020-11-23 21:18:16,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} Result: [7]  
 
 2020-11-23 21:18:16,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50032} closed  
 
 2020-11-23 21:18:16,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:16,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5]  
 
 2020-11-23 21:18:16,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 21:18:16,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.0254 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:18:16,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} open  
 
 2020-11-23 21:18:16,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} Header: [id, tage]  
 
 2020-11-23 21:18:16,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} Result: [1, 学习日记]  
 
 2020-11-23 21:18:16,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} Result: [2, 错误笔记]  
 
 2020-11-23 21:18:16,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} Result: [3, 数据库笔记]  
 
 2020-11-23 21:18:16,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} Result: [4, 程序运行日记]  
 
 2020-11-23 21:18:16,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} Result: [5, 开发日记]  
 
 2020-11-23 21:18:16,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50033} closed  
 
 2020-11-23 21:18:16,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 21:18:16,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:16,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:16,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:16,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:16,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.009 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:16,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} open  
 
 2020-11-23 21:18:16,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:16,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:16,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:16,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50034} closed  
 
 2020-11-23 21:18:16,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:16,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:18,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:18,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} created. delete from t_tages where id=?  
 
 2020-11-23 21:18:18,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Parameters : [3]  
 
 2020-11-23 21:18:18,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Types : [INTEGER]  
 
 2020-11-23 21:18:18,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} executed. 23.5922 millis. delete from t_tages where id=?  
 
 2020-11-23 21:18:18,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} clearParameters.   
 
 2020-11-23 21:18:18,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:18,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:18,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:18,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:18,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.1934 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:18,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50035} open  
 
 2020-11-23 21:18:18,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50035} Header: [count(0)]  
 
 2020-11-23 21:18:18,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50035} Result: [6]  
 
 2020-11-23 21:18:18,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50035} closed  
 
 2020-11-23 21:18:18,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:18,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5]  
 
 2020-11-23 21:18:18,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 21:18:18,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.5381 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:18:18,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50036} open  
 
 2020-11-23 21:18:18,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50036} Header: [id, tage]  
 
 2020-11-23 21:18:18,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50036} Result: [1, 学习日记]  
 
 2020-11-23 21:18:18,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50036} Result: [2, 错误笔记]  
 
 2020-11-23 21:18:18,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50036} Result: [4, 程序运行日记]  
 
 2020-11-23 21:18:18,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50036} Result: [5, 开发日记]  
 
 2020-11-23 21:18:18,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50036} Result: [8, 开发手册]  
 
 2020-11-23 21:18:18,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50036} closed  
 
 2020-11-23 21:18:18,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 21:18:18,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:18,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:18,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:18,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:18,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.486 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:18,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} open  
 
 2020-11-23 21:18:18,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:18,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:18,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:18,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50037} closed  
 
 2020-11-23 21:18:18,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:18,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:24,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:24,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:24,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:24,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.999 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:24,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50038} open  
 
 2020-11-23 21:18:24,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50038} Header: [count(0)]  
 
 2020-11-23 21:18:24,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50038} Result: [6]  
 
 2020-11-23 21:18:24,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50038} closed  
 
 2020-11-23 21:18:24,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:24,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5, 5]  
 
 2020-11-23 21:18:24,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:18:24,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.3557 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:18:24,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50039} open  
 
 2020-11-23 21:18:24,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50039} Header: [id, tage]  
 
 2020-11-23 21:18:24,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50039} Result: [10, 搭建日记]  
 
 2020-11-23 21:18:24,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50039} closed  
 
 2020-11-23 21:18:24,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 21:18:24,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:25,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:25,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:25,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:25,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.4798 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:25,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} open  
 
 2020-11-23 21:18:25,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:25,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:25,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:25,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50040} closed  
 
 2020-11-23 21:18:25,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:25,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:28,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:28,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Parameters : [10]  
 
 2020-11-23 21:18:28,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Types : [INTEGER]  
 
 2020-11-23 21:18:28,533 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20013} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:18:28,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} clearParameters.   
 
 2020-11-23 21:18:28,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} closed  
 
 2020-11-23 21:18:28,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:36,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:36,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:36,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:36,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.7159 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:36,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50041} open  
 
 2020-11-23 21:18:36,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50041} Header: [count(0)]  
 
 2020-11-23 21:18:36,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50041} Result: [6]  
 
 2020-11-23 21:18:36,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50041} closed  
 
 2020-11-23 21:18:36,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:36,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5]  
 
 2020-11-23 21:18:36,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 21:18:36,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.0798 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:18:36,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50042} open  
 
 2020-11-23 21:18:36,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50042} Header: [id, tage]  
 
 2020-11-23 21:18:36,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50042} Result: [1, 学习日记]  
 
 2020-11-23 21:18:36,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50042} Result: [2, 错误笔记]  
 
 2020-11-23 21:18:36,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50042} Result: [4, 程序运行日记]  
 
 2020-11-23 21:18:36,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50042} Result: [5, 开发日记]  
 
 2020-11-23 21:18:36,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50042} Result: [8, 开发手册]  
 
 2020-11-23 21:18:36,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50042} closed  
 
 2020-11-23 21:18:36,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 21:18:36,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:36,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:36,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:36,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:36,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.5709 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:36,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50043} open  
 
 2020-11-23 21:18:36,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50043} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:36,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50043} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:36,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50043} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:36,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50043} closed  
 
 2020-11-23 21:18:36,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:36,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:42,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:42,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-23 21:18:42,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} Parameters : [1]  
 
 2020-11-23 21:18:42,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} Types : [INTEGER]  
 
 2020-11-23 21:18:42,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} executed. 3.1847 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-23 21:18:42,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50044} open  
 
 2020-11-23 21:18:42,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50044} Header: [count(0)]  
 
 2020-11-23 21:18:42,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50044} Result: [2]  
 
 2020-11-23 21:18:42,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20014, rs-50044} closed  
 
 2020-11-23 21:18:42,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20014} clearParameters.   
 
 2020-11-23 21:18:42,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20015} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-23 21:18:42,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20015} Parameters : [1, 5]  
 
 2020-11-23 21:18:42,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20015} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:18:42,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20015} executed. 2.3271 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-23 21:18:42,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20015, rs-50045} open  
 
 2020-11-23 21:18:42,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20015, rs-50045} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-23 21:18:42,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20015, rs-50045} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-23 21:18:42,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20015, rs-50045} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-23 21:18:42,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20015, rs-50045} closed  
 
 2020-11-23 21:18:42,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20015} clearParameters.   
 
 2020-11-23 21:18:42,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:42,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:42,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:42,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:42,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.3221 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:42,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50046} open  
 
 2020-11-23 21:18:42,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50046} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:42,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50046} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:42,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50046} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:42,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50046} closed  
 
 2020-11-23 21:18:42,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:42,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:48,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:48,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} created. SELECT count(0) FROM t_types  
 
 2020-11-23 21:18:48,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} Parameters : []  
 
 2020-11-23 21:18:48,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} Types : []  
 
 2020-11-23 21:18:48,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} executed. 3.4182 millis. SELECT count(0) FROM t_types  
 
 2020-11-23 21:18:48,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50047} open  
 
 2020-11-23 21:18:48,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50047} Header: [count(0)]  
 
 2020-11-23 21:18:48,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50047} Result: [6]  
 
 2020-11-23 21:18:48,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50047} closed  
 
 2020-11-23 21:18:48,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} clearParameters.   
 
 2020-11-23 21:18:48,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} created. select * from t_types LIMIT ?   
 
 2020-11-23 21:18:48,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} Parameters : [5]  
 
 2020-11-23 21:18:48,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} Types : [INTEGER]  
 
 2020-11-23 21:18:48,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} executed. 2.0017 millis. select * from t_types LIMIT ?   
 
 2020-11-23 21:18:48,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50048} open  
 
 2020-11-23 21:18:48,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50048} Header: [id, name]  
 
 2020-11-23 21:18:48,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50048} Result: [8, 方法论]  
 
 2020-11-23 21:18:48,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50048} Result: [9, 理论类]  
 
 2020-11-23 21:18:48,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50048} Result: [21, 错误日记]  
 
 2020-11-23 21:18:48,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50048} Result: [23, 开发日记]  
 
 2020-11-23 21:18:48,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50048} Result: [24, 实践论]  
 
 2020-11-23 21:18:48,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50048} closed  
 
 2020-11-23 21:18:48,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} clearParameters.   
 
 2020-11-23 21:18:48,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:48,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:48,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:48,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:48,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.3597 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:48,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50049} open  
 
 2020-11-23 21:18:48,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50049} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:48,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50049} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:48,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50049} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:48,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50049} closed  
 
 2020-11-23 21:18:48,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:48,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:51,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:51,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20018} created. delete from t_types where id=?  
 
 2020-11-23 21:18:51,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20018} Parameters : [24]  
 
 2020-11-23 21:18:51,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20018} Types : [INTEGER]  
 
 2020-11-23 21:18:51,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20018} executed. 17.0617 millis. delete from t_types where id=?  
 
 2020-11-23 21:18:51,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20018} clearParameters.   
 
 2020-11-23 21:18:51,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:51,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:51,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} Parameters : []  
 
 2020-11-23 21:18:51,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} Types : []  
 
 2020-11-23 21:18:51,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} executed. 3.2036 millis. SELECT count(0) FROM t_types  
 
 2020-11-23 21:18:51,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50050} open  
 
 2020-11-23 21:18:51,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50050} Header: [count(0)]  
 
 2020-11-23 21:18:51,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50050} Result: [5]  
 
 2020-11-23 21:18:51,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20016, rs-50050} closed  
 
 2020-11-23 21:18:51,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20016} clearParameters.   
 
 2020-11-23 21:18:51,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} Parameters : [5]  
 
 2020-11-23 21:18:51,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} Types : [INTEGER]  
 
 2020-11-23 21:18:51,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} executed. 3.484 millis. select * from t_types LIMIT ?   
 
 2020-11-23 21:18:51,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50051} open  
 
 2020-11-23 21:18:51,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50051} Header: [id, name]  
 
 2020-11-23 21:18:51,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50051} Result: [8, 方法论]  
 
 2020-11-23 21:18:51,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50051} Result: [9, 理论类]  
 
 2020-11-23 21:18:51,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50051} Result: [21, 错误日记]  
 
 2020-11-23 21:18:51,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50051} Result: [23, 开发日记]  
 
 2020-11-23 21:18:51,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50051} Result: [25, 想法论]  
 
 2020-11-23 21:18:51,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20017, rs-50051} closed  
 
 2020-11-23 21:18:51,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20017} clearParameters.   
 
 2020-11-23 21:18:51,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:51,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:51,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:51,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:51,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.1734 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:51,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50052} open  
 
 2020-11-23 21:18:51,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50052} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:51,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50052} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:51,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50052} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:51,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50052} closed  
 
 2020-11-23 21:18:51,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:51,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:53,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:53,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:53,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:53,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.9311 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:53,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50053} open  
 
 2020-11-23 21:18:53,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50053} Header: [count(0)]  
 
 2020-11-23 21:18:53,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50053} Result: [6]  
 
 2020-11-23 21:18:53,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50053} closed  
 
 2020-11-23 21:18:53,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:53,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5]  
 
 2020-11-23 21:18:53,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-23 21:18:53,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.9726 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:18:53,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50054} open  
 
 2020-11-23 21:18:53,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50054} Header: [id, tage]  
 
 2020-11-23 21:18:53,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50054} Result: [1, 学习日记]  
 
 2020-11-23 21:18:53,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50054} Result: [2, 错误笔记]  
 
 2020-11-23 21:18:53,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50054} Result: [4, 程序运行日记]  
 
 2020-11-23 21:18:53,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50054} Result: [5, 开发日记]  
 
 2020-11-23 21:18:53,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50054} Result: [8, 开发手册]  
 
 2020-11-23 21:18:53,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50054} closed  
 
 2020-11-23 21:18:53,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 21:18:53,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:53,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:53,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:53,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:53,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.4451 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:53,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50055} open  
 
 2020-11-23 21:18:53,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50055} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:53,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50055} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:53,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50055} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:53,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50055} closed  
 
 2020-11-23 21:18:53,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:53,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:55,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:55,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:18:55,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:18:55,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.8846 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:18:55,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50056} open  
 
 2020-11-23 21:18:55,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50056} Header: [count(0)]  
 
 2020-11-23 21:18:55,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50056} Result: [6]  
 
 2020-11-23 21:18:55,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50056} closed  
 
 2020-11-23 21:18:55,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:18:55,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5, 5]  
 
 2020-11-23 21:18:55,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:18:55,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 1.8088 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:18:55,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50057} open  
 
 2020-11-23 21:18:55,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50057} Header: [id, tage]  
 
 2020-11-23 21:18:55,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50057} Result: [10, 搭建日记]  
 
 2020-11-23 21:18:55,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50057} closed  
 
 2020-11-23 21:18:55,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 21:18:55,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:18:55,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:18:55,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-23 21:18:55,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-23 21:18:55,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.6215 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:18:55,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50058} open  
 
 2020-11-23 21:18:55,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50058} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:18:55,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50058} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:18:55,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50058} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:18:55,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50058} closed  
 
 2020-11-23 21:18:55,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:18:55,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:20:19,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-23 21:20:19,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-23 21:20:19,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-23 21:20:19,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-23 21:20:19,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-23 21:20:19,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-1269} connected  
 
 2020-11-23 21:20:19,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:20:19,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} created. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:20:19,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : []  
 
 2020-11-23 21:20:19,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : []  
 
 2020-11-23 21:20:19,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 2.6146 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:20:19,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50059} open  
 
 2020-11-23 21:20:19,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50059} Header: [count(0)]  
 
 2020-11-23 21:20:19,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50059} Result: [6]  
 
 2020-11-23 21:20:19,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50059} closed  
 
 2020-11-23 21:20:19,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-23 21:20:19,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} created. select * from t_tages LIMIT ?   
 
 2020-11-23 21:20:19,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [5]  
 
 2020-11-23 21:20:19,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-23 21:20:19,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 1.263 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:20:19,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50060} open  
 
 2020-11-23 21:20:19,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50060} Header: [id, tage]  
 
 2020-11-23 21:20:19,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50060} Result: [1, 学习日记]  
 
 2020-11-23 21:20:19,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50060} Result: [2, 错误笔记]  
 
 2020-11-23 21:20:19,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50060} Result: [4, 程序运行日记]  
 
 2020-11-23 21:20:19,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50060} Result: [5, 开发日记]  
 
 2020-11-23 21:20:19,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50060} Result: [8, 开发手册]  
 
 2020-11-23 21:20:19,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50060} closed  
 
 2020-11-23 21:20:19,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-23 21:20:19,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:20:19,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:20:20,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:20:20,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : []  
 
 2020-11-23 21:20:20,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : []  
 
 2020-11-23 21:20:20,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 3.9057 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:20:20,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50061} open  
 
 2020-11-23 21:20:20,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50061} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:20:20,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50061} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:20:20,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50061} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:20:20,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50061} closed  
 
 2020-11-23 21:20:20,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-23 21:20:20,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:20:22,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:20:22,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : []  
 
 2020-11-23 21:20:22,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : []  
 
 2020-11-23 21:20:22,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 3.7473 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:20:22,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50062} open  
 
 2020-11-23 21:20:22,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50062} Header: [count(0)]  
 
 2020-11-23 21:20:22,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50062} Result: [6]  
 
 2020-11-23 21:20:22,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50062} closed  
 
 2020-11-23 21:20:22,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-23 21:20:22,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [5]  
 
 2020-11-23 21:20:22,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-23 21:20:22,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 2.1133 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:20:22,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50063} open  
 
 2020-11-23 21:20:22,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50063} Header: [id, tage]  
 
 2020-11-23 21:20:22,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50063} Result: [1, 学习日记]  
 
 2020-11-23 21:20:22,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50063} Result: [2, 错误笔记]  
 
 2020-11-23 21:20:22,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50063} Result: [4, 程序运行日记]  
 
 2020-11-23 21:20:22,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50063} Result: [5, 开发日记]  
 
 2020-11-23 21:20:22,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50063} Result: [8, 开发手册]  
 
 2020-11-23 21:20:22,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50063} closed  
 
 2020-11-23 21:20:22,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-23 21:20:22,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:20:23,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:20:23,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : []  
 
 2020-11-23 21:20:23,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : []  
 
 2020-11-23 21:20:23,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 3.3401 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:20:23,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50064} open  
 
 2020-11-23 21:20:23,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50064} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:20:23,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50064} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:20:23,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50064} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:20:23,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50064} closed  
 
 2020-11-23 21:20:23,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-23 21:20:23,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:20:29,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:20:29,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : []  
 
 2020-11-23 21:20:29,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : []  
 
 2020-11-23 21:20:29,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 2.9409 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:20:29,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50065} open  
 
 2020-11-23 21:20:29,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50065} Header: [count(0)]  
 
 2020-11-23 21:20:29,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50065} Result: [6]  
 
 2020-11-23 21:20:29,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50065} closed  
 
 2020-11-23 21:20:29,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-23 21:20:29,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} created. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:20:29,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Parameters : [5, 5]  
 
 2020-11-23 21:20:29,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:20:29,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} executed. 1.8375 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-23 21:20:29,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50066} open  
 
 2020-11-23 21:20:29,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50066} Header: [id, tage]  
 
 2020-11-23 21:20:29,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50066} Result: [10, 搭建日记]  
 
 2020-11-23 21:20:29,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50066} closed  
 
 2020-11-23 21:20:29,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} clearParameters.   
 
 2020-11-23 21:20:29,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:20:29,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:20:29,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : []  
 
 2020-11-23 21:20:29,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : []  
 
 2020-11-23 21:20:29,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 2.1244 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:20:29,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50067} open  
 
 2020-11-23 21:20:29,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50067} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:20:29,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50067} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:20:29,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50067} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:20:29,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50067} closed  
 
 2020-11-23 21:20:29,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-23 21:20:29,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:20:31,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:20:31,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} created. delete from t_tages where id=?  
 
 2020-11-23 21:20:31,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Parameters : [10]  
 
 2020-11-23 21:20:31,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Types : [INTEGER]  
 
 2020-11-23 21:20:31,257 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20023} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:20:31,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} clearParameters.   
 
 2020-11-23 21:20:31,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} closed  
 
 2020-11-23 21:20:31,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:20:43,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:20:43,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} created. delete from t_tages where id=?  
 
 2020-11-23 21:20:43,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} Parameters : [10]  
 
 2020-11-23 21:20:43,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} Types : [INTEGER]  
 
 2020-11-23 21:20:43,674 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20024} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:20:43,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} clearParameters.   
 
 2020-11-23 21:20:43,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} closed  
 
 2020-11-23 21:20:43,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:21:04,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:21:04,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : []  
 
 2020-11-23 21:21:04,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : []  
 
 2020-11-23 21:21:04,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 3.0234 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:21:04,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50068} open  
 
 2020-11-23 21:21:04,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50068} Header: [count(0)]  
 
 2020-11-23 21:21:04,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50068} Result: [6]  
 
 2020-11-23 21:21:04,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50068} closed  
 
 2020-11-23 21:21:04,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-23 21:21:04,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [5]  
 
 2020-11-23 21:21:04,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-23 21:21:04,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 6.0763 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:21:04,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50069} open  
 
 2020-11-23 21:21:04,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50069} Header: [id, tage]  
 
 2020-11-23 21:21:04,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50069} Result: [1, 学习日记]  
 
 2020-11-23 21:21:04,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50069} Result: [2, 错误笔记]  
 
 2020-11-23 21:21:04,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50069} Result: [4, 程序运行日记]  
 
 2020-11-23 21:21:04,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50069} Result: [5, 开发日记]  
 
 2020-11-23 21:21:04,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50069} Result: [8, 开发手册]  
 
 2020-11-23 21:21:04,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50069} closed  
 
 2020-11-23 21:21:04,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-23 21:21:04,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:21:04,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:21:04,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : []  
 
 2020-11-23 21:21:04,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : []  
 
 2020-11-23 21:21:04,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 1.5749 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:21:04,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50070} open  
 
 2020-11-23 21:21:04,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50070} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:21:04,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50070} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:21:04,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50070} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:21:04,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50070} closed  
 
 2020-11-23 21:21:04,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-23 21:21:04,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:21:07,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:21:07,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} created. delete from t_tages where id=?  
 
 2020-11-23 21:21:07,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} Parameters : [5]  
 
 2020-11-23 21:21:07,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} Types : [INTEGER]  
 
 2020-11-23 21:21:07,035 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20025} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:21:07,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} clearParameters.   
 
 2020-11-23 21:21:07,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} closed  
 
 2020-11-23 21:21:07,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:21:58,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:21:58,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} created. delete from t_tages where id=?  
 
 2020-11-23 21:21:58,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Parameters : [2]  
 
 2020-11-23 21:21:58,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Types : [INTEGER]  
 
 2020-11-23 21:21:58,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} executed. 10.4866 millis. delete from t_tages where id=?  
 
 2020-11-23 21:21:58,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} clearParameters.   
 
 2020-11-23 21:21:58,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:21:58,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:21:58,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : []  
 
 2020-11-23 21:21:58,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : []  
 
 2020-11-23 21:21:58,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 1.9416 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:21:58,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50071} open  
 
 2020-11-23 21:21:58,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50071} Header: [count(0)]  
 
 2020-11-23 21:21:58,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50071} Result: [5]  
 
 2020-11-23 21:21:58,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50071} closed  
 
 2020-11-23 21:21:58,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-23 21:21:58,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [5]  
 
 2020-11-23 21:21:58,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-23 21:21:58,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 1.2875 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:21:58,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50072} open  
 
 2020-11-23 21:21:58,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50072} Header: [id, tage]  
 
 2020-11-23 21:21:58,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50072} Result: [1, 学习日记]  
 
 2020-11-23 21:21:58,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50072} Result: [4, 程序运行日记]  
 
 2020-11-23 21:21:58,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50072} Result: [5, 开发日记]  
 
 2020-11-23 21:21:58,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50072} Result: [8, 开发手册]  
 
 2020-11-23 21:21:58,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50072} Result: [10, 搭建日记]  
 
 2020-11-23 21:21:58,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50072} closed  
 
 2020-11-23 21:21:58,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-23 21:21:58,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:21:59,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:21:59,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : []  
 
 2020-11-23 21:21:59,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : []  
 
 2020-11-23 21:21:59,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 1.7058 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:21:59,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50073} open  
 
 2020-11-23 21:21:59,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50073} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:21:59,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50073} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:21:59,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50073} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:21:59,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50073} closed  
 
 2020-11-23 21:21:59,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-23 21:21:59,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:05,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:05,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Parameters : [10]  
 
 2020-11-23 21:22:05,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Types : [INTEGER]  
 
 2020-11-23 21:22:05,438 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20026} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:22:05,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} clearParameters.   
 
 2020-11-23 21:22:05,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} closed  
 
 2020-11-23 21:22:05,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:10,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:10,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} created. delete from t_tages where id=?  
 
 2020-11-23 21:22:10,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} Parameters : [8]  
 
 2020-11-23 21:22:10,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} Types : [INTEGER]  
 
 2020-11-23 21:22:10,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} executed. 14.6416 millis. delete from t_tages where id=?  
 
 2020-11-23 21:22:10,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} clearParameters.   
 
 2020-11-23 21:22:10,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:10,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:10,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : []  
 
 2020-11-23 21:22:10,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : []  
 
 2020-11-23 21:22:10,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 3.1091 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:22:10,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50074} open  
 
 2020-11-23 21:22:10,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50074} Header: [count(0)]  
 
 2020-11-23 21:22:10,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50074} Result: [4]  
 
 2020-11-23 21:22:10,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50074} closed  
 
 2020-11-23 21:22:10,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-23 21:22:10,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [5]  
 
 2020-11-23 21:22:10,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-23 21:22:10,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 1.5773 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:22:10,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50075} open  
 
 2020-11-23 21:22:10,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50075} Header: [id, tage]  
 
 2020-11-23 21:22:10,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50075} Result: [1, 学习日记]  
 
 2020-11-23 21:22:10,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50075} Result: [4, 程序运行日记]  
 
 2020-11-23 21:22:10,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50075} Result: [5, 开发日记]  
 
 2020-11-23 21:22:10,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50075} Result: [10, 搭建日记]  
 
 2020-11-23 21:22:10,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50075} closed  
 
 2020-11-23 21:22:10,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-23 21:22:10,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:10,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:10,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : []  
 
 2020-11-23 21:22:10,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : []  
 
 2020-11-23 21:22:10,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 1.6576 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:22:10,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50076} open  
 
 2020-11-23 21:22:10,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50076} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:22:10,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50076} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:22:10,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50076} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:22:10,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50076} closed  
 
 2020-11-23 21:22:10,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-23 21:22:10,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:14,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:14,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} Parameters : [4]  
 
 2020-11-23 21:22:14,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} Types : [INTEGER]  
 
 2020-11-23 21:22:14,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} executed. 16.7987 millis. delete from t_tages where id=?  
 
 2020-11-23 21:22:14,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} clearParameters.   
 
 2020-11-23 21:22:14,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:14,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:14,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : []  
 
 2020-11-23 21:22:14,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : []  
 
 2020-11-23 21:22:14,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 2.3156 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:22:14,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50077} open  
 
 2020-11-23 21:22:14,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50077} Header: [count(0)]  
 
 2020-11-23 21:22:14,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50077} Result: [3]  
 
 2020-11-23 21:22:14,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50077} closed  
 
 2020-11-23 21:22:14,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-23 21:22:14,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [5]  
 
 2020-11-23 21:22:14,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-23 21:22:14,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 1.893 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:22:14,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50078} open  
 
 2020-11-23 21:22:14,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50078} Header: [id, tage]  
 
 2020-11-23 21:22:14,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50078} Result: [1, 学习日记]  
 
 2020-11-23 21:22:14,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50078} Result: [5, 开发日记]  
 
 2020-11-23 21:22:14,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50078} Result: [10, 搭建日记]  
 
 2020-11-23 21:22:14,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50078} closed  
 
 2020-11-23 21:22:14,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-23 21:22:14,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:14,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:14,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : []  
 
 2020-11-23 21:22:14,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : []  
 
 2020-11-23 21:22:14,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 1.3558 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:22:14,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50079} open  
 
 2020-11-23 21:22:14,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50079} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:22:14,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50079} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:22:14,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50079} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:22:14,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50079} closed  
 
 2020-11-23 21:22:14,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-23 21:22:14,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:19,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:19,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} Parameters : [5]  
 
 2020-11-23 21:22:19,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} Types : [INTEGER]  
 
 2020-11-23 21:22:19,361 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20027} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:22:19,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} clearParameters.   
 
 2020-11-23 21:22:19,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} closed  
 
 2020-11-23 21:22:19,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:22:48,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:22:48,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} created. delete from t_tages where id=?  
 
 2020-11-23 21:22:48,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} Parameters : [10]  
 
 2020-11-23 21:22:48,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} Types : [INTEGER]  
 
 2020-11-23 21:22:48,336 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20028} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor67.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy114.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy112.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:22:48,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} clearParameters.   
 
 2020-11-23 21:22:48,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} closed  
 
 2020-11-23 21:22:48,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:25:15,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-1270} connected  
 
 2020-11-23 21:25:16,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-1271} connected  
 
 2020-11-23 21:25:16,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-1272} connected  
 
 2020-11-23 21:25:16,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-1273} connected  
 
 2020-11-23 21:25:16,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-1274} connected  
 
 2020-11-23 21:25:16,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:16,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-23 21:25:16,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-23 21:25:16,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-23 21:25:16,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 43.6198 millis. select * from t_user where username=?  
 
 2020-11-23 21:25:16,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-23 21:25:16,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-23 21:25:16,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-23 21:25:16,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-23 21:25:16,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-23 21:25:16,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:25:17,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:17,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:25:17,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:25:17,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:25:17,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 7.073 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:25:17,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-23 21:25:17,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:25:17,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:25:17,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:25:17,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-23 21:25:17,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:25:17,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:25:17,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:17,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:25:17,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:25:17,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.6595 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:25:17,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} open  
 
 2020-11-23 21:25:17,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:25:17,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:25:17,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:25:17,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50002} closed  
 
 2020-11-23 21:25:17,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:25:17,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:25:19,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:19,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:25:19,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:19,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:25:19,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-23 21:25:19,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-23 21:25:19,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.3761 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:25:19,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} open  
 
 2020-11-23 21:25:19,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Header: [count(0)]  
 
 2020-11-23 21:25:19,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [3]  
 
 2020-11-23 21:25:19,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} closed  
 
 2020-11-23 21:25:19,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-23 21:25:19,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_tages LIMIT ?   
 
 2020-11-23 21:25:19,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [5]  
 
 2020-11-23 21:25:19,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-23 21:25:19,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.212 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:25:19,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-23 21:25:19,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, tage]  
 
 2020-11-23 21:25:19,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [1, 学习日记]  
 
 2020-11-23 21:25:19,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [5, 开发日记]  
 
 2020-11-23 21:25:19,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-23 21:25:19,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-23 21:25:19,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-23 21:25:19,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:25:19,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:19,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:25:19,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:25:19,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.5387 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:25:19,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-23 21:25:19,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:25:19,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:25:19,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:25:19,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-23 21:25:19,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:25:19,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:25:21,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:21,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. delete from t_tages where id=?  
 
 2020-11-23 21:25:21,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [10]  
 
 2020-11-23 21:25:21,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-23 21:25:22,022 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20004} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy113.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:25:22,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-23 21:25:22,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} closed  
 
 2020-11-23 21:25:22,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:25:22,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:22,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:25:33,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:25:33,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. delete from t_tages where id=?  
 
 2020-11-23 21:25:33,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [10]  
 
 2020-11-23 21:25:33,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-23 21:25:33,583 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10005, pstmt-20005} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy113.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:25:33,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-23 21:25:33,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} closed  
 
 2020-11-23 21:25:33,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:26:25,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:26:26,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 21:26:26,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : []  
 
 2020-11-23 21:26:26,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : []  
 
 2020-11-23 21:26:26,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 12.9986 millis. SELECT DATE_FORMAT(b.updatetime,'%Y') as year FROM t_blog b GROUP BY year ORDER BY year DESC  
 
 2020-11-23 21:26:26,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-23 21:26:26,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [year]  
 
 2020-11-23 21:26:26,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [2020]  
 
 2020-11-23 21:26:26,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-23 21:26:26,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-23 21:26:26,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:26:26,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:26:26,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 21:26:26,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [2020]  
 
 2020-11-23 21:26:26,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [VARCHAR]  
 
 2020-11-23 21:26:26,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 1.4813 millis. select b.id,b.title,b.updatetime,b.flag from t_blog b where DATE_FORMAT(b.updatetime,'%Y')=?;  
 
 2020-11-23 21:26:26,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} open  
 
 2020-11-23 21:26:26,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Header: [id, title, updatetime, flag]  
 
 2020-11-23 21:26:26,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [11, Java基本语法, 2020-11-20 03:31:52.0, 原创]  
 
 2020-11-23 21:26:26,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [12, Java笔记, 2020-11-20 04:47:35.0, 原创]  
 
 2020-11-23 21:26:26,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} closed  
 
 2020-11-23 21:26:26,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-23 21:26:26,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:26:26,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:26:26,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:26:26,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:26:26,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9281 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:26:26,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} open  
 
 2020-11-23 21:26:26,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:26:26,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:26:26,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:26:26,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50008} closed  
 
 2020-11-23 21:26:26,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:26:26,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:26:28,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:26:28,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_tages  
 
 2020-11-23 21:26:28,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-23 21:26:28,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-23 21:26:28,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.9018 millis. select * from t_tages  
 
 2020-11-23 21:26:28,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} open  
 
 2020-11-23 21:26:28,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} Header: [id, tage]  
 
 2020-11-23 21:26:28,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} Result: [1, 学习日记]  
 
 2020-11-23 21:26:28,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} Result: [5, 开发日记]  
 
 2020-11-23 21:26:28,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} Result: [10, 搭建日记]  
 
 2020-11-23 21:26:28,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50009} closed  
 
 2020-11-23 21:26:28,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-23 21:26:28,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:26:28,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:26:28,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. select * from t_types  
 
 2020-11-23 21:26:28,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : []  
 
 2020-11-23 21:26:28,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : []  
 
 2020-11-23 21:26:28,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 3.173 millis. select * from t_types  
 
 2020-11-23 21:26:28,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50010} open  
 
 2020-11-23 21:26:28,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50010} Header: [id, name]  
 
 2020-11-23 21:26:28,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50010} Result: [8, 方法论]  
 
 2020-11-23 21:26:28,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50010} Result: [9, 理论类]  
 
 2020-11-23 21:26:28,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50010} Result: [21, 错误日记]  
 
 2020-11-23 21:26:28,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50010} Result: [23, 开发日记]  
 
 2020-11-23 21:26:28,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50010} Result: [25, 想法论]  
 
 2020-11-23 21:26:28,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50010} closed  
 
 2020-11-23 21:26:28,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-23 21:26:28,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:26:29,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-23 21:26:29,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-23 21:26:29,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-23 21:26:29,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.95 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:26:29,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} open  
 
 2020-11-23 21:26:29,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:26:29,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:26:29,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:26:29,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50011} closed  
 
 2020-11-23 21:26:29,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-23 21:26:29,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-23 21:28:23,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-23 21:28:23,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-23 21:28:23,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-23 21:28:23,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-23 21:28:23,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-23 21:28:23,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-1275} connected  
 
 2020-11-23 21:28:23,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:23,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} created. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         , 
            createtime
         , 
            blogdescribe
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : [null, java测试, ##java
dfd, https://picsum.photos/seed/picsum/800/450, 是, 0, true, true, true, true, true, 2020-11-23 21:28:23.786, 是非常好的]  
 
 2020-11-23 21:28:23,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, TIMESTAMP, VARCHAR]  
 
 2020-11-23 21:28:23,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 11.8798 millis. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         , 
            createtime
         , 
            blogdescribe
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-23 21:28:23,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:23,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:23,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} created. select id from t_blog where title=?  
 
 2020-11-23 21:28:23,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Parameters : [java测试]  
 
 2020-11-23 21:28:23,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Types : [VARCHAR]  
 
 2020-11-23 21:28:23,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} executed. 2.5053 millis. select id from t_blog where title=?  
 
 2020-11-23 21:28:23,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} open  
 
 2020-11-23 21:28:23,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Header: [id]  
 
 2020-11-23 21:28:23,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Result: [13]  
 
 2020-11-23 21:28:23,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} closed  
 
 2020-11-23 21:28:23,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} clearParameters.   
 
 2020-11-23 21:28:23,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:23,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:23,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : [null, 1, 13]  
 
 2020-11-23 21:28:23,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-23 21:28:23,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 18.2836 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-23 21:28:23,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:23,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:23,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : [null, 10, 13]  
 
 2020-11-23 21:28:23,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-23 21:28:23,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 6.0162 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-23 21:28:23,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:23,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:23,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : [null, 13, 8]  
 
 2020-11-23 21:28:23,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-23 21:28:23,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 10.5761 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-23 21:28:23,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:23,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:23,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} created. insert into t_user_blog
         (  
            id
         , 
            uid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Parameters : [null, 1, 13]  
 
 2020-11-23 21:28:23,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-23 21:28:23,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} executed. 6.623 millis. insert into t_user_blog
         (  
            id
         , 
            uid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-23 21:28:23,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} clearParameters.   
 
 2020-11-23 21:28:23,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:23,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:23,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-23 21:28:23,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Parameters : [1]  
 
 2020-11-23 21:28:23,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Types : [INTEGER]  
 
 2020-11-23 21:28:23,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} executed. 3.8011 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-23 21:28:23,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50013} open  
 
 2020-11-23 21:28:23,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50013} Header: [count(0)]  
 
 2020-11-23 21:28:23,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50013} Result: [3]  
 
 2020-11-23 21:28:23,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50013} closed  
 
 2020-11-23 21:28:23,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} clearParameters.   
 
 2020-11-23 21:28:23,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-23 21:28:23,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Parameters : [1, 5]  
 
 2020-11-23 21:28:23,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:28:23,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} executed. 5.6817 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-23 21:28:24,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50014} open  
 
 2020-11-23 21:28:24,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50014} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-23 21:28:24,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50014} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-23 21:28:24,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50014} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-23 21:28:24,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50014} Result: [zhangsan, 13, java测试, 2020-11-23 21:28:24.0, 1, true, true]  
 
 2020-11-23 21:28:24,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50014} closed  
 
 2020-11-23 21:28:24,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} clearParameters.   
 
 2020-11-23 21:28:24,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:24,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:24,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:28:24,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:28:24,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:28:24,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 2.8456 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:28:24,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50015} open  
 
 2020-11-23 21:28:24,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50015} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:28:24,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50015} Result: [13, java测试, ##java
dfd, https://picsum.photos/seed/picsum/800/450, 是, 0, true, true, true, true, true, 2020-11-23 21:28:24.0, null, 是非常好的]  
 
 2020-11-23 21:28:24,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50015} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:28:24,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50015} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:28:24,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50015} closed  
 
 2020-11-23 21:28:24,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:28:24,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:29,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:29,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} created. delete from t_blog_type where bid=?  
 
 2020-11-23 21:28:29,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} Parameters : [13]  
 
 2020-11-23 21:28:29,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} Types : [INTEGER]  
 
 2020-11-23 21:28:29,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} executed. 8.7565 millis. delete from t_blog_type where bid=?  
 
 2020-11-23 21:28:29,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} clearParameters.   
 
 2020-11-23 21:28:29,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:29,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:29,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} created. delete from t_blog_tages where bid=?  
 
 2020-11-23 21:28:29,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : [13]  
 
 2020-11-23 21:28:29,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : [INTEGER]  
 
 2020-11-23 21:28:29,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 8.7244 millis. delete from t_blog_tages where bid=?  
 
 2020-11-23 21:28:29,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-23 21:28:29,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:29,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:29,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} created. delete from t_user_blog where bid=?  
 
 2020-11-23 21:28:29,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : [13]  
 
 2020-11-23 21:28:29,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : [INTEGER]  
 
 2020-11-23 21:28:29,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 7.5502 millis. delete from t_user_blog where bid=?  
 
 2020-11-23 21:28:29,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-23 21:28:29,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:29,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:29,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} created. delete from t_blog where id=?  
 
 2020-11-23 21:28:29,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : [13]  
 
 2020-11-23 21:28:29,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : [INTEGER]  
 
 2020-11-23 21:28:29,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 7.7353 millis. delete from t_blog where id=?  
 
 2020-11-23 21:28:29,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-23 21:28:29,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:29,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:29,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Parameters : [1]  
 
 2020-11-23 21:28:29,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Types : [INTEGER]  
 
 2020-11-23 21:28:29,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} executed. 2.9494 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-23 21:28:29,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50016} open  
 
 2020-11-23 21:28:29,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50016} Header: [count(0)]  
 
 2020-11-23 21:28:29,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50016} Result: [2]  
 
 2020-11-23 21:28:29,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50016} closed  
 
 2020-11-23 21:28:29,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} clearParameters.   
 
 2020-11-23 21:28:29,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Parameters : [1, 5]  
 
 2020-11-23 21:28:29,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:28:30,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} executed. 2.2414 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-23 21:28:30,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50017} open  
 
 2020-11-23 21:28:30,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50017} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-23 21:28:30,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50017} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-23 21:28:30,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50017} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-23 21:28:30,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50017} closed  
 
 2020-11-23 21:28:30,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} clearParameters.   
 
 2020-11-23 21:28:30,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:30,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:30,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:28:30,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:28:30,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 3.0141 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:28:30,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50018} open  
 
 2020-11-23 21:28:30,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50018} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:28:30,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50018} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:28:30,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50018} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:28:30,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50018} closed  
 
 2020-11-23 21:28:30,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:28:30,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:31,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:31,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} created. SELECT count(0) FROM t_types  
 
 2020-11-23 21:28:31,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Parameters : []  
 
 2020-11-23 21:28:31,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Types : []  
 
 2020-11-23 21:28:31,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} executed. 2.8877 millis. SELECT count(0) FROM t_types  
 
 2020-11-23 21:28:31,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50019} open  
 
 2020-11-23 21:28:31,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50019} Header: [count(0)]  
 
 2020-11-23 21:28:31,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50019} Result: [5]  
 
 2020-11-23 21:28:31,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50019} closed  
 
 2020-11-23 21:28:31,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} clearParameters.   
 
 2020-11-23 21:28:31,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} created. select * from t_types LIMIT ?   
 
 2020-11-23 21:28:31,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Parameters : [5]  
 
 2020-11-23 21:28:31,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Types : [INTEGER]  
 
 2020-11-23 21:28:31,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} executed. 1.3799 millis. select * from t_types LIMIT ?   
 
 2020-11-23 21:28:31,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50020} open  
 
 2020-11-23 21:28:31,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50020} Header: [id, name]  
 
 2020-11-23 21:28:31,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50020} Result: [8, 方法论]  
 
 2020-11-23 21:28:31,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50020} Result: [9, 理论类]  
 
 2020-11-23 21:28:31,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50020} Result: [21, 错误日记]  
 
 2020-11-23 21:28:31,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50020} Result: [23, 开发日记]  
 
 2020-11-23 21:28:31,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50020} Result: [25, 想法论]  
 
 2020-11-23 21:28:31,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50020} closed  
 
 2020-11-23 21:28:31,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} clearParameters.   
 
 2020-11-23 21:28:31,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:31,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:31,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:28:31,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:28:31,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 1.9618 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:28:31,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} open  
 
 2020-11-23 21:28:31,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:28:31,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:28:31,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:28:31,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} closed  
 
 2020-11-23 21:28:31,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:28:31,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:38,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:38,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} created. delete from t_types where id=?  
 
 2020-11-23 21:28:38,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} Parameters : [25]  
 
 2020-11-23 21:28:38,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} Types : [INTEGER]  
 
 2020-11-23 21:28:38,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} executed. 16.7221 millis. delete from t_types where id=?  
 
 2020-11-23 21:28:38,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20024} clearParameters.   
 
 2020-11-23 21:28:38,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:38,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:38,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Parameters : []  
 
 2020-11-23 21:28:38,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Types : []  
 
 2020-11-23 21:28:38,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} executed. 2.6046 millis. SELECT count(0) FROM t_types  
 
 2020-11-23 21:28:38,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50022} open  
 
 2020-11-23 21:28:38,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50022} Header: [count(0)]  
 
 2020-11-23 21:28:38,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50022} Result: [4]  
 
 2020-11-23 21:28:38,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50022} closed  
 
 2020-11-23 21:28:38,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} clearParameters.   
 
 2020-11-23 21:28:38,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Parameters : [5]  
 
 2020-11-23 21:28:38,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Types : [INTEGER]  
 
 2020-11-23 21:28:38,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} executed. 2.3832 millis. select * from t_types LIMIT ?   
 
 2020-11-23 21:28:38,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50023} open  
 
 2020-11-23 21:28:38,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50023} Header: [id, name]  
 
 2020-11-23 21:28:38,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50023} Result: [8, 方法论]  
 
 2020-11-23 21:28:38,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50023} Result: [9, 理论类]  
 
 2020-11-23 21:28:38,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50023} Result: [21, 错误日记]  
 
 2020-11-23 21:28:38,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50023} Result: [23, 开发日记]  
 
 2020-11-23 21:28:38,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50023} closed  
 
 2020-11-23 21:28:38,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} clearParameters.   
 
 2020-11-23 21:28:38,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:38,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:38,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:28:38,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:28:38,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 1.6907 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:28:38,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50024} open  
 
 2020-11-23 21:28:38,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50024} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:28:38,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50024} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:28:38,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50024} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:28:38,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50024} closed  
 
 2020-11-23 21:28:38,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:28:38,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:39,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:39,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} created. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:28:39,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} Parameters : []  
 
 2020-11-23 21:28:39,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} Types : []  
 
 2020-11-23 21:28:39,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} executed. 3.2889 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:28:39,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50025} open  
 
 2020-11-23 21:28:39,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50025} Header: [count(0)]  
 
 2020-11-23 21:28:39,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50025} Result: [3]  
 
 2020-11-23 21:28:39,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50025} closed  
 
 2020-11-23 21:28:39,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} clearParameters.   
 
 2020-11-23 21:28:39,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} created. select * from t_tages LIMIT ?   
 
 2020-11-23 21:28:39,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Parameters : [5]  
 
 2020-11-23 21:28:39,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Types : [INTEGER]  
 
 2020-11-23 21:28:39,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} executed. 2.0153 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:28:39,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50026} open  
 
 2020-11-23 21:28:39,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50026} Header: [id, tage]  
 
 2020-11-23 21:28:39,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50026} Result: [1, 学习日记]  
 
 2020-11-23 21:28:39,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50026} Result: [5, 开发日记]  
 
 2020-11-23 21:28:39,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50026} Result: [10, 搭建日记]  
 
 2020-11-23 21:28:39,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50026} closed  
 
 2020-11-23 21:28:39,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} clearParameters.   
 
 2020-11-23 21:28:39,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:28:40,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:28:40,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:28:40,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:28:40,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 2.5989 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:28:40,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50027} open  
 
 2020-11-23 21:28:40,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50027} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:28:40,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50027} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:28:40,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50027} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:28:40,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50027} closed  
 
 2020-11-23 21:28:40,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:28:40,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:19,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:19,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} created. select * from t_tages where id=?  
 
 2020-11-23 21:29:19,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} Parameters : [10]  
 
 2020-11-23 21:29:19,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} Types : [INTEGER]  
 
 2020-11-23 21:29:19,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} executed. 2.9117 millis. select * from t_tages where id=?  
 
 2020-11-23 21:29:19,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20027, rs-50028} open  
 
 2020-11-23 21:29:19,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20027, rs-50028} Header: [id, tage]  
 
 2020-11-23 21:29:19,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20027, rs-50028} Result: [10, 搭建日记]  
 
 2020-11-23 21:29:19,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20027, rs-50028} closed  
 
 2020-11-23 21:29:19,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20027} clearParameters.   
 
 2020-11-23 21:29:19,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:19,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:19,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:19,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:19,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 2.7273 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:19,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50029} open  
 
 2020-11-23 21:29:19,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50029} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:19,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50029} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:19,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50029} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:19,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50029} closed  
 
 2020-11-23 21:29:19,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:19,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:23,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:23,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} created. update t_tages
         SET tage='搭建' 
        where id=?  
 
 2020-11-23 21:29:23,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} Parameters : [10]  
 
 2020-11-23 21:29:23,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} Types : [INTEGER]  
 
 2020-11-23 21:29:23,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} executed. 7.7313 millis. update t_tages
         SET tage='搭建' 
        where id=?  
 
 2020-11-23 21:29:23,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20028} clearParameters.   
 
 2020-11-23 21:29:23,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:23,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:23,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} Parameters : []  
 
 2020-11-23 21:29:23,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} Types : []  
 
 2020-11-23 21:29:23,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} executed. 2.6716 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:29:23,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50030} open  
 
 2020-11-23 21:29:23,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50030} Header: [count(0)]  
 
 2020-11-23 21:29:23,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50030} Result: [3]  
 
 2020-11-23 21:29:23,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50030} closed  
 
 2020-11-23 21:29:23,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} clearParameters.   
 
 2020-11-23 21:29:23,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Parameters : [5]  
 
 2020-11-23 21:29:23,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Types : [INTEGER]  
 
 2020-11-23 21:29:23,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} executed. 1.8953 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:29:23,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50031} open  
 
 2020-11-23 21:29:23,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50031} Header: [id, tage]  
 
 2020-11-23 21:29:23,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50031} Result: [1, 学习日记]  
 
 2020-11-23 21:29:23,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50031} Result: [5, 开发日记]  
 
 2020-11-23 21:29:23,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50031} Result: [10, 搭建]  
 
 2020-11-23 21:29:23,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50031} closed  
 
 2020-11-23 21:29:23,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} clearParameters.   
 
 2020-11-23 21:29:23,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:23,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:23,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:23,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:23,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 1.8204 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:23,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50032} open  
 
 2020-11-23 21:29:23,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50032} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:23,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50032} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:23,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50032} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:23,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50032} closed  
 
 2020-11-23 21:29:23,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:23,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:25,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:25,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20029} created. delete from t_tages where id=?  
 
 2020-11-23 21:29:25,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20029} Parameters : [10]  
 
 2020-11-23 21:29:25,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20029} Types : [INTEGER]  
 
 2020-11-23 21:29:25,950 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20029} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy113.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:29:25,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20029} clearParameters.   
 
 2020-11-23 21:29:25,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20029} closed  
 
 2020-11-23 21:29:25,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:30,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:30,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Parameters : [1]  
 
 2020-11-23 21:29:30,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Types : [INTEGER]  
 
 2020-11-23 21:29:30,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} executed. 2.4617 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-23 21:29:30,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50033} open  
 
 2020-11-23 21:29:30,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50033} Header: [count(0)]  
 
 2020-11-23 21:29:30,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50033} Result: [2]  
 
 2020-11-23 21:29:30,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50033} closed  
 
 2020-11-23 21:29:30,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} clearParameters.   
 
 2020-11-23 21:29:30,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Parameters : [1, 5]  
 
 2020-11-23 21:29:30,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Types : [INTEGER, INTEGER]  
 
 2020-11-23 21:29:30,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} executed. 2.0414 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-23 21:29:30,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50034} open  
 
 2020-11-23 21:29:30,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50034} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-23 21:29:30,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50034} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-23 21:29:30,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50034} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-23 21:29:30,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20016, rs-50034} closed  
 
 2020-11-23 21:29:30,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} clearParameters.   
 
 2020-11-23 21:29:30,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:31,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:31,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:31,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:31,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 1.4227 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:31,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50035} open  
 
 2020-11-23 21:29:31,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50035} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:31,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50035} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:31,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50035} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:31,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50035} closed  
 
 2020-11-23 21:29:31,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:31,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:36,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:36,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20030} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-23 21:29:36,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20030} Parameters : [语法]  
 
 2020-11-23 21:29:36,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20030} Types : [VARCHAR]  
 
 2020-11-23 21:29:36,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20030} executed. 5.9874 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND title LIKE concat('%', ?, '%')  
 
 2020-11-23 21:29:36,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20030, rs-50036} open  
 
 2020-11-23 21:29:36,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20030, rs-50036} Header: [count(0)]  
 
 2020-11-23 21:29:36,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20030, rs-50036} Result: [1]  
 
 2020-11-23 21:29:36,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20030, rs-50036} closed  
 
 2020-11-23 21:29:36,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20030} clearParameters.   
 
 2020-11-23 21:29:36,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20031} created. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-23 21:29:36,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20031} Parameters : [语法, 5]  
 
 2020-11-23 21:29:36,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20031} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 21:29:36,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20031} executed. 3.3028 millis. select us.username uname,tb.id,tb.title ,tb.createtime ,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
          where
        tb.id=tub.bid and tub.uid=us.id
            and
        title like concat('%',?,'%') LIMIT ?   
 
 2020-11-23 21:29:36,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20031, rs-50037} open  
 
 2020-11-23 21:29:36,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20031, rs-50037} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-23 21:29:36,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20031, rs-50037} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-23 21:29:36,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20031, rs-50037} closed  
 
 2020-11-23 21:29:36,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20031} clearParameters.   
 
 2020-11-23 21:29:36,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:36,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:36,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:36,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:36,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 2.6602 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:36,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50038} open  
 
 2020-11-23 21:29:36,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50038} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:36,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50038} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:36,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50038} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:36,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50038} closed  
 
 2020-11-23 21:29:36,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:36,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:37,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:37,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Parameters : []  
 
 2020-11-23 21:29:37,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Types : []  
 
 2020-11-23 21:29:37,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} executed. 2.9753 millis. SELECT count(0) FROM t_types  
 
 2020-11-23 21:29:37,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50039} open  
 
 2020-11-23 21:29:37,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50039} Header: [count(0)]  
 
 2020-11-23 21:29:37,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50039} Result: [4]  
 
 2020-11-23 21:29:37,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50039} closed  
 
 2020-11-23 21:29:37,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} clearParameters.   
 
 2020-11-23 21:29:37,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Parameters : [5]  
 
 2020-11-23 21:29:37,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Types : [INTEGER]  
 
 2020-11-23 21:29:37,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} executed. 1.9641 millis. select * from t_types LIMIT ?   
 
 2020-11-23 21:29:37,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50040} open  
 
 2020-11-23 21:29:37,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50040} Header: [id, name]  
 
 2020-11-23 21:29:37,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50040} Result: [8, 方法论]  
 
 2020-11-23 21:29:37,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50040} Result: [9, 理论类]  
 
 2020-11-23 21:29:37,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50040} Result: [21, 错误日记]  
 
 2020-11-23 21:29:37,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50040} Result: [23, 开发日记]  
 
 2020-11-23 21:29:37,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50040} closed  
 
 2020-11-23 21:29:37,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} clearParameters.   
 
 2020-11-23 21:29:37,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:38,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:38,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:38,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:38,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 1.3072 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:38,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50041} open  
 
 2020-11-23 21:29:38,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50041} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:38,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50041} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:38,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50041} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:38,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50041} closed  
 
 2020-11-23 21:29:38,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:38,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:40,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:40,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20032} created. SELECT count(0) FROM t_types WHERE name LIKE concat('%', ?, '%')  
 
 2020-11-23 21:29:40,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20032} Parameters : [方]  
 
 2020-11-23 21:29:40,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20032} Types : [VARCHAR]  
 
 2020-11-23 21:29:40,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20032} executed. 1.4503 millis. SELECT count(0) FROM t_types WHERE name LIKE concat('%', ?, '%')  
 
 2020-11-23 21:29:40,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20032, rs-50042} open  
 
 2020-11-23 21:29:40,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20032, rs-50042} Header: [count(0)]  
 
 2020-11-23 21:29:40,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20032, rs-50042} Result: [1]  
 
 2020-11-23 21:29:40,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20032, rs-50042} closed  
 
 2020-11-23 21:29:40,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20032} clearParameters.   
 
 2020-11-23 21:29:40,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20033} created. select * from  t_types where name like concat ('%',?,'%') LIMIT ?   
 
 2020-11-23 21:29:40,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20033} Parameters : [方, 5]  
 
 2020-11-23 21:29:40,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20033} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 21:29:40,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20033} executed. 1.8594 millis. select * from  t_types where name like concat ('%',?,'%') LIMIT ?   
 
 2020-11-23 21:29:40,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20033, rs-50043} open  
 
 2020-11-23 21:29:40,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20033, rs-50043} Header: [id, name]  
 
 2020-11-23 21:29:40,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20033, rs-50043} Result: [8, 方法论]  
 
 2020-11-23 21:29:40,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20033, rs-50043} closed  
 
 2020-11-23 21:29:40,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20033} clearParameters.   
 
 2020-11-23 21:29:40,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:40,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:40,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:40,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:40,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 2.4847 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:40,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50044} open  
 
 2020-11-23 21:29:40,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50044} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:40,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50044} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:40,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50044} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:40,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50044} closed  
 
 2020-11-23 21:29:40,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:40,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:41,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:41,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} Parameters : []  
 
 2020-11-23 21:29:41,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} Types : []  
 
 2020-11-23 21:29:41,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} executed. 3.6868 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:29:41,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50045} open  
 
 2020-11-23 21:29:41,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50045} Header: [count(0)]  
 
 2020-11-23 21:29:41,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50045} Result: [3]  
 
 2020-11-23 21:29:41,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20025, rs-50045} closed  
 
 2020-11-23 21:29:41,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20025} clearParameters.   
 
 2020-11-23 21:29:41,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Parameters : [5]  
 
 2020-11-23 21:29:41,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} Types : [INTEGER]  
 
 2020-11-23 21:29:41,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} executed. 1.9161 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:29:41,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50046} open  
 
 2020-11-23 21:29:41,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50046} Header: [id, tage]  
 
 2020-11-23 21:29:41,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50046} Result: [1, 学习日记]  
 
 2020-11-23 21:29:41,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50046} Result: [5, 开发日记]  
 
 2020-11-23 21:29:41,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50046} Result: [10, 搭建]  
 
 2020-11-23 21:29:41,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20026, rs-50046} closed  
 
 2020-11-23 21:29:41,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20026} clearParameters.   
 
 2020-11-23 21:29:41,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:41,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:41,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:41,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:41,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 2.1132 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:41,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50047} open  
 
 2020-11-23 21:29:41,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50047} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:41,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50047} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:41,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50047} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:41,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50047} closed  
 
 2020-11-23 21:29:41,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:41,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:43,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:43,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} created. SELECT count(0) FROM t_tages WHERE tage LIKE concat('%', ?, '%')  
 
 2020-11-23 21:29:43,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} Parameters : [日记]  
 
 2020-11-23 21:29:43,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} Types : [VARCHAR]  
 
 2020-11-23 21:29:43,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} executed. 2.7249 millis. SELECT count(0) FROM t_tages WHERE tage LIKE concat('%', ?, '%')  
 
 2020-11-23 21:29:43,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20034, rs-50048} open  
 
 2020-11-23 21:29:43,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20034, rs-50048} Header: [count(0)]  
 
 2020-11-23 21:29:43,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20034, rs-50048} Result: [2]  
 
 2020-11-23 21:29:43,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20034, rs-50048} closed  
 
 2020-11-23 21:29:43,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} clearParameters.   
 
 2020-11-23 21:29:43,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} created. select * from  t_tages where tage like concat ('%',?,'%') LIMIT ?   
 
 2020-11-23 21:29:43,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} Parameters : [日记, 5]  
 
 2020-11-23 21:29:43,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 21:29:43,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} executed. 2.691 millis. select * from  t_tages where tage like concat ('%',?,'%') LIMIT ?   
 
 2020-11-23 21:29:43,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50049} open  
 
 2020-11-23 21:29:43,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50049} Header: [id, tage]  
 
 2020-11-23 21:29:43,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50049} Result: [1, 学习日记]  
 
 2020-11-23 21:29:43,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50049} Result: [5, 开发日记]  
 
 2020-11-23 21:29:43,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50049} closed  
 
 2020-11-23 21:29:43,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} clearParameters.   
 
 2020-11-23 21:29:43,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:43,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:43,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:44,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:44,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 1.5034 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:44,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50050} open  
 
 2020-11-23 21:29:44,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50050} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:44,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50050} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:44,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50050} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:44,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50050} closed  
 
 2020-11-23 21:29:44,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:44,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:48,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:48,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} Parameters : []  
 
 2020-11-23 21:29:48,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} Types : [VARCHAR]  
 
 2020-11-23 21:29:48,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} executed. 2.54 millis. SELECT count(0) FROM t_tages WHERE tage LIKE concat('%', ?, '%')  
 
 2020-11-23 21:29:48,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20034, rs-50051} open  
 
 2020-11-23 21:29:48,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20034, rs-50051} Header: [count(0)]  
 
 2020-11-23 21:29:48,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20034, rs-50051} Result: [3]  
 
 2020-11-23 21:29:48,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20034, rs-50051} closed  
 
 2020-11-23 21:29:48,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20034} clearParameters.   
 
 2020-11-23 21:29:48,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} Parameters : [, 5]  
 
 2020-11-23 21:29:48,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 21:29:48,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} executed. 2.7526 millis. select * from  t_tages where tage like concat ('%',?,'%') LIMIT ?   
 
 2020-11-23 21:29:48,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50052} open  
 
 2020-11-23 21:29:48,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50052} Header: [id, tage]  
 
 2020-11-23 21:29:48,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50052} Result: [1, 学习日记]  
 
 2020-11-23 21:29:48,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50052} Result: [5, 开发日记]  
 
 2020-11-23 21:29:48,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50052} Result: [10, 搭建]  
 
 2020-11-23 21:29:48,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20035, rs-50052} closed  
 
 2020-11-23 21:29:48,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20035} clearParameters.   
 
 2020-11-23 21:29:48,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:48,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:48,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : []  
 
 2020-11-23 21:29:48,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : []  
 
 2020-11-23 21:29:48,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 1.78 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:29:48,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50053} open  
 
 2020-11-23 21:29:48,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50053} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:29:48,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50053} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:29:48,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50053} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:29:48,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50053} closed  
 
 2020-11-23 21:29:48,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-23 21:29:48,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:29:52,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:29:52,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20036} created. delete from t_tages where id=?  
 
 2020-11-23 21:29:52,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20036} Parameters : [5]  
 
 2020-11-23 21:29:52,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20036} Types : [INTEGER]  
 
 2020-11-23 21:29:52,278 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20036} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy113.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:29:52,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20036} clearParameters.   
 
 2020-11-23 21:29:52,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20036} closed  
 
 2020-11-23 21:29:52,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:30:12,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-23 21:30:12,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20037} created. delete from t_tages where id=?  
 
 2020-11-23 21:30:12,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20037} Parameters : [10]  
 
 2020-11-23 21:30:12,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20037} Types : [INTEGER]  
 
 2020-11-23 21:30:12,016 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20037} execute error. delete from t_tages where id=?  
 java.sql.SQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`blog`.`t_blog_tages`, CONSTRAINT `tid` FOREIGN KEY (`tid`) REFERENCES `t_tages` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:117)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor60.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy115.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy113.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy74.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy75.delete(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy76.delete(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.delete(BaseServiceImpl.java:127)
	at com.example.blog.service.TagesServiceImpl.deleteTage(TagesServiceImpl.java:47)
	at com.example.blog.controller.TageController.deleteTage(TageController.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-23 21:30:12,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20037} clearParameters.   
 
 2020-11-23 21:30:12,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20037} closed  
 
 2020-11-23 21:30:12,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-23 21:32:06,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} closed  
 
 2020-11-23 21:32:06,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007,procId-1282} connected  
 
 2020-11-23 21:32:06,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:06,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20038} created. SELECT count(0) FROM t_tages WHERE tage LIKE concat('%', ?, '%')  
 
 2020-11-23 21:32:06,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20038} Parameters : []  
 
 2020-11-23 21:32:06,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20038} Types : [VARCHAR]  
 
 2020-11-23 21:32:06,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20038} executed. 2.8692 millis. SELECT count(0) FROM t_tages WHERE tage LIKE concat('%', ?, '%')  
 
 2020-11-23 21:32:06,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20038, rs-50054} open  
 
 2020-11-23 21:32:06,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20038, rs-50054} Header: [count(0)]  
 
 2020-11-23 21:32:06,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20038, rs-50054} Result: [1]  
 
 2020-11-23 21:32:06,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20038, rs-50054} closed  
 
 2020-11-23 21:32:06,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20038} clearParameters.   
 
 2020-11-23 21:32:06,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20039} created. select * from  t_tages where tage like concat ('%',?,'%') LIMIT ?   
 
 2020-11-23 21:32:06,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20039} Parameters : [, 5]  
 
 2020-11-23 21:32:06,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20039} Types : [VARCHAR, INTEGER]  
 
 2020-11-23 21:32:06,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20039} executed. 2.715 millis. select * from  t_tages where tage like concat ('%',?,'%') LIMIT ?   
 
 2020-11-23 21:32:06,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20039, rs-50055} open  
 
 2020-11-23 21:32:06,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20039, rs-50055} Header: [id, tage]  
 
 2020-11-23 21:32:06,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20039, rs-50055} Result: [1, 学习日记]  
 
 2020-11-23 21:32:06,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20039, rs-50055} closed  
 
 2020-11-23 21:32:06,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20039} clearParameters.   
 
 2020-11-23 21:32:06,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:06,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:06,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:06,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} Parameters : []  
 
 2020-11-23 21:32:06,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} Types : []  
 
 2020-11-23 21:32:06,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} executed. 1.61 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:06,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50056} open  
 
 2020-11-23 21:32:06,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50056} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:32:06,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50056} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:32:06,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50056} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:32:06,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50056} closed  
 
 2020-11-23 21:32:06,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} clearParameters.   
 
 2020-11-23 21:32:06,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:17,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:17,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} created. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-23 21:32:17,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} Parameters : [null, 开发日记]  
 
 2020-11-23 21:32:17,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} Types : [OTHER, VARCHAR]  
 
 2020-11-23 21:32:17,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} executed. 15.8604 millis. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-23 21:32:17,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} clearParameters.   
 
 2020-11-23 21:32:17,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:17,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:17,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} created. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:17,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Parameters : []  
 
 2020-11-23 21:32:17,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Types : []  
 
 2020-11-23 21:32:17,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} executed. 1.8282 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:17,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50057} open  
 
 2020-11-23 21:32:17,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50057} Header: [count(0)]  
 
 2020-11-23 21:32:17,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50057} Result: [2]  
 
 2020-11-23 21:32:17,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50057} closed  
 
 2020-11-23 21:32:17,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} clearParameters.   
 
 2020-11-23 21:32:17,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} created. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:17,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Parameters : [5]  
 
 2020-11-23 21:32:17,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Types : [INTEGER]  
 
 2020-11-23 21:32:17,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} executed. 1.3857 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:17,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50058} open  
 
 2020-11-23 21:32:17,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50058} Header: [id, tage]  
 
 2020-11-23 21:32:17,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50058} Result: [1, 学习日记]  
 
 2020-11-23 21:32:17,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50058} Result: [11, 开发日记]  
 
 2020-11-23 21:32:17,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50058} closed  
 
 2020-11-23 21:32:17,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} clearParameters.   
 
 2020-11-23 21:32:17,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:17,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:17,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} Parameters : []  
 
 2020-11-23 21:32:17,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} Types : []  
 
 2020-11-23 21:32:17,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} executed. 1.4125 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:17,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50059} open  
 
 2020-11-23 21:32:17,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50059} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:32:17,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50059} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:32:17,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50059} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:32:17,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50059} closed  
 
 2020-11-23 21:32:17,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} clearParameters.   
 
 2020-11-23 21:32:17,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:19,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:19,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20044} created. delete from t_tages where id=?  
 
 2020-11-23 21:32:19,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20044} Parameters : [11]  
 
 2020-11-23 21:32:19,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20044} Types : [INTEGER]  
 
 2020-11-23 21:32:19,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20044} executed. 15.0176 millis. delete from t_tages where id=?  
 
 2020-11-23 21:32:19,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20044} clearParameters.   
 
 2020-11-23 21:32:19,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:19,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:19,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Parameters : []  
 
 2020-11-23 21:32:19,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Types : []  
 
 2020-11-23 21:32:19,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} executed. 5.131 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:19,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50060} open  
 
 2020-11-23 21:32:19,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50060} Header: [count(0)]  
 
 2020-11-23 21:32:19,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50060} Result: [1]  
 
 2020-11-23 21:32:19,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50060} closed  
 
 2020-11-23 21:32:19,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} clearParameters.   
 
 2020-11-23 21:32:19,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Parameters : [5]  
 
 2020-11-23 21:32:19,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Types : [INTEGER]  
 
 2020-11-23 21:32:19,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} executed. 1.6635 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:19,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50061} open  
 
 2020-11-23 21:32:19,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50061} Header: [id, tage]  
 
 2020-11-23 21:32:19,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50061} Result: [1, 学习日记]  
 
 2020-11-23 21:32:19,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50061} closed  
 
 2020-11-23 21:32:19,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} clearParameters.   
 
 2020-11-23 21:32:19,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:20,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:20,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} Parameters : []  
 
 2020-11-23 21:32:20,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} Types : []  
 
 2020-11-23 21:32:20,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} executed. 1.3425 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:20,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50062} open  
 
 2020-11-23 21:32:20,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50062} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:32:20,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50062} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:32:20,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50062} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:32:20,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20040, rs-50062} closed  
 
 2020-11-23 21:32:20,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20040} clearParameters.   
 
 2020-11-23 21:32:20,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:26,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:26,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} Parameters : [null, 开发日记]  
 
 2020-11-23 21:32:26,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} Types : [OTHER, VARCHAR]  
 
 2020-11-23 21:32:26,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} executed. 6.9424 millis. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-23 21:32:26,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20041} clearParameters.   
 
 2020-11-23 21:32:26,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:26,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:26,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Parameters : []  
 
 2020-11-23 21:32:26,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Types : []  
 
 2020-11-23 21:32:26,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} executed. 2.7662 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:26,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50063} open  
 
 2020-11-23 21:32:26,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50063} Header: [count(0)]  
 
 2020-11-23 21:32:26,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50063} Result: [2]  
 
 2020-11-23 21:32:26,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50063} closed  
 
 2020-11-23 21:32:26,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} clearParameters.   
 
 2020-11-23 21:32:26,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Parameters : [5]  
 
 2020-11-23 21:32:26,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Types : [INTEGER]  
 
 2020-11-23 21:32:26,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008,procId-1283} connected  
 
 2020-11-23 21:32:26,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} executed. 1.6348 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:26,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50064} open  
 
 2020-11-23 21:32:26,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50064} Header: [id, tage]  
 
 2020-11-23 21:32:26,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:26,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50064} Result: [1, 学习日记]  
 
 2020-11-23 21:32:26,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} created. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:26,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50064} Result: [12, 开发日记]  
 
 2020-11-23 21:32:26,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} Parameters : []  
 
 2020-11-23 21:32:26,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50064} closed  
 
 2020-11-23 21:32:26,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} Types : []  
 
 2020-11-23 21:32:26,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} clearParameters.   
 
 2020-11-23 21:32:26,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:26,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} executed. 4.11 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:26,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50065} open  
 
 2020-11-23 21:32:26,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50065} Header: [count(0)]  
 
 2020-11-23 21:32:26,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50065} Result: [2]  
 
 2020-11-23 21:32:26,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50065} closed  
 
 2020-11-23 21:32:26,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} clearParameters.   
 
 2020-11-23 21:32:26,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} created. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:26,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} Parameters : [5]  
 
 2020-11-23 21:32:26,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} Types : [INTEGER]  
 
 2020-11-23 21:32:26,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} executed. 1.8923 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:26,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50066} open  
 
 2020-11-23 21:32:26,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50066} Header: [id, tage]  
 
 2020-11-23 21:32:26,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50066} Result: [1, 学习日记]  
 
 2020-11-23 21:32:26,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50066} Result: [12, 开发日记]  
 
 2020-11-23 21:32:26,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50066} closed  
 
 2020-11-23 21:32:26,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} clearParameters.   
 
 2020-11-23 21:32:26,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:26,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:26,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} created. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:26,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} Parameters : []  
 
 2020-11-23 21:32:26,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} Types : []  
 
 2020-11-23 21:32:26,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} executed. 1.7941 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:26,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50067} open  
 
 2020-11-23 21:32:26,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50067} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:32:26,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50067} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:32:26,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50067} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:32:26,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50067} closed  
 
 2020-11-23 21:32:26,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} clearParameters.   
 
 2020-11-23 21:32:26,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:32,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:32,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} created. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-23 21:32:32,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} Parameters : [null, 数据库日记]  
 
 2020-11-23 21:32:32,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} Types : [OTHER, VARCHAR]  
 
 2020-11-23 21:32:32,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:32,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Parameters : []  
 
 2020-11-23 21:32:32,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} executed. 11.9151 millis. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-23 21:32:32,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Types : []  
 
 2020-11-23 21:32:32,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} clearParameters.   
 
 2020-11-23 21:32:32,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:32,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} executed. 3.5376 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:32,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50068} open  
 
 2020-11-23 21:32:32,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50068} Header: [count(0)]  
 
 2020-11-23 21:32:32,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50068} Result: [3]  
 
 2020-11-23 21:32:32,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50068} closed  
 
 2020-11-23 21:32:32,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} clearParameters.   
 
 2020-11-23 21:32:32,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Parameters : [5]  
 
 2020-11-23 21:32:32,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Types : [INTEGER]  
 
 2020-11-23 21:32:32,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} executed. 1.8846 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:32,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50069} open  
 
 2020-11-23 21:32:32,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50069} Header: [id, tage]  
 
 2020-11-23 21:32:32,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:32,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50069} Result: [1, 学习日记]  
 
 2020-11-23 21:32:32,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} Parameters : []  
 
 2020-11-23 21:32:32,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50069} Result: [12, 开发日记]  
 
 2020-11-23 21:32:32,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} Types : []  
 
 2020-11-23 21:32:32,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50069} Result: [13, 数据库日记]  
 
 2020-11-23 21:32:32,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50069} closed  
 
 2020-11-23 21:32:32,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} executed. 3.5713 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:32,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} clearParameters.   
 
 2020-11-23 21:32:32,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50070} open  
 
 2020-11-23 21:32:32,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50070} Header: [count(0)]  
 
 2020-11-23 21:32:32,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:32,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50070} Result: [3]  
 
 2020-11-23 21:32:32,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50070} closed  
 
 2020-11-23 21:32:32,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} clearParameters.   
 
 2020-11-23 21:32:32,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} Parameters : [5]  
 
 2020-11-23 21:32:32,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} Types : [INTEGER]  
 
 2020-11-23 21:32:32,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} executed. 2.572 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:32,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50071} open  
 
 2020-11-23 21:32:32,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50071} Header: [id, tage]  
 
 2020-11-23 21:32:32,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50071} Result: [1, 学习日记]  
 
 2020-11-23 21:32:32,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50071} Result: [12, 开发日记]  
 
 2020-11-23 21:32:32,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50071} Result: [13, 数据库日记]  
 
 2020-11-23 21:32:32,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50071} closed  
 
 2020-11-23 21:32:32,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} clearParameters.   
 
 2020-11-23 21:32:32,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:32,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:32,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} Parameters : []  
 
 2020-11-23 21:32:32,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} Types : []  
 
 2020-11-23 21:32:32,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} executed. 1.4449 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:32,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50072} open  
 
 2020-11-23 21:32:32,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50072} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:32:32,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50072} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:32:32,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50072} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:32:32,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50072} closed  
 
 2020-11-23 21:32:32,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} clearParameters.   
 
 2020-11-23 21:32:32,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:43,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:43,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} Parameters : [null, 开发手册]  
 
 2020-11-23 21:32:43,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} Types : [OTHER, VARCHAR]  
 
 2020-11-23 21:32:43,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-23 21:32:43,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Parameters : []  
 
 2020-11-23 21:32:43,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} Types : []  
 
 2020-11-23 21:32:43,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} executed. 14.1176 millis. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-23 21:32:43,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20048} clearParameters.   
 
 2020-11-23 21:32:43,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} executed. 3.218 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:43,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:43,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50073} open  
 
 2020-11-23 21:32:43,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50073} Header: [count(0)]  
 
 2020-11-23 21:32:43,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50073} Result: [4]  
 
 2020-11-23 21:32:43,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20042, rs-50073} closed  
 
 2020-11-23 21:32:43,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20042} clearParameters.   
 
 2020-11-23 21:32:43,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Parameters : [5]  
 
 2020-11-23 21:32:43,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} Types : [INTEGER]  
 
 2020-11-23 21:32:43,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} executed. 2.1164 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:43,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50074} open  
 
 2020-11-23 21:32:43,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50074} Header: [id, tage]  
 
 2020-11-23 21:32:43,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50074} Result: [1, 学习日记]  
 
 2020-11-23 21:32:43,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50074} Result: [12, 开发日记]  
 
 2020-11-23 21:32:43,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50074} Result: [13, 数据库日记]  
 
 2020-11-23 21:32:43,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:43,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50074} Result: [14, 开发手册]  
 
 2020-11-23 21:32:43,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} Parameters : []  
 
 2020-11-23 21:32:43,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20043, rs-50074} closed  
 
 2020-11-23 21:32:43,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} Types : []  
 
 2020-11-23 21:32:43,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20043} clearParameters.   
 
 2020-11-23 21:32:43,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-23 21:32:43,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} executed. 2.7596 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:43,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50075} open  
 
 2020-11-23 21:32:43,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50075} Header: [count(0)]  
 
 2020-11-23 21:32:43,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50075} Result: [4]  
 
 2020-11-23 21:32:43,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50075} closed  
 
 2020-11-23 21:32:43,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} clearParameters.   
 
 2020-11-23 21:32:43,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} Parameters : [5]  
 
 2020-11-23 21:32:43,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} Types : [INTEGER]  
 
 2020-11-23 21:32:43,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} executed. 1.3225 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:43,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50076} open  
 
 2020-11-23 21:32:43,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50076} Header: [id, tage]  
 
 2020-11-23 21:32:43,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50076} Result: [1, 学习日记]  
 
 2020-11-23 21:32:43,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50076} Result: [12, 开发日记]  
 
 2020-11-23 21:32:43,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50076} Result: [13, 数据库日记]  
 
 2020-11-23 21:32:43,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50076} Result: [14, 开发手册]  
 
 2020-11-23 21:32:43,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50076} closed  
 
 2020-11-23 21:32:43,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} clearParameters.   
 
 2020-11-23 21:32:43,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:43,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:43,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} Parameters : []  
 
 2020-11-23 21:32:43,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} Types : []  
 
 2020-11-23 21:32:43,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} executed. 1.5868 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:43,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50077} open  
 
 2020-11-23 21:32:43,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50077} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:32:43,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50077} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:32:43,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50077} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:32:43,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50077} closed  
 
 2020-11-23 21:32:43,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} clearParameters.   
 
 2020-11-23 21:32:43,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:46,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:46,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20049} created. delete from t_tages where id=?  
 
 2020-11-23 21:32:46,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20049} Parameters : [14]  
 
 2020-11-23 21:32:46,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20049} Types : [INTEGER]  
 
 2020-11-23 21:32:46,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20049} executed. 15.9568 millis. delete from t_tages where id=?  
 
 2020-11-23 21:32:46,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20049} clearParameters.   
 
 2020-11-23 21:32:46,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:46,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:46,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} Parameters : []  
 
 2020-11-23 21:32:46,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} Types : []  
 
 2020-11-23 21:32:46,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} executed. 2.6864 millis. SELECT count(0) FROM t_tages  
 
 2020-11-23 21:32:46,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50078} open  
 
 2020-11-23 21:32:46,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50078} Header: [count(0)]  
 
 2020-11-23 21:32:46,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50078} Result: [3]  
 
 2020-11-23 21:32:46,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20045, rs-50078} closed  
 
 2020-11-23 21:32:46,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20045} clearParameters.   
 
 2020-11-23 21:32:46,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} Parameters : [5]  
 
 2020-11-23 21:32:46,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} Types : [INTEGER]  
 
 2020-11-23 21:32:46,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} executed. 3.0392 millis. select * from t_tages LIMIT ?   
 
 2020-11-23 21:32:46,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50079} open  
 
 2020-11-23 21:32:46,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50079} Header: [id, tage]  
 
 2020-11-23 21:32:46,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50079} Result: [1, 学习日记]  
 
 2020-11-23 21:32:46,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50079} Result: [12, 开发日记]  
 
 2020-11-23 21:32:46,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50079} Result: [13, 数据库日记]  
 
 2020-11-23 21:32:46,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20046, rs-50079} closed  
 
 2020-11-23 21:32:46,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20046} clearParameters.   
 
 2020-11-23 21:32:46,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-23 21:32:46,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-23 21:32:46,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} Parameters : []  
 
 2020-11-23 21:32:46,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} Types : []  
 
 2020-11-23 21:32:46,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} executed. 1.9954 millis. SELECT * FROM t_blog ORDER BY createtime DESC LIMIT 0,3  
 
 2020-11-23 21:32:46,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50080} open  
 
 2020-11-23 21:32:46,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50080} Header: [id, title, content, firstpicture, flag, views, appreciation, opencomment, sharestatment, publish, recommend, createtime, updatetime, blogdescribe]  
 
 2020-11-23 21:32:46,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50080} Result: [12, Java笔记, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 原创, 9, true, true, true, true, true, 2020-11-19 17:00:12.0, 2020-11-20 04:47:35.0, 这是一些有关于java基础的内容]  
 
 2020-11-23 21:32:46,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50080} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 原创, 16, true, true, true, true, true, 2020-11-19 16:11:12.0, 2020-11-20 03:31:52.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-23 21:32:46,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20047, rs-50080} closed  
 
 2020-11-23 21:32:46,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20047} clearParameters.   
 
 2020-11-23 21:32:46,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 