
 2020-11-19 08:22:12,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-549} connected  
 
 2020-11-19 08:22:12,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-550} connected  
 
 2020-11-19 08:22:12,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-551} connected  
 
 2020-11-19 08:22:12,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-552} connected  
 
 2020-11-19 08:22:12,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-553} connected  
 
 2020-11-19 08:22:13,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:13,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 08:22:13,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 08:22:13,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 08:22:13,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 47.7451 millis. select * from t_types  
 
 2020-11-19 08:22:13,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 08:22:13,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 08:22:13,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 08:22:13,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 08:22:13,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 08:22:13,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 08:22:13,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 08:22:13,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 08:22:13,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 08:22:13,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 08:22:13,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:13,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:13,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 08:22:13,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 08:22:13,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 08:22:13,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.3473 millis. select * from t_tages  
 
 2020-11-19 08:22:13,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 08:22:13,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 08:22:13,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 08:22:13,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 08:22:13,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 08:22:13,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 08:22:13,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 08:22:13,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 08:22:13,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 08:22:13,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 08:22:13,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:13,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:13,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:13,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:13,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:22:13,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 08:22:13,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 08:22:13,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.7473 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:22:13,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 08:22:13,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 08:22:13,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 08:22:13,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 08:22:13,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 08:22:13,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:22:13,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 08:22:13,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 08:22:13,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.322 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:22:13,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 08:22:13,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 08:22:13,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 08:22:13,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 08:22:13,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 08:22:13,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 08:22:13,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 08:22:13,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:14,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:14,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 08:22:14,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 08:22:14,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 5.0278 millis. select * from t_types  
 
 2020-11-19 08:22:14,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 08:22:14,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 08:22:14,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 08:22:14,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 08:22:14,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 08:22:14,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 08:22:14,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 08:22:14,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 08:22:14,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 08:22:14,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 08:22:14,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:14,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:14,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 08:22:14,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 08:22:14,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.3109 millis. select * from t_tages  
 
 2020-11-19 08:22:14,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 08:22:14,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 08:22:14,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 08:22:14,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 08:22:14,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 08:22:14,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 08:22:14,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 08:22:14,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 08:22:14,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 08:22:14,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 08:22:14,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:14,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:14,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 08:22:14,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 08:22:14,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.1796 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:22:14,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 08:22:14,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 08:22:14,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [3]  
 
 2020-11-19 08:22:14,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 08:22:14,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 08:22:14,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 08:22:14,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 08:22:14,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.1194 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:22:14,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 08:22:14,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 08:22:14,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 08:22:14,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 08:22:14,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 08:22:14,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 08:22:14,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 08:22:14,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:25,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:26,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 08:22:26,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 08:22:26,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 08:22:26,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.4429 millis. select * from t_user where username=?  
 
 2020-11-19 08:22:26,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-19 08:22:26,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 08:22:26,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 08:22:26,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-19 08:22:26,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 08:22:26,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:44,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:44,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:22:44,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:22:44,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:22:44,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 12.953 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:22:44,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-19 08:22:44,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-19 08:22:44,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [6]  
 
 2020-11-19 08:22:44,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-19 08:22:44,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:22:44,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_tages LIMIT ?   
 
 2020-11-19 08:22:44,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:22:44,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:22:44,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.3362 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:22:44,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-19 08:22:44,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [id, tage]  
 
 2020-11-19 08:22:44,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [1, 学习日记]  
 
 2020-11-19 08:22:44,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-19 08:22:44,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-19 08:22:44,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-19 08:22:44,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [5, 开发日记]  
 
 2020-11-19 08:22:44,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-19 08:22:44,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:22:44,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:48,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:48,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:22:48,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:22:48,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.9232 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:22:48,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50011} open  
 
 2020-11-19 08:22:48,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50011} Header: [count(0)]  
 
 2020-11-19 08:22:48,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50011} Result: [6]  
 
 2020-11-19 08:22:48,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50011} closed  
 
 2020-11-19 08:22:48,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:22:48,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:22:48,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5, 5]  
 
 2020-11-19 08:22:48,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-19 08:22:48,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.171 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:22:48,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50012} open  
 
 2020-11-19 08:22:48,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50012} Header: [id, tage]  
 
 2020-11-19 08:22:48,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50012} Result: [8, 开发手册]  
 
 2020-11-19 08:22:48,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50012} closed  
 
 2020-11-19 08:22:48,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 08:22:48,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:22:54,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:22:54,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:22:54,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:22:54,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.4729 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:22:54,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} open  
 
 2020-11-19 08:22:54,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Header: [count(0)]  
 
 2020-11-19 08:22:54,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [6]  
 
 2020-11-19 08:22:54,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} closed  
 
 2020-11-19 08:22:54,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:22:54,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:22:54,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:22:54,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.9469 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:22:54,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} open  
 
 2020-11-19 08:22:54,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Header: [id, tage]  
 
 2020-11-19 08:22:54,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Result: [1, 学习日记]  
 
 2020-11-19 08:22:54,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Result: [2, 错误笔记]  
 
 2020-11-19 08:22:54,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Result: [3, 数据库笔记]  
 
 2020-11-19 08:22:54,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Result: [4, 程序运行日记]  
 
 2020-11-19 08:22:54,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} Result: [5, 开发日记]  
 
 2020-11-19 08:22:54,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50014} closed  
 
 2020-11-19 08:22:54,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:22:54,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:23:16,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:23:16,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:23:16,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:23:16,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.5664 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:23:16,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} open  
 
 2020-11-19 08:23:16,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} Header: [count(0)]  
 
 2020-11-19 08:23:16,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} Result: [6]  
 
 2020-11-19 08:23:16,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50015} closed  
 
 2020-11-19 08:23:16,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:23:16,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:23:16,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:23:16,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.819 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:23:16,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} open  
 
 2020-11-19 08:23:16,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} Header: [id, tage]  
 
 2020-11-19 08:23:16,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} Result: [1, 学习日记]  
 
 2020-11-19 08:23:16,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} Result: [2, 错误笔记]  
 
 2020-11-19 08:23:16,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} Result: [3, 数据库笔记]  
 
 2020-11-19 08:23:16,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} Result: [4, 程序运行日记]  
 
 2020-11-19 08:23:16,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} Result: [5, 开发日记]  
 
 2020-11-19 08:23:16,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50016} closed  
 
 2020-11-19 08:23:16,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:23:16,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:23:16,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 08:23:16,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:23:16,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-19 08:23:16,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [null, 搭建日记]  
 
 2020-11-19 08:23:16,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-554} connected  
 
 2020-11-19 08:23:16,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [OTHER, VARCHAR]  
 
 2020-11-19 08:23:16,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 15.6853 millis. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-19 08:23:16,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 08:23:16,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:23:19,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:23:19,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:23:19,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:23:19,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.2812 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:23:19,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50017} open  
 
 2020-11-19 08:23:19,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50017} Header: [count(0)]  
 
 2020-11-19 08:23:19,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50017} Result: [7]  
 
 2020-11-19 08:23:19,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50017} closed  
 
 2020-11-19 08:23:19,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:23:19,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5, 5]  
 
 2020-11-19 08:23:19,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-19 08:23:19,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.3295 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:23:19,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} open  
 
 2020-11-19 08:23:19,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} Header: [id, tage]  
 
 2020-11-19 08:23:19,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} Result: [8, 开发手册]  
 
 2020-11-19 08:23:19,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} Result: [9, 搭建日记]  
 
 2020-11-19 08:23:19,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50018} closed  
 
 2020-11-19 08:23:19,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 08:23:19,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:23:21,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:23:21,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:23:21,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:23:21,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.5297 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:23:21,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50019} open  
 
 2020-11-19 08:23:21,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50019} Header: [count(0)]  
 
 2020-11-19 08:23:21,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50019} Result: [7]  
 
 2020-11-19 08:23:21,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50019} closed  
 
 2020-11-19 08:23:21,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:23:21,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:23:21,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:23:21,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.034 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:23:21,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50020} open  
 
 2020-11-19 08:23:21,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50020} Header: [id, tage]  
 
 2020-11-19 08:23:21,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50020} Result: [1, 学习日记]  
 
 2020-11-19 08:23:21,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50020} Result: [2, 错误笔记]  
 
 2020-11-19 08:23:21,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50020} Result: [3, 数据库笔记]  
 
 2020-11-19 08:23:21,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50020} Result: [4, 程序运行日记]  
 
 2020-11-19 08:23:21,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50020} Result: [5, 开发日记]  
 
 2020-11-19 08:23:21,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50020} closed  
 
 2020-11-19 08:23:21,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:23:21,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:25:11,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-555} connected  
 
 2020-11-19 08:25:11,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-556} connected  
 
 2020-11-19 08:25:11,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-557} connected  
 
 2020-11-19 08:25:11,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-558} connected  
 
 2020-11-19 08:25:11,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-559} connected  
 
 2020-11-19 08:25:11,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:25:11,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 08:25:11,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 08:25:11,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 08:25:11,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 26.2677 millis. select * from t_types  
 
 2020-11-19 08:25:11,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 08:25:11,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 08:25:12,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 08:25:12,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 08:25:12,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 08:25:12,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 08:25:12,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 08:25:12,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 08:25:12,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 08:25:12,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 08:25:12,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:25:12,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:25:12,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 08:25:12,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 08:25:12,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 08:25:12,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.8957 millis. select * from t_tages  
 
 2020-11-19 08:25:12,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 08:25:12,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 08:25:12,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 08:25:12,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 08:25:12,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 08:25:12,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 08:25:12,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 08:25:12,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 08:25:12,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 搭建日记]  
 
 2020-11-19 08:25:12,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 08:25:12,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 08:25:12,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:25:12,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:25:12,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:25:12,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:25:12,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:25:12,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 08:25:12,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 08:25:12,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.3183 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:25:12,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 08:25:12,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 08:25:12,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 08:25:12,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 08:25:12,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 08:25:12,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:25:12,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 08:25:12,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 08:25:12,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 7.5768 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:25:12,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 08:25:12,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 08:25:12,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 08:25:12,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 08:25:12,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 08:25:12,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 08:25:12,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 08:25:12,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:25:19,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:25:19,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 08:25:19,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 08:25:19,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 08:25:19,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.6608 millis. select * from t_user where username=?  
 
 2020-11-19 08:25:19,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 08:25:19,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 08:25:19,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 08:25:19,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 08:25:19,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 08:25:19,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:25:24,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:25:24,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:25:24,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:25:24,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:25:24,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.9792 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:25:24,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-19 08:25:24,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-19 08:25:24,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [7]  
 
 2020-11-19 08:25:24,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-19 08:25:24,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:25:24,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_tages LIMIT ?   
 
 2020-11-19 08:25:24,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:25:24,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:25:24,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.828 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:25:24,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-19 08:25:24,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [id, tage]  
 
 2020-11-19 08:25:24,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [1, 学习日记]  
 
 2020-11-19 08:25:24,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-19 08:25:24,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-19 08:25:24,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-19 08:25:24,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [5, 开发日记]  
 
 2020-11-19 08:25:24,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-19 08:25:24,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:25:24,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:38,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-560} connected  
 
 2020-11-19 08:26:38,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-561} connected  
 
 2020-11-19 08:26:38,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-562} connected  
 
 2020-11-19 08:26:38,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-563} connected  
 
 2020-11-19 08:26:38,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-564} connected  
 
 2020-11-19 08:26:38,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:39,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 08:26:39,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 08:26:39,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 08:26:39,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 18.5531 millis. select * from t_types  
 
 2020-11-19 08:26:39,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 08:26:39,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 08:26:39,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 08:26:39,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 08:26:39,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 08:26:39,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 08:26:39,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 08:26:39,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 08:26:39,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 08:26:39,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 08:26:39,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:39,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:39,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 08:26:39,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 08:26:39,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 08:26:39,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.5046 millis. select * from t_tages  
 
 2020-11-19 08:26:39,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 08:26:39,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 08:26:39,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 08:26:39,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 08:26:39,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 08:26:39,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 08:26:39,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 08:26:39,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 08:26:39,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 搭建日记]  
 
 2020-11-19 08:26:39,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 08:26:39,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 08:26:39,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:39,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:39,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:39,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:39,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:26:39,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 08:26:39,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 08:26:39,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.014 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:26:39,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 08:26:39,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 08:26:39,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 08:26:39,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 08:26:39,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 08:26:39,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:26:39,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 08:26:39,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 08:26:39,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.0058 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:26:39,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 08:26:39,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 08:26:39,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 08:26:39,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 08:26:39,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 08:26:39,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 08:26:39,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 08:26:39,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:46,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:46,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 08:26:46,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 08:26:46,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 08:26:46,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.8515 millis. select * from t_user where username=?  
 
 2020-11-19 08:26:46,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 08:26:46,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 08:26:46,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 08:26:46,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 08:26:46,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 08:26:46,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:48,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:48,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:26:48,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:26:48,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:26:48,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.6069 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:26:48,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-19 08:26:48,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-19 08:26:48,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [7]  
 
 2020-11-19 08:26:48,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-19 08:26:48,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:26:48,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_tages LIMIT ?   
 
 2020-11-19 08:26:48,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:26:48,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:26:48,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.932 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:26:48,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-19 08:26:48,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [id, tage]  
 
 2020-11-19 08:26:48,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [1, 学习日记]  
 
 2020-11-19 08:26:48,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-19 08:26:48,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-19 08:26:48,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-19 08:26:48,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [5, 开发日记]  
 
 2020-11-19 08:26:48,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-19 08:26:48,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:26:48,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:53,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:53,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:26:53,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:26:53,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.2278 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:26:53,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} open  
 
 2020-11-19 08:26:53,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Header: [count(0)]  
 
 2020-11-19 08:26:53,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [7]  
 
 2020-11-19 08:26:53,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} closed  
 
 2020-11-19 08:26:53,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:26:53,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:26:53,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5, 5]  
 
 2020-11-19 08:26:53,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-19 08:26:53,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.4215 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:26:53,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} open  
 
 2020-11-19 08:26:53,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Header: [id, tage]  
 
 2020-11-19 08:26:53,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Result: [8, 开发手册]  
 
 2020-11-19 08:26:53,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Result: [9, 搭建日记]  
 
 2020-11-19 08:26:53,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} closed  
 
 2020-11-19 08:26:53,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 08:26:53,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:56,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:56,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. delete from t_tages where id=?  
 
 2020-11-19 08:26:56,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [9]  
 
 2020-11-19 08:26:56,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 08:26:56,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 8.3318 millis. delete from t_tages where id=?  
 
 2020-11-19 08:26:56,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 08:26:56,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:26:56,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:26:56,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:26:56,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:26:56,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 1.954 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:26:56,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-19 08:26:56,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-19 08:26:56,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [6]  
 
 2020-11-19 08:26:56,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-19 08:26:56,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:26:56,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:26:56,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:26:56,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 1.9376 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:26:56,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-19 08:26:56,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [id, tage]  
 
 2020-11-19 08:26:56,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [1, 学习日记]  
 
 2020-11-19 08:26:56,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-19 08:26:56,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-19 08:26:56,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-19 08:26:56,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [5, 开发日记]  
 
 2020-11-19 08:26:56,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-19 08:26:56,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:26:56,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:27:03,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:27:03,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 08:27:03,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:27:03,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : []  
 
 2020-11-19 08:27:03,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : []  
 
 2020-11-19 08:27:03,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-19 08:27:03,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 4.902 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:27:03,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50011} open  
 
 2020-11-19 08:27:03,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [null, 搭建日记]  
 
 2020-11-19 08:27:03,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [OTHER, VARCHAR]  
 
 2020-11-19 08:27:03,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50011} Header: [count(0)]  
 
 2020-11-19 08:27:03,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50011} Result: [6]  
 
 2020-11-19 08:27:03,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50011} closed  
 
 2020-11-19 08:27:03,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-19 08:27:03,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} created. select * from t_tages LIMIT ?   
 
 2020-11-19 08:27:03,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 5.4844 millis. insert into t_tages
         (  
            id
         , 
            tage
         ) 
        values
         (  
            ?
         , 
            ?
         )  
 
 2020-11-19 08:27:03,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : [5]  
 
 2020-11-19 08:27:03,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : [INTEGER]  
 
 2020-11-19 08:27:03,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-19 08:27:03,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:27:03,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 2.5267 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:27:03,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} open  
 
 2020-11-19 08:27:03,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} Header: [id, tage]  
 
 2020-11-19 08:27:03,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} Result: [1, 学习日记]  
 
 2020-11-19 08:27:03,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} Result: [2, 错误笔记]  
 
 2020-11-19 08:27:03,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} Result: [3, 数据库笔记]  
 
 2020-11-19 08:27:03,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} Result: [4, 程序运行日记]  
 
 2020-11-19 08:27:03,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} Result: [5, 开发日记]  
 
 2020-11-19 08:27:03,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50012} closed  
 
 2020-11-19 08:27:03,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-19 08:27:03,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 08:27:03,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 08:27:03,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : []  
 
 2020-11-19 08:27:03,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : []  
 
 2020-11-19 08:27:03,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 2.8524 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:27:03,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} open  
 
 2020-11-19 08:27:03,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Header: [count(0)]  
 
 2020-11-19 08:27:03,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [7]  
 
 2020-11-19 08:27:03,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} closed  
 
 2020-11-19 08:27:03,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-19 08:27:03,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : [5]  
 
 2020-11-19 08:27:03,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : [INTEGER]  
 
 2020-11-19 08:27:03,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 1.6556 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:27:03,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50014} open  
 
 2020-11-19 08:27:03,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50014} Header: [id, tage]  
 
 2020-11-19 08:27:03,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50014} Result: [1, 学习日记]  
 
 2020-11-19 08:27:03,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50014} Result: [2, 错误笔记]  
 
 2020-11-19 08:27:03,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50014} Result: [3, 数据库笔记]  
 
 2020-11-19 08:27:03,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50014} Result: [4, 程序运行日记]  
 
 2020-11-19 08:27:03,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50014} Result: [5, 开发日记]  
 
 2020-11-19 08:27:03,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50014} closed  
 
 2020-11-19 08:27:03,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-19 08:27:03,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 08:27:09,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 08:27:09,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : []  
 
 2020-11-19 08:27:09,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : []  
 
 2020-11-19 08:27:09,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 2.7742 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:27:09,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} open  
 
 2020-11-19 08:27:09,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} Header: [count(0)]  
 
 2020-11-19 08:27:09,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} Result: [7]  
 
 2020-11-19 08:27:09,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} closed  
 
 2020-11-19 08:27:09,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-19 08:27:09,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} created. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:27:09,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Parameters : [5, 5]  
 
 2020-11-19 08:27:09,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Types : [INTEGER, INTEGER]  
 
 2020-11-19 08:27:09,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} executed. 2.1403 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:27:09,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} open  
 
 2020-11-19 08:27:09,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} Header: [id, tage]  
 
 2020-11-19 08:27:09,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} Result: [8, 开发手册]  
 
 2020-11-19 08:27:09,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} Result: [10, 搭建日记]  
 
 2020-11-19 08:27:09,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50016} closed  
 
 2020-11-19 08:27:09,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} clearParameters.   
 
 2020-11-19 08:27:09,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 08:27:15,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 08:27:15,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : []  
 
 2020-11-19 08:27:15,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : []  
 
 2020-11-19 08:27:15,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 3.1971 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:27:15,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50017} open  
 
 2020-11-19 08:27:15,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50017} Header: [count(0)]  
 
 2020-11-19 08:27:15,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50017} Result: [7]  
 
 2020-11-19 08:27:15,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50017} closed  
 
 2020-11-19 08:27:15,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-19 08:27:15,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : [5]  
 
 2020-11-19 08:27:15,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : [INTEGER]  
 
 2020-11-19 08:27:15,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 2.1796 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:27:15,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50018} open  
 
 2020-11-19 08:27:15,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50018} Header: [id, tage]  
 
 2020-11-19 08:27:15,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50018} Result: [1, 学习日记]  
 
 2020-11-19 08:27:15,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50018} Result: [2, 错误笔记]  
 
 2020-11-19 08:27:15,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50018} Result: [3, 数据库笔记]  
 
 2020-11-19 08:27:15,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50018} Result: [4, 程序运行日记]  
 
 2020-11-19 08:27:15,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50018} Result: [5, 开发日记]  
 
 2020-11-19 08:27:15,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50018} closed  
 
 2020-11-19 08:27:15,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-19 08:27:15,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 08:45:22,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-565} connected  
 
 2020-11-19 08:45:22,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-566} connected  
 
 2020-11-19 08:45:22,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-567} connected  
 
 2020-11-19 08:45:22,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-568} connected  
 
 2020-11-19 08:45:22,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-569} connected  
 
 2020-11-19 08:45:22,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:45:23,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 08:45:23,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 08:45:23,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 08:45:23,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 20.4527 millis. select * from t_types  
 
 2020-11-19 08:45:23,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 08:45:23,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 08:45:23,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 08:45:23,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 08:45:23,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 08:45:23,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 08:45:23,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 08:45:23,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 08:45:23,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 08:45:23,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 08:45:23,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:45:23,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:45:23,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 08:45:23,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 08:45:23,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 08:45:23,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.6643 millis. select * from t_tages  
 
 2020-11-19 08:45:23,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 08:45:23,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 08:45:23,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 08:45:23,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 08:45:23,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 08:45:23,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 08:45:23,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 08:45:23,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 08:45:23,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 08:45:23,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 08:45:23,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 08:45:23,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:45:23,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:45:23,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:45:23,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:45:23,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:45:23,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 08:45:23,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 08:45:23,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.9692 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 08:45:23,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 08:45:23,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 08:45:23,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 08:45:23,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 08:45:23,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 08:45:23,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:45:23,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 08:45:23,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 08:45:23,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 10.2598 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 08:45:23,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 08:45:23,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 08:45:23,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 08:45:23,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 08:45:23,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 08:45:23,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 08:45:23,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 08:45:23,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:45:32,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:45:32,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 08:45:32,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 08:45:32,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 08:45:32,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 6.3199 millis. select * from t_user where username=?  
 
 2020-11-19 08:45:32,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 08:45:32,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 08:45:32,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 08:45:32,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 08:45:32,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 08:45:32,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:45:35,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:45:35,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:45:35,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:45:35,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:45:35,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.9465 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:45:35,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-19 08:45:35,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-19 08:45:35,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [7]  
 
 2020-11-19 08:45:35,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-19 08:45:35,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:45:35,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_tages LIMIT ?   
 
 2020-11-19 08:45:35,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:45:35,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:45:35,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.0273 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:45:35,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-19 08:45:35,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [id, tage]  
 
 2020-11-19 08:45:35,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [1, 学习日记]  
 
 2020-11-19 08:45:35,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-19 08:45:35,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-19 08:45:35,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-19 08:45:35,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [5, 开发日记]  
 
 2020-11-19 08:45:35,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-19 08:45:35,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:45:35,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:45:45,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:45:45,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:45:45,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:45:45,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.1954 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:45:45,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} open  
 
 2020-11-19 08:45:45,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Header: [count(0)]  
 
 2020-11-19 08:45:45,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [7]  
 
 2020-11-19 08:45:45,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} closed  
 
 2020-11-19 08:45:45,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:45:45,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:45:45,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5, 5]  
 
 2020-11-19 08:45:45,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-19 08:45:45,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.3787 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 08:45:45,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} open  
 
 2020-11-19 08:45:45,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Header: [id, tage]  
 
 2020-11-19 08:45:45,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Result: [8, 开发手册]  
 
 2020-11-19 08:45:45,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Result: [10, 搭建日记]  
 
 2020-11-19 08:45:45,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} closed  
 
 2020-11-19 08:45:45,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 08:45:45,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 08:45:55,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 08:45:55,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 08:45:55,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 08:45:55,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.5888 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 08:45:55,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-19 08:45:55,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-19 08:45:55,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [7]  
 
 2020-11-19 08:45:55,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-19 08:45:55,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 08:45:55,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 08:45:55,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 08:45:55,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.5731 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 08:45:55,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-19 08:45:55,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [id, tage]  
 
 2020-11-19 08:45:55,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [1, 学习日记]  
 
 2020-11-19 08:45:55,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-19 08:45:55,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-19 08:45:55,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-19 08:45:55,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [5, 开发日记]  
 
 2020-11-19 08:45:55,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-19 08:45:55,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 08:45:55,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:04:25,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-570} connected  
 
 2020-11-19 09:04:25,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-571} connected  
 
 2020-11-19 09:04:25,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-572} connected  
 
 2020-11-19 09:04:25,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-573} connected  
 
 2020-11-19 09:04:25,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-574} connected  
 
 2020-11-19 09:04:25,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:04:25,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 09:04:25,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:04:25,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:04:25,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.8262 millis. select * from t_types  
 
 2020-11-19 09:04:25,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 09:04:25,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 09:04:25,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 09:04:25,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 09:04:25,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 09:04:25,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 09:04:25,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 09:04:25,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 09:04:25,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 09:04:25,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:04:25,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:04:25,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:04:25,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 09:04:25,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:04:25,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:04:25,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.6465 millis. select * from t_tages  
 
 2020-11-19 09:04:25,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 09:04:25,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 09:04:25,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 09:04:25,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 09:04:25,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 09:04:25,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 09:04:25,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 09:04:25,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 09:04:25,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 09:04:25,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 09:04:25,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:04:25,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:04:25,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:04:25,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:04:25,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:04:25,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:04:25,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 09:04:25,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 09:04:25,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.6677 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:04:25,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 09:04:25,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 09:04:25,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 09:04:25,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 09:04:25,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:04:25,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:04:25,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 09:04:25,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:04:25,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.7037 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:04:25,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 09:04:25,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:04:25,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:04:25,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:04:25,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:04:25,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 09:04:25,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:04:25,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:04:26,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:04:26,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:04:26,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:04:26,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.1796 millis. select * from t_types  
 
 2020-11-19 09:04:26,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 09:04:26,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 09:04:26,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 09:04:26,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 09:04:26,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 09:04:26,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 09:04:26,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 09:04:26,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 09:04:26,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 09:04:26,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:04:26,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:04:26,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:04:26,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:04:26,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:04:26,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.1419 millis. select * from t_tages  
 
 2020-11-19 09:04:26,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 09:04:26,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 09:04:26,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 09:04:26,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 09:04:26,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 09:04:26,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 09:04:26,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 09:04:26,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 09:04:26,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 09:04:26,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 09:04:26,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:04:26,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:04:26,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:04:26,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 09:04:26,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 09:04:26,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 9.6691 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:04:26,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 09:04:26,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 09:04:26,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [3]  
 
 2020-11-19 09:04:26,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 09:04:26,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:04:26,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 09:04:26,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:04:26,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 9.854 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:04:26,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 09:04:26,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:04:26,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:04:26,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:04:26,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:04:26,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 09:04:26,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:04:26,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:12:27,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-575} connected  
 
 2020-11-19 09:12:27,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-576} connected  
 
 2020-11-19 09:12:27,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-577} connected  
 
 2020-11-19 09:12:27,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-578} connected  
 
 2020-11-19 09:12:27,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-579} connected  
 
 2020-11-19 09:12:27,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:12:28,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 09:12:28,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:12:28,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:12:28,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 52.1144 millis. select * from t_types  
 
 2020-11-19 09:12:28,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 09:12:28,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 09:12:28,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 09:12:28,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 09:12:28,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 09:12:28,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 09:12:28,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 09:12:28,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 09:12:28,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 09:12:28,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:12:28,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:12:28,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:12:28,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 09:12:28,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:12:28,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:12:28,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.9176 millis. select * from t_tages  
 
 2020-11-19 09:12:28,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 09:12:28,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 09:12:28,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 09:12:28,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 09:12:28,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 09:12:28,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 09:12:28,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 09:12:28,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 09:12:28,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 09:12:28,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 09:12:28,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:12:28,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:12:28,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:12:28,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:12:28,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:12:28,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:12:28,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 09:12:28,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 09:12:28,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.6881 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:12:28,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 09:12:28,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 09:12:28,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 09:12:28,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 09:12:28,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:12:28,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:12:28,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 09:12:28,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:12:28,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 17.5321 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:12:28,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 09:12:28,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:12:28,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:12:28,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:12:28,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:12:28,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 09:12:28,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:12:28,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:12:34,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:12:34,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:12:34,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:12:34,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.8675 millis. select * from t_types  
 
 2020-11-19 09:12:34,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 09:12:34,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 09:12:34,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 09:12:34,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 09:12:34,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 09:12:34,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 09:12:34,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 09:12:34,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 09:12:34,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 09:12:34,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:12:34,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:12:34,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:12:34,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 09:12:34,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 09:12:34,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.7721 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:12:34,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-19 09:12:34,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [count(0)]  
 
 2020-11-19 09:12:34,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [3]  
 
 2020-11-19 09:12:34,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-19 09:12:34,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:12:34,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 09:12:34,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:12:34,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.0874 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:12:34,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} open  
 
 2020-11-19 09:12:34,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:12:34,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:12:34,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:12:34,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:12:34,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} closed  
 
 2020-11-19 09:12:34,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:12:34,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:19:17,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-580} connected  
 
 2020-11-19 09:19:17,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-581} connected  
 
 2020-11-19 09:19:17,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-582} connected  
 
 2020-11-19 09:19:17,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-583} connected  
 
 2020-11-19 09:19:17,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-584} connected  
 
 2020-11-19 09:19:17,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:19:17,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 09:19:17,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:19:17,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:19:17,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 24.5719 millis. select * from t_types  
 
 2020-11-19 09:19:17,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 09:19:17,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 09:19:17,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 09:19:17,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 09:19:17,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 09:19:17,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 09:19:17,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 09:19:17,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 09:19:17,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 09:19:17,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:19:17,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:19:17,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:19:17,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 09:19:17,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:19:17,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:19:17,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8304 millis. select * from t_tages  
 
 2020-11-19 09:19:17,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 09:19:17,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 09:19:17,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 09:19:17,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 09:19:17,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 09:19:17,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 09:19:17,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 09:19:17,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 09:19:17,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 09:19:17,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 09:19:17,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:19:17,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:19:17,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:19:17,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:19:17,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:19:17,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:19:17,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 09:19:17,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 09:19:17,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.3688 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:19:17,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 09:19:17,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 09:19:17,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 09:19:17,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 09:19:17,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:19:17,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:19:17,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 09:19:17,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:19:17,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.2657 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:19:17,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 09:19:17,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:19:17,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:19:17,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:19:17,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:19:17,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 09:19:17,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:19:17,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:19:38,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:19:38,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:19:38,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:19:38,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.7897 millis. select * from t_types  
 
 2020-11-19 09:19:38,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 09:19:38,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 09:19:38,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 09:19:38,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 09:19:38,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 09:19:38,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 09:19:38,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 09:19:38,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 09:19:38,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 09:19:38,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:19:38,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:19:38,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:19:38,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 09:19:38,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 09:19:38,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8062 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:19:38,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-19 09:19:38,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [count(0)]  
 
 2020-11-19 09:19:38,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [3]  
 
 2020-11-19 09:19:38,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-19 09:19:38,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:19:38,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 09:19:38,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:19:38,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.2571 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:19:38,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} open  
 
 2020-11-19 09:19:38,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:19:38,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:19:38,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:19:38,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:19:38,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} closed  
 
 2020-11-19 09:19:38,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:19:38,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:21:16,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-585} connected  
 
 2020-11-19 09:21:16,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-586} connected  
 
 2020-11-19 09:21:16,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-587} connected  
 
 2020-11-19 09:21:16,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-588} connected  
 
 2020-11-19 09:21:16,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-589} connected  
 
 2020-11-19 09:21:16,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:21:17,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 09:21:17,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:21:17,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:21:17,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 19.8128 millis. select * from t_types  
 
 2020-11-19 09:21:17,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 09:21:17,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 09:21:17,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 09:21:17,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 09:21:17,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 09:21:17,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 09:21:17,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 09:21:17,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 09:21:17,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 09:21:17,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:21:17,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:21:17,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:21:17,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:21:17,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:21:17,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:21:17,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:21:17,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:21:17,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.3847 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:21:17,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 09:21:17,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 09:21:17,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 09:21:17,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 09:21:17,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:21:17,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:21:17,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:21:17,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:21:17,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 14.2622 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:21:17,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 09:21:17,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:21:17,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:21:17,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:21:17,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:21:17,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 09:21:17,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:21:17,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:22:35,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-590} connected  
 
 2020-11-19 09:22:35,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-591} connected  
 
 2020-11-19 09:22:35,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-592} connected  
 
 2020-11-19 09:22:35,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-593} connected  
 
 2020-11-19 09:22:35,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-594} connected  
 
 2020-11-19 09:22:35,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:22:35,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 09:22:35,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:22:35,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:22:35,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 25.1464 millis. select * from t_types  
 
 2020-11-19 09:22:35,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 09:22:35,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 09:22:35,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 09:22:35,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 09:22:35,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 09:22:35,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 09:22:35,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 09:22:35,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 09:22:36,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 09:22:36,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:22:36,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:22:36,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:22:36,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:22:36,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:22:36,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:22:36,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:22:36,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:22:36,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.0895 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:22:36,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 09:22:36,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 09:22:36,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 09:22:36,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 09:22:36,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:22:36,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:22:36,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:22:36,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:22:36,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.3308 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:22:36,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 09:22:36,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:22:36,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:22:36,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:22:36,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:22:36,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 09:22:36,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:22:36,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:22:48,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:22:48,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-19 09:22:48,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-19 09:22:48,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:22:48,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 7.3462 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-19 09:22:48,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 09:22:48,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-19 09:22:48,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true, 原创]  
 
 2020-11-19 09:22:48,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 09:22:48,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:22:48,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:22:54,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:22:54,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:22:54,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:22:54,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.5265 millis. select * from t_types  
 
 2020-11-19 09:22:54,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 09:22:54,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 09:22:54,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 09:22:54,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 09:22:54,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 09:22:54,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 09:22:54,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 09:22:54,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 09:22:54,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 09:22:54,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:22:54,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:22:54,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:22:54,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:22:54,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:22:54,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.5701 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:22:54,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 09:22:54,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [count(0)]  
 
 2020-11-19 09:22:54,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3]  
 
 2020-11-19 09:22:54,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 09:22:54,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:22:54,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:22:54,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:22:54,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.2814 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:22:54,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 09:22:54,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:22:54,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:22:54,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:22:54,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:22:54,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 09:22:54,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:22:54,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:22:56,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:22:56,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [9]  
 
 2020-11-19 09:22:56,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:22:56,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.1276 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-19 09:22:56,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 09:22:56,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-19 09:22:56,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true, 原创]  
 
 2020-11-19 09:22:56,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 09:22:56,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:22:56,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:23:30,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:23:30,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:23:30,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:23:30,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.003 millis. select * from t_types  
 
 2020-11-19 09:23:30,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} open  
 
 2020-11-19 09:23:30,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Header: [id, name]  
 
 2020-11-19 09:23:30,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [8, 方法论]  
 
 2020-11-19 09:23:30,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [9, 理论类]  
 
 2020-11-19 09:23:30,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [21, 错误日记]  
 
 2020-11-19 09:23:30,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [23, 开发日记]  
 
 2020-11-19 09:23:30,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [24, 实践论]  
 
 2020-11-19 09:23:30,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [25, 想法论]  
 
 2020-11-19 09:23:30,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} closed  
 
 2020-11-19 09:23:30,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:23:30,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:23:30,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:23:30,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:23:30,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:23:30,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.3798 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:23:30,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} open  
 
 2020-11-19 09:23:30,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Header: [count(0)]  
 
 2020-11-19 09:23:30,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [3]  
 
 2020-11-19 09:23:30,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} closed  
 
 2020-11-19 09:23:30,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:23:30,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:23:30,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:23:30,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.7285 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:23:30,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} open  
 
 2020-11-19 09:23:30,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:23:30,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:23:30,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:23:30,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:23:30,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} closed  
 
 2020-11-19 09:23:30,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:23:30,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:23:31,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:23:31,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [10]  
 
 2020-11-19 09:23:31,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:23:31,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6365 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-19 09:23:31,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} open  
 
 2020-11-19 09:23:31,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-19 09:23:31,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true, ]  
 
 2020-11-19 09:23:31,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50011} closed  
 
 2020-11-19 09:23:31,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:23:31,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:23:42,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:23:42,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:23:42,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:23:42,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.5247 millis. select * from t_types  
 
 2020-11-19 09:23:42,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} open  
 
 2020-11-19 09:23:42,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Header: [id, name]  
 
 2020-11-19 09:23:42,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [8, 方法论]  
 
 2020-11-19 09:23:42,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [9, 理论类]  
 
 2020-11-19 09:23:42,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [21, 错误日记]  
 
 2020-11-19 09:23:42,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [23, 开发日记]  
 
 2020-11-19 09:23:42,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [24, 实践论]  
 
 2020-11-19 09:23:42,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [25, 想法论]  
 
 2020-11-19 09:23:42,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} closed  
 
 2020-11-19 09:23:42,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:23:42,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:23:42,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:23:42,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:23:42,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:23:42,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.5254 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:23:42,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} open  
 
 2020-11-19 09:23:42,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Header: [count(0)]  
 
 2020-11-19 09:23:42,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [3]  
 
 2020-11-19 09:23:42,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} closed  
 
 2020-11-19 09:23:42,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:23:42,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:23:42,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:23:42,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.5947 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:23:42,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} open  
 
 2020-11-19 09:23:42,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:23:42,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:23:42,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:23:42,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:23:42,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} closed  
 
 2020-11-19 09:23:42,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:23:42,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:23:43,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:23:43,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [9]  
 
 2020-11-19 09:23:43,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:23:43,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.557 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-19 09:23:43,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} open  
 
 2020-11-19 09:23:43,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-19 09:23:43,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true, 原创]  
 
 2020-11-19 09:23:43,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} closed  
 
 2020-11-19 09:23:43,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:23:43,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:23:45,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:23:45,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:23:45,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:23:45,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.5875 millis. select * from t_types  
 
 2020-11-19 09:23:45,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} open  
 
 2020-11-19 09:23:45,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Header: [id, name]  
 
 2020-11-19 09:23:45,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [8, 方法论]  
 
 2020-11-19 09:23:45,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [9, 理论类]  
 
 2020-11-19 09:23:45,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [21, 错误日记]  
 
 2020-11-19 09:23:45,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [23, 开发日记]  
 
 2020-11-19 09:23:45,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [24, 实践论]  
 
 2020-11-19 09:23:45,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [25, 想法论]  
 
 2020-11-19 09:23:45,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} closed  
 
 2020-11-19 09:23:45,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:23:45,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:23:45,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:23:45,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:23:45,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:23:45,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0915 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:23:45,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} open  
 
 2020-11-19 09:23:45,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Header: [count(0)]  
 
 2020-11-19 09:23:45,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [3]  
 
 2020-11-19 09:23:45,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} closed  
 
 2020-11-19 09:23:45,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:23:45,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:23:45,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:23:45,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.8899 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:23:45,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} open  
 
 2020-11-19 09:23:45,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:23:45,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:23:45,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:23:45,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:23:45,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} closed  
 
 2020-11-19 09:23:45,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:23:45,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:24:11,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:24:11,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [10]  
 
 2020-11-19 09:24:11,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:24:11,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.9629 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
        and tb.id=?  
 
 2020-11-19 09:24:11,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} open  
 
 2020-11-19 09:24:11,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag]  
 
 2020-11-19 09:24:11,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true, 原创]  
 
 2020-11-19 09:24:11,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} closed  
 
 2020-11-19 09:24:11,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:24:11,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:31:15,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-598} connected  
 
 2020-11-19 09:31:15,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-599} connected  
 
 2020-11-19 09:31:15,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-600} connected  
 
 2020-11-19 09:31:15,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-601} connected  
 
 2020-11-19 09:31:15,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-602} connected  
 
 2020-11-19 09:31:15,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:31:16,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 09:31:16,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:31:16,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:31:16,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 43.5483 millis. select * from t_types  
 
 2020-11-19 09:31:16,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 09:31:16,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 09:31:16,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 09:31:16,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 09:31:16,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 09:31:16,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 09:31:16,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 09:31:16,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 09:31:16,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 09:31:16,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:31:16,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:31:16,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:31:16,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 09:31:16,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:31:16,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:31:16,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.9442 millis. select * from t_tages  
 
 2020-11-19 09:31:16,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 09:31:16,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 09:31:16,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 09:31:16,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 09:31:16,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 09:31:16,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 09:31:16,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 09:31:16,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 09:31:16,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 09:31:16,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 09:31:16,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:31:16,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:31:16,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:31:16,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:31:16,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:31:16,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:31:16,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 09:31:16,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 09:31:16,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.1895 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:31:16,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 09:31:16,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 09:31:16,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 09:31:16,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 09:31:16,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:31:16,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:31:16,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 09:31:16,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:31:16,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 15.6216 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:31:16,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 09:31:16,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:31:16,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:31:16,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:31:16,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:31:16,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 09:31:16,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:31:16,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:31:19,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:31:19,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 09:31:19,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [9]  
 
 2020-11-19 09:31:19,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-19 09:31:19,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 7.3315 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 09:31:19,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 09:31:19,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 09:31:19,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true, 原创, 理论类, 9]  
 
 2020-11-19 09:31:19,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 09:31:19,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 09:31:19,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:32:34,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-19 09:32:35,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 09:32:35,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-19 09:32:35,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-19 09:32:35,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-19 09:32:35,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-603} connected  
 
 2020-11-19 09:32:35,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:35,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. select * from t_types  
 
 2020-11-19 09:32:35,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 09:32:35,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 09:32:35,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.5152 millis. select * from t_types  
 
 2020-11-19 09:32:35,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} open  
 
 2020-11-19 09:32:35,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Header: [id, name]  
 
 2020-11-19 09:32:35,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [8, 方法论]  
 
 2020-11-19 09:32:35,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [9, 理论类]  
 
 2020-11-19 09:32:35,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [21, 错误日记]  
 
 2020-11-19 09:32:35,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [23, 开发日记]  
 
 2020-11-19 09:32:35,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [24, 实践论]  
 
 2020-11-19 09:32:35,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [25, 想法论]  
 
 2020-11-19 09:32:35,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} closed  
 
 2020-11-19 09:32:35,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 09:32:35,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:35,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:35,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. select * from t_tages  
 
 2020-11-19 09:32:35,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 09:32:35,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 09:32:35,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.5386 millis. select * from t_tages  
 
 2020-11-19 09:32:35,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} open  
 
 2020-11-19 09:32:35,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Header: [id, tage]  
 
 2020-11-19 09:32:35,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [1, 学习日记]  
 
 2020-11-19 09:32:35,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [2, 错误笔记]  
 
 2020-11-19 09:32:35,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [3, 数据库笔记]  
 
 2020-11-19 09:32:35,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [4, 程序运行日记]  
 
 2020-11-19 09:32:35,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [5, 开发日记]  
 
 2020-11-19 09:32:35,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [8, 开发手册]  
 
 2020-11-19 09:32:35,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [10, 搭建日记]  
 
 2020-11-19 09:32:35,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} closed  
 
 2020-11-19 09:32:35,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 09:32:35,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:35,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:35,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:32:35,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : []  
 
 2020-11-19 09:32:35,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : []  
 
 2020-11-19 09:32:35,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.8701 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:32:35,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} open  
 
 2020-11-19 09:32:35,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} Header: [count(0)]  
 
 2020-11-19 09:32:35,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} Result: [3]  
 
 2020-11-19 09:32:35,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} closed  
 
 2020-11-19 09:32:35,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 09:32:35,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:32:35,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [4]  
 
 2020-11-19 09:32:35,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 09:32:35,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 3.5635 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:32:35,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} open  
 
 2020-11-19 09:32:35,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:32:35,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:32:35,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:32:35,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:32:35,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} closed  
 
 2020-11-19 09:32:35,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 09:32:35,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:35,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:35,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 09:32:35,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 09:32:35,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 1.8306 millis. select * from t_types  
 
 2020-11-19 09:32:35,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} open  
 
 2020-11-19 09:32:35,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Header: [id, name]  
 
 2020-11-19 09:32:35,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Result: [8, 方法论]  
 
 2020-11-19 09:32:35,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Result: [9, 理论类]  
 
 2020-11-19 09:32:35,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Result: [21, 错误日记]  
 
 2020-11-19 09:32:35,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Result: [23, 开发日记]  
 
 2020-11-19 09:32:35,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Result: [24, 实践论]  
 
 2020-11-19 09:32:35,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Result: [25, 想法论]  
 
 2020-11-19 09:32:35,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} closed  
 
 2020-11-19 09:32:35,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 09:32:35,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:35,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:35,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 09:32:35,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 09:32:35,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.1022 millis. select * from t_tages  
 
 2020-11-19 09:32:35,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} open  
 
 2020-11-19 09:32:35,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Header: [id, tage]  
 
 2020-11-19 09:32:35,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [1, 学习日记]  
 
 2020-11-19 09:32:35,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-19 09:32:35,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-19 09:32:35,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-19 09:32:35,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [5, 开发日记]  
 
 2020-11-19 09:32:35,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [8, 开发手册]  
 
 2020-11-19 09:32:35,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [10, 搭建日记]  
 
 2020-11-19 09:32:35,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} closed  
 
 2020-11-19 09:32:35,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 09:32:35,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:35,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:35,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : []  
 
 2020-11-19 09:32:35,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : []  
 
 2020-11-19 09:32:35,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.4665 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:32:35,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} open  
 
 2020-11-19 09:32:35,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} Header: [count(0)]  
 
 2020-11-19 09:32:35,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} Result: [3]  
 
 2020-11-19 09:32:35,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} closed  
 
 2020-11-19 09:32:35,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 09:32:35,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [4]  
 
 2020-11-19 09:32:35,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 09:32:35,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 3.9883 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:32:35,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} open  
 
 2020-11-19 09:32:35,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:32:35,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:32:35,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:32:35,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:32:35,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} closed  
 
 2020-11-19 09:32:35,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 09:32:35,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:37,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:37,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 09:32:37,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 09:32:37,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.0304 millis. select * from t_tages  
 
 2020-11-19 09:32:37,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} open  
 
 2020-11-19 09:32:37,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} Header: [id, tage]  
 
 2020-11-19 09:32:37,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} Result: [1, 学习日记]  
 
 2020-11-19 09:32:37,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} Result: [2, 错误笔记]  
 
 2020-11-19 09:32:37,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} Result: [3, 数据库笔记]  
 
 2020-11-19 09:32:37,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} Result: [4, 程序运行日记]  
 
 2020-11-19 09:32:37,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} Result: [5, 开发日记]  
 
 2020-11-19 09:32:37,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} Result: [8, 开发手册]  
 
 2020-11-19 09:32:37,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} Result: [10, 搭建日记]  
 
 2020-11-19 09:32:37,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50013} closed  
 
 2020-11-19 09:32:37,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 09:32:37,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:40,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:40,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 09:32:40,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 09:32:40,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.1197 millis. select * from t_types  
 
 2020-11-19 09:32:40,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} open  
 
 2020-11-19 09:32:40,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} Header: [id, name]  
 
 2020-11-19 09:32:40,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} Result: [8, 方法论]  
 
 2020-11-19 09:32:40,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} Result: [9, 理论类]  
 
 2020-11-19 09:32:40,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} Result: [21, 错误日记]  
 
 2020-11-19 09:32:40,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} Result: [23, 开发日记]  
 
 2020-11-19 09:32:40,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} Result: [24, 实践论]  
 
 2020-11-19 09:32:40,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} Result: [25, 想法论]  
 
 2020-11-19 09:32:40,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50014} closed  
 
 2020-11-19 09:32:40,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 09:32:41,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:41,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:41,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : []  
 
 2020-11-19 09:32:41,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : []  
 
 2020-11-19 09:32:41,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.2201 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:32:41,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50015} open  
 
 2020-11-19 09:32:41,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50015} Header: [count(0)]  
 
 2020-11-19 09:32:41,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50015} Result: [3]  
 
 2020-11-19 09:32:41,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50015} closed  
 
 2020-11-19 09:32:41,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 09:32:41,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [4]  
 
 2020-11-19 09:32:41,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 09:32:41,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 4.3049 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:32:41,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50016} open  
 
 2020-11-19 09:32:41,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50016} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:32:41,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:32:41,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:32:41,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:32:41,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50016} closed  
 
 2020-11-19 09:32:41,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 09:32:41,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:42,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:42,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 09:32:42,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 09:32:42,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.5919 millis. select * from t_tages  
 
 2020-11-19 09:32:42,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} open  
 
 2020-11-19 09:32:42,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Header: [id, tage]  
 
 2020-11-19 09:32:42,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Result: [1, 学习日记]  
 
 2020-11-19 09:32:42,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Result: [2, 错误笔记]  
 
 2020-11-19 09:32:42,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Result: [3, 数据库笔记]  
 
 2020-11-19 09:32:42,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Result: [4, 程序运行日记]  
 
 2020-11-19 09:32:42,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Result: [5, 开发日记]  
 
 2020-11-19 09:32:42,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Result: [8, 开发手册]  
 
 2020-11-19 09:32:42,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} Result: [10, 搭建日记]  
 
 2020-11-19 09:32:42,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50017} closed  
 
 2020-11-19 09:32:42,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 09:32:42,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:49,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:49,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 09:32:49,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 09:32:49,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.1849 millis. select * from t_types  
 
 2020-11-19 09:32:49,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} open  
 
 2020-11-19 09:32:49,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} Header: [id, name]  
 
 2020-11-19 09:32:49,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} Result: [8, 方法论]  
 
 2020-11-19 09:32:49,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} Result: [9, 理论类]  
 
 2020-11-19 09:32:49,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} Result: [21, 错误日记]  
 
 2020-11-19 09:32:49,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} Result: [23, 开发日记]  
 
 2020-11-19 09:32:49,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} Result: [24, 实践论]  
 
 2020-11-19 09:32:49,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} Result: [25, 想法论]  
 
 2020-11-19 09:32:49,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50018} closed  
 
 2020-11-19 09:32:49,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 09:32:49,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:49,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:49,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 09:32:49,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 09:32:49,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.521 millis. select * from t_tages  
 
 2020-11-19 09:32:49,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} open  
 
 2020-11-19 09:32:49,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Header: [id, tage]  
 
 2020-11-19 09:32:49,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [1, 学习日记]  
 
 2020-11-19 09:32:49,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [2, 错误笔记]  
 
 2020-11-19 09:32:49,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [3, 数据库笔记]  
 
 2020-11-19 09:32:49,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [4, 程序运行日记]  
 
 2020-11-19 09:32:49,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [5, 开发日记]  
 
 2020-11-19 09:32:49,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [8, 开发手册]  
 
 2020-11-19 09:32:49,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [10, 搭建日记]  
 
 2020-11-19 09:32:49,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} closed  
 
 2020-11-19 09:32:49,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 09:32:49,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:49,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:49,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : []  
 
 2020-11-19 09:32:49,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : []  
 
 2020-11-19 09:32:49,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.5901 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:32:49,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50020} open  
 
 2020-11-19 09:32:49,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50020} Header: [count(0)]  
 
 2020-11-19 09:32:49,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50020} Result: [3]  
 
 2020-11-19 09:32:49,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50020} closed  
 
 2020-11-19 09:32:49,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 09:32:49,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [4]  
 
 2020-11-19 09:32:49,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 09:32:49,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 3.5689 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:32:49,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50021} open  
 
 2020-11-19 09:32:49,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50021} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:32:49,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50021} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:32:49,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50021} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:32:49,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50021} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:32:49,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50021} closed  
 
 2020-11-19 09:32:49,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 09:32:49,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:51,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:51,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 09:32:51,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 09:32:51,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.5001 millis. select * from t_types  
 
 2020-11-19 09:32:51,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} open  
 
 2020-11-19 09:32:51,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} Header: [id, name]  
 
 2020-11-19 09:32:51,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} Result: [8, 方法论]  
 
 2020-11-19 09:32:51,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} Result: [9, 理论类]  
 
 2020-11-19 09:32:51,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} Result: [21, 错误日记]  
 
 2020-11-19 09:32:51,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} Result: [23, 开发日记]  
 
 2020-11-19 09:32:51,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} Result: [24, 实践论]  
 
 2020-11-19 09:32:51,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} Result: [25, 想法论]  
 
 2020-11-19 09:32:51,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50022} closed  
 
 2020-11-19 09:32:51,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 09:32:51,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:51,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:51,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : []  
 
 2020-11-19 09:32:51,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : []  
 
 2020-11-19 09:32:51,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 1.9898 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:32:51,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50023} open  
 
 2020-11-19 09:32:51,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50023} Header: [count(0)]  
 
 2020-11-19 09:32:51,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50023} Result: [3]  
 
 2020-11-19 09:32:51,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50023} closed  
 
 2020-11-19 09:32:51,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 09:32:51,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [4]  
 
 2020-11-19 09:32:51,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 09:32:51,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 4.0235 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:32:51,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} open  
 
 2020-11-19 09:32:51,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:32:51,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:32:51,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:32:51,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:32:51,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50024} closed  
 
 2020-11-19 09:32:51,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 09:32:51,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:32:54,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 09:32:54,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 09:32:54,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 09:32:54,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.1782 millis. select * from t_tages  
 
 2020-11-19 09:32:54,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} open  
 
 2020-11-19 09:32:54,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Header: [id, tage]  
 
 2020-11-19 09:32:54,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Result: [1, 学习日记]  
 
 2020-11-19 09:32:54,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Result: [2, 错误笔记]  
 
 2020-11-19 09:32:54,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Result: [3, 数据库笔记]  
 
 2020-11-19 09:32:54,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Result: [4, 程序运行日记]  
 
 2020-11-19 09:32:54,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Result: [5, 开发日记]  
 
 2020-11-19 09:32:54,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Result: [8, 开发手册]  
 
 2020-11-19 09:32:54,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} Result: [10, 搭建日记]  
 
 2020-11-19 09:32:54,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50025} closed  
 
 2020-11-19 09:32:54,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 09:32:54,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 09:36:07,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-604} connected  
 
 2020-11-19 09:36:07,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-605} connected  
 
 2020-11-19 09:36:07,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-606} connected  
 
 2020-11-19 09:36:07,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-607} connected  
 
 2020-11-19 09:36:07,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-608} connected  
 
 2020-11-19 09:36:07,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:08,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_tages  
 
 2020-11-19 09:36:08,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:36:08,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:36:08,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.3021 millis. select * from t_tages  
 
 2020-11-19 09:36:08,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 09:36:08,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, tage]  
 
 2020-11-19 09:36:08,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, 学习日记]  
 
 2020-11-19 09:36:08,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [2, 错误笔记]  
 
 2020-11-19 09:36:08,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [3, 数据库笔记]  
 
 2020-11-19 09:36:08,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [4, 程序运行日记]  
 
 2020-11-19 09:36:08,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [5, 开发日记]  
 
 2020-11-19 09:36:08,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 开发手册]  
 
 2020-11-19 09:36:08,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [10, 搭建日记]  
 
 2020-11-19 09:36:08,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 09:36:08,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:36:08,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:36:08,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:08,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:36:08,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:08,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:36:08,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:36:08,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:36:08,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8311 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:36:08,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 09:36:08,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 09:36:08,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 09:36:08,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 09:36:08,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:36:08,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:36:08,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:36:08,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:36:08,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.8558 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:36:08,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 09:36:08,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:36:08,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:36:08,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:36:08,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:36:08,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 09:36:08,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:36:08,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:36:17,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:17,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 09:36:17,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [9]  
 
 2020-11-19 09:36:17,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 09:36:17,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.1698 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 09:36:17,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 09:36:17,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 09:36:17,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true, 原创, 理论类, 9]  
 
 2020-11-19 09:36:17,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 09:36:17,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 09:36:17,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:36:21,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:21,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:36:21,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:36:21,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.5518 millis. select * from t_tages  
 
 2020-11-19 09:36:21,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 09:36:21,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, tage]  
 
 2020-11-19 09:36:21,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [1, 学习日记]  
 
 2020-11-19 09:36:21,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [2, 错误笔记]  
 
 2020-11-19 09:36:21,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [3, 数据库笔记]  
 
 2020-11-19 09:36:21,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [4, 程序运行日记]  
 
 2020-11-19 09:36:21,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [5, 开发日记]  
 
 2020-11-19 09:36:21,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 开发手册]  
 
 2020-11-19 09:36:21,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-19 09:36:21,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 09:36:21,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:36:21,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:36:21,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:21,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:36:21,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:36:21,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9731 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:36:21,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 09:36:21,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [count(0)]  
 
 2020-11-19 09:36:21,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3]  
 
 2020-11-19 09:36:21,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 09:36:21,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:36:21,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:36:21,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:36:21,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.5251 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:36:21,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 09:36:21,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:36:21,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:36:21,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:36:21,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:36:21,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 09:36:21,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:36:21,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:36:24,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:24,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_types  
 
 2020-11-19 09:36:24,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 09:36:24,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 09:36:24,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.744 millis. select * from t_types  
 
 2020-11-19 09:36:24,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} open  
 
 2020-11-19 09:36:24,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Header: [id, name]  
 
 2020-11-19 09:36:24,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [8, 方法论]  
 
 2020-11-19 09:36:24,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [9, 理论类]  
 
 2020-11-19 09:36:24,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [21, 错误日记]  
 
 2020-11-19 09:36:24,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [23, 开发日记]  
 
 2020-11-19 09:36:24,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [24, 实践论]  
 
 2020-11-19 09:36:24,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [25, 想法论]  
 
 2020-11-19 09:36:24,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} closed  
 
 2020-11-19 09:36:24,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 09:36:24,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:36:24,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:24,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 09:36:24,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 09:36:24,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.3861 millis. select * from t_tages  
 
 2020-11-19 09:36:24,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} open  
 
 2020-11-19 09:36:24,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Header: [id, tage]  
 
 2020-11-19 09:36:24,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [1, 学习日记]  
 
 2020-11-19 09:36:24,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [2, 错误笔记]  
 
 2020-11-19 09:36:24,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [3, 数据库笔记]  
 
 2020-11-19 09:36:24,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [4, 程序运行日记]  
 
 2020-11-19 09:36:24,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [5, 开发日记]  
 
 2020-11-19 09:36:24,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [8, 开发手册]  
 
 2020-11-19 09:36:24,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [10, 搭建日记]  
 
 2020-11-19 09:36:24,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} closed  
 
 2020-11-19 09:36:24,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 09:36:24,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 09:36:24,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 09:36:24,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 09:36:24,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 09:36:24,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.231 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 09:36:24,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} open  
 
 2020-11-19 09:36:24,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Header: [count(0)]  
 
 2020-11-19 09:36:24,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [3]  
 
 2020-11-19 09:36:24,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} closed  
 
 2020-11-19 09:36:24,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 09:36:24,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 09:36:24,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 09:36:24,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 5.6437 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 09:36:24,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} open  
 
 2020-11-19 09:36:24,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 09:36:24,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 09:36:24,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 09:36:24,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 09:36:24,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} closed  
 
 2020-11-19 09:36:24,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 09:36:24,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:24:52,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-609} connected  
 
 2020-11-19 10:24:53,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-610} connected  
 
 2020-11-19 10:24:53,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-611} connected  
 
 2020-11-19 10:24:53,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-612} connected  
 
 2020-11-19 10:24:53,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-613} connected  
 
 2020-11-19 10:24:53,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:24:53,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 10:24:53,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:24:53,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:24:53,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.0205 millis. select * from t_types  
 
 2020-11-19 10:24:53,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 10:24:53,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 10:24:53,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 10:24:53,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 10:24:53,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 10:24:53,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 10:24:53,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 10:24:53,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 10:24:53,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 10:24:53,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:24:53,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:24:53,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:24:53,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:24:53,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:24:53,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:24:53,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:24:53,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:24:53,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4612 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:24:53,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 10:24:53,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 10:24:53,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 10:24:53,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 10:24:53,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:24:53,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:24:53,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 10:24:53,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 10:24:53,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.9534 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:24:53,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 10:24:53,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:24:53,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:24:53,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:24:53,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:24:53,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 10:24:53,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:24:53,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:24:56,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:24:56,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:24:56,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:24:56,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.2984 millis. select * from t_types  
 
 2020-11-19 10:24:56,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-19 10:24:56,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [id, name]  
 
 2020-11-19 10:24:56,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [8, 方法论]  
 
 2020-11-19 10:24:56,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [9, 理论类]  
 
 2020-11-19 10:24:56,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [21, 错误日记]  
 
 2020-11-19 10:24:56,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [23, 开发日记]  
 
 2020-11-19 10:24:56,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [24, 实践论]  
 
 2020-11-19 10:24:56,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [25, 想法论]  
 
 2020-11-19 10:24:56,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-19 10:24:56,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:24:56,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:24:56,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:24:56,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_tages  
 
 2020-11-19 10:24:56,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-19 10:24:56,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-19 10:24:56,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.692 millis. select * from t_tages  
 
 2020-11-19 10:24:56,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} open  
 
 2020-11-19 10:24:56,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Header: [id, tage]  
 
 2020-11-19 10:24:56,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [1, 学习日记]  
 
 2020-11-19 10:24:56,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [2, 错误笔记]  
 
 2020-11-19 10:24:56,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [3, 数据库笔记]  
 
 2020-11-19 10:24:56,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [4, 程序运行日记]  
 
 2020-11-19 10:24:56,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [5, 开发日记]  
 
 2020-11-19 10:24:56,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [8, 开发手册]  
 
 2020-11-19 10:24:56,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-19 10:24:56,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50004} closed  
 
 2020-11-19 10:24:56,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:24:56,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:24:56,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:24:56,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:24:56,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:24:56,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.578 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:24:56,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 10:24:56,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [count(0)]  
 
 2020-11-19 10:24:56,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3]  
 
 2020-11-19 10:24:56,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 10:24:56,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:24:56,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 10:24:56,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 10:24:56,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 5.1214 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:24:56,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 10:24:56,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:24:56,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:24:56,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:24:56,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:24:56,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 10:24:56,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:24:56,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:37:49,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-614} connected  
 
 2020-11-19 10:37:49,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-615} connected  
 
 2020-11-19 10:37:49,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-616} connected  
 
 2020-11-19 10:37:49,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-617} connected  
 
 2020-11-19 10:37:49,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-618} connected  
 
 2020-11-19 10:37:49,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:37:49,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 10:37:49,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:37:49,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:37:50,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 41.4845 millis. select * from t_types  
 
 2020-11-19 10:37:50,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 10:37:50,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 10:37:50,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 10:37:50,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 10:37:50,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 10:37:50,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 10:37:50,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 10:37:50,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 10:37:50,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 10:37:50,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:37:50,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:37:50,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:37:50,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 10:37:50,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:37:50,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:37:50,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.2553 millis. select * from t_tages  
 
 2020-11-19 10:37:50,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 10:37:50,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 10:37:50,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 10:37:50,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 10:37:50,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 10:37:50,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 10:37:50,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 10:37:50,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 10:37:50,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 10:37:50,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 10:37:50,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:37:50,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:37:50,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:37:50,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:37:50,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:37:50,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:37:50,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 10:37:50,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 10:37:50,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.4127 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:37:50,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 10:37:50,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 10:37:50,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 10:37:50,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 10:37:50,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:37:50,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:37:50,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 10:37:50,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 10:37:50,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 7.8286 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:37:50,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 10:37:50,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:37:50,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:37:50,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:37:50,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:37:50,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 10:37:50,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:37:50,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:37:51,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:37:51,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:37:51,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:37:51,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 6.5638 millis. select * from t_types  
 
 2020-11-19 10:37:51,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 10:37:51,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 10:37:51,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 10:37:51,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 10:37:51,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 10:37:51,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 10:37:51,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 10:37:51,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 10:37:51,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 10:37:51,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:37:51,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:37:51,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:37:51,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:37:51,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:37:51,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.8547 millis. select * from t_tages  
 
 2020-11-19 10:37:51,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 10:37:51,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 10:37:51,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 10:37:51,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 10:37:51,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 10:37:51,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 10:37:51,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 10:37:51,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 10:37:51,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 10:37:51,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 10:37:51,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:37:51,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:37:51,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:37:51,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 10:37:51,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 10:37:51,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.5961 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:37:51,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 10:37:51,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 10:37:51,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [3]  
 
 2020-11-19 10:37:51,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 10:37:51,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:37:51,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 10:37:51,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 10:37:51,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.201 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:37:51,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 10:37:51,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:37:51,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:37:51,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:37:51,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:37:51,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 10:37:51,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:37:51,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:05,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:05,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 10:38:05,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [admin]  
 
 2020-11-19 10:38:05,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 10:38:05,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.3115 millis. select * from t_user where username=?  
 
 2020-11-19 10:38:05,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-19 10:38:05,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 10:38:05,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [4, admin, $2a$10$77KRGBQYXA3LOR.2plwkGex4Ns9uhk0EFw7LwGvKCqFKvRCeYFXne, 24354666@qq.com, 2, https://picsum.photos/seed/picsum/200/300, 2020-11-14 05:06:04.0, 2020-11-14 05:06:04.0]  
 
 2020-11-19 10:38:05,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-19 10:38:05,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 10:38:05,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:06,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:06,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:38:06,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:38:06,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 4.6447 millis. select * from t_types  
 
 2020-11-19 10:38:06,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} open  
 
 2020-11-19 10:38:06,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Header: [id, name]  
 
 2020-11-19 10:38:06,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [8, 方法论]  
 
 2020-11-19 10:38:06,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [9, 理论类]  
 
 2020-11-19 10:38:06,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [21, 错误日记]  
 
 2020-11-19 10:38:06,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [23, 开发日记]  
 
 2020-11-19 10:38:06,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [24, 实践论]  
 
 2020-11-19 10:38:06,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [25, 想法论]  
 
 2020-11-19 10:38:06,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} closed  
 
 2020-11-19 10:38:06,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:38:06,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:06,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:06,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:38:06,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:38:06,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.927 millis. select * from t_tages  
 
 2020-11-19 10:38:06,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} open  
 
 2020-11-19 10:38:06,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Header: [id, tage]  
 
 2020-11-19 10:38:06,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [1, 学习日记]  
 
 2020-11-19 10:38:06,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-19 10:38:06,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-19 10:38:06,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-19 10:38:06,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [5, 开发日记]  
 
 2020-11-19 10:38:06,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [8, 开发手册]  
 
 2020-11-19 10:38:06,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [10, 搭建日记]  
 
 2020-11-19 10:38:06,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} closed  
 
 2020-11-19 10:38:06,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:38:06,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:06,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:06,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 10:38:06,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 10:38:06,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.2108 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:38:06,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} open  
 
 2020-11-19 10:38:06,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Header: [count(0)]  
 
 2020-11-19 10:38:06,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [3]  
 
 2020-11-19 10:38:06,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} closed  
 
 2020-11-19 10:38:06,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:38:06,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 10:38:06,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 10:38:06,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 11.4568 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:38:06,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} open  
 
 2020-11-19 10:38:06,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:38:06,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:38:06,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:38:06,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:38:06,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} closed  
 
 2020-11-19 10:38:06,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:38:06,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:37,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:37,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:38:37,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:38:37,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.1805 millis. select * from t_types  
 
 2020-11-19 10:38:37,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} open  
 
 2020-11-19 10:38:37,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Header: [id, name]  
 
 2020-11-19 10:38:37,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [8, 方法论]  
 
 2020-11-19 10:38:37,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [9, 理论类]  
 
 2020-11-19 10:38:37,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [21, 错误日记]  
 
 2020-11-19 10:38:37,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [23, 开发日记]  
 
 2020-11-19 10:38:37,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [24, 实践论]  
 
 2020-11-19 10:38:37,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [25, 想法论]  
 
 2020-11-19 10:38:37,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} closed  
 
 2020-11-19 10:38:37,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:38:37,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:37,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:37,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 10:38:37,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 10:38:37,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.2648 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:38:37,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} open  
 
 2020-11-19 10:38:37,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Header: [count(0)]  
 
 2020-11-19 10:38:37,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [3]  
 
 2020-11-19 10:38:37,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} closed  
 
 2020-11-19 10:38:37,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:38:37,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 10:38:37,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 10:38:37,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.731 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:38:37,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} open  
 
 2020-11-19 10:38:37,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:38:37,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:38:37,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:38:37,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:38:37,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} closed  
 
 2020-11-19 10:38:37,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:38:37,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:55,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:55,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:38:55,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:38:55,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.7781 millis. select * from t_types  
 
 2020-11-19 10:38:55,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} open  
 
 2020-11-19 10:38:55,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Header: [id, name]  
 
 2020-11-19 10:38:55,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [8, 方法论]  
 
 2020-11-19 10:38:55,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [9, 理论类]  
 
 2020-11-19 10:38:55,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [21, 错误日记]  
 
 2020-11-19 10:38:55,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [23, 开发日记]  
 
 2020-11-19 10:38:55,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [24, 实践论]  
 
 2020-11-19 10:38:55,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [25, 想法论]  
 
 2020-11-19 10:38:55,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} closed  
 
 2020-11-19 10:38:55,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:38:55,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:55,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:55,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:38:55,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:38:55,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0302 millis. select * from t_tages  
 
 2020-11-19 10:38:55,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} open  
 
 2020-11-19 10:38:55,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Header: [id, tage]  
 
 2020-11-19 10:38:55,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [1, 学习日记]  
 
 2020-11-19 10:38:55,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [2, 错误笔记]  
 
 2020-11-19 10:38:55,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [3, 数据库笔记]  
 
 2020-11-19 10:38:55,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [4, 程序运行日记]  
 
 2020-11-19 10:38:55,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [5, 开发日记]  
 
 2020-11-19 10:38:55,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [8, 开发手册]  
 
 2020-11-19 10:38:55,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [10, 搭建日记]  
 
 2020-11-19 10:38:55,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} closed  
 
 2020-11-19 10:38:55,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:38:55,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:55,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:55,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 10:38:55,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 10:38:55,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8755 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:38:55,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} open  
 
 2020-11-19 10:38:55,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Header: [count(0)]  
 
 2020-11-19 10:38:55,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [3]  
 
 2020-11-19 10:38:55,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} closed  
 
 2020-11-19 10:38:55,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:38:55,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 10:38:55,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 10:38:55,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.6999 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:38:55,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} open  
 
 2020-11-19 10:38:55,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:38:55,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:38:55,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:38:55,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:38:55,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} closed  
 
 2020-11-19 10:38:55,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:38:55,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:56,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:56,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:38:56,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:38:56,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.3869 millis. select * from t_types  
 
 2020-11-19 10:38:56,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} open  
 
 2020-11-19 10:38:56,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Header: [id, name]  
 
 2020-11-19 10:38:56,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [8, 方法论]  
 
 2020-11-19 10:38:56,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [9, 理论类]  
 
 2020-11-19 10:38:56,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [21, 错误日记]  
 
 2020-11-19 10:38:56,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [23, 开发日记]  
 
 2020-11-19 10:38:56,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [24, 实践论]  
 
 2020-11-19 10:38:56,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [25, 想法论]  
 
 2020-11-19 10:38:56,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} closed  
 
 2020-11-19 10:38:56,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:38:56,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:38:56,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:38:56,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 10:38:56,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 10:38:56,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.1921 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:38:56,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50021} open  
 
 2020-11-19 10:38:56,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50021} Header: [count(0)]  
 
 2020-11-19 10:38:56,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50021} Result: [3]  
 
 2020-11-19 10:38:56,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50021} closed  
 
 2020-11-19 10:38:56,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:38:56,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 10:38:56,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 10:38:56,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.3882 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:38:56,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50022} open  
 
 2020-11-19 10:38:56,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50022} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:38:56,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50022} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:38:56,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50022} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:38:56,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50022} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:38:56,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50022} closed  
 
 2020-11-19 10:38:56,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:38:56,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:39:03,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:39:03,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:39:03,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:39:03,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.6754 millis. select * from t_tages  
 
 2020-11-19 10:39:03,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} open  
 
 2020-11-19 10:39:03,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Header: [id, tage]  
 
 2020-11-19 10:39:03,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [1, 学习日记]  
 
 2020-11-19 10:39:03,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [2, 错误笔记]  
 
 2020-11-19 10:39:03,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [3, 数据库笔记]  
 
 2020-11-19 10:39:03,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [4, 程序运行日记]  
 
 2020-11-19 10:39:03,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [5, 开发日记]  
 
 2020-11-19 10:39:03,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [8, 开发手册]  
 
 2020-11-19 10:39:03,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} Result: [10, 搭建日记]  
 
 2020-11-19 10:39:03,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50023} closed  
 
 2020-11-19 10:39:03,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:39:03,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:39:03,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:39:03,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 10:39:03,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 10:39:03,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.6613 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:39:03,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50024} open  
 
 2020-11-19 10:39:03,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50024} Header: [count(0)]  
 
 2020-11-19 10:39:03,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50024} Result: [3]  
 
 2020-11-19 10:39:03,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50024} closed  
 
 2020-11-19 10:39:03,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:39:03,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 10:39:03,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 10:39:03,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.6277 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:39:03,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} open  
 
 2020-11-19 10:39:03,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:39:03,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:39:03,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:39:03,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:39:03,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50025} closed  
 
 2020-11-19 10:39:03,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:39:03,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:12,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-619} connected  
 
 2020-11-19 10:41:12,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-620} connected  
 
 2020-11-19 10:41:12,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-621} connected  
 
 2020-11-19 10:41:13,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-622} connected  
 
 2020-11-19 10:41:13,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-623} connected  
 
 2020-11-19 10:41:13,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:13,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_tages  
 
 2020-11-19 10:41:13,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:41:13,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:41:13,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 12.2567 millis. select * from t_tages  
 
 2020-11-19 10:41:13,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 10:41:13,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, tage]  
 
 2020-11-19 10:41:13,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, 学习日记]  
 
 2020-11-19 10:41:13,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [2, 错误笔记]  
 
 2020-11-19 10:41:13,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [3, 数据库笔记]  
 
 2020-11-19 10:41:13,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [4, 程序运行日记]  
 
 2020-11-19 10:41:13,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [5, 开发日记]  
 
 2020-11-19 10:41:13,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 开发手册]  
 
 2020-11-19 10:41:13,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [10, 搭建日记]  
 
 2020-11-19 10:41:13,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 10:41:13,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:41:13,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:13,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:13,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:13,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:13,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:41:13,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:41:13,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:41:13,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3918 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:41:13,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 10:41:13,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 10:41:13,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 10:41:13,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 10:41:13,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:41:13,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:41:13,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 10:41:13,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 10:41:13,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.1246 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:41:13,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 10:41:13,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:41:13,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:41:13,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:41:13,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:41:13,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 10:41:13,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:41:13,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:20,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:20,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_user where username=?  
 
 2020-11-19 10:41:20,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [admin]  
 
 2020-11-19 10:41:20,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [VARCHAR]  
 
 2020-11-19 10:41:20,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.8313 millis. select * from t_user where username=?  
 
 2020-11-19 10:41:20,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 10:41:20,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 10:41:20,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [4, admin, $2a$10$77KRGBQYXA3LOR.2plwkGex4Ns9uhk0EFw7LwGvKCqFKvRCeYFXne, 24354666@qq.com, 2, https://picsum.photos/seed/picsum/200/300, 2020-11-14 05:06:04.0, 2020-11-14 05:06:04.0]  
 
 2020-11-19 10:41:20,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 10:41:20,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 10:41:20,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:20,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:20,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_types  
 
 2020-11-19 10:41:20,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 10:41:20,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 10:41:20,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2572 millis. select * from t_types  
 
 2020-11-19 10:41:20,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 10:41:20,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, name]  
 
 2020-11-19 10:41:20,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 10:41:20,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 10:41:20,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 10:41:20,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 10:41:20,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 10:41:20,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 10:41:20,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 10:41:20,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 10:41:20,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:20,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:20,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:41:20,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:41:20,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.5058 millis. select * from t_tages  
 
 2020-11-19 10:41:20,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} open  
 
 2020-11-19 10:41:20,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Header: [id, tage]  
 
 2020-11-19 10:41:20,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 10:41:20,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 10:41:20,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 10:41:20,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 10:41:20,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 10:41:20,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 10:41:20,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 10:41:20,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50005} closed  
 
 2020-11-19 10:41:20,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:41:20,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:20,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:20,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:41:20,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:41:20,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9868 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:41:20,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-19 10:41:20,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [count(0)]  
 
 2020-11-19 10:41:20,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [3]  
 
 2020-11-19 10:41:20,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-19 10:41:20,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:41:20,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 10:41:20,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 10:41:20,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.7094 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:41:20,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} open  
 
 2020-11-19 10:41:20,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:41:20,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:41:20,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:41:20,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:41:20,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} closed  
 
 2020-11-19 10:41:20,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:41:20,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:23,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:23,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:41:23,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:41:23,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.9314 millis. select * from t_tages  
 
 2020-11-19 10:41:23,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} open  
 
 2020-11-19 10:41:23,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Header: [id, tage]  
 
 2020-11-19 10:41:23,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [1, 学习日记]  
 
 2020-11-19 10:41:23,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [2, 错误笔记]  
 
 2020-11-19 10:41:23,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [3, 数据库笔记]  
 
 2020-11-19 10:41:23,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [4, 程序运行日记]  
 
 2020-11-19 10:41:23,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [5, 开发日记]  
 
 2020-11-19 10:41:23,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [8, 开发手册]  
 
 2020-11-19 10:41:23,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [10, 搭建日记]  
 
 2020-11-19 10:41:23,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} closed  
 
 2020-11-19 10:41:23,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:41:23,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:23,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:23,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:41:23,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:41:23,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.4374 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:41:23,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} open  
 
 2020-11-19 10:41:23,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Header: [count(0)]  
 
 2020-11-19 10:41:23,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} Result: [3]  
 
 2020-11-19 10:41:23,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50009} closed  
 
 2020-11-19 10:41:23,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:41:23,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 10:41:23,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 10:41:23,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 5.2571 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:41:23,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} open  
 
 2020-11-19 10:41:23,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:41:23,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:41:23,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:41:23,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:41:23,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50010} closed  
 
 2020-11-19 10:41:23,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:41:23,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:33,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:33,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 10:41:33,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 10:41:33,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.095 millis. select * from t_types  
 
 2020-11-19 10:41:33,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} open  
 
 2020-11-19 10:41:33,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Header: [id, name]  
 
 2020-11-19 10:41:33,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [8, 方法论]  
 
 2020-11-19 10:41:33,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [9, 理论类]  
 
 2020-11-19 10:41:33,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [21, 错误日记]  
 
 2020-11-19 10:41:33,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [23, 开发日记]  
 
 2020-11-19 10:41:33,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [24, 实践论]  
 
 2020-11-19 10:41:33,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} Result: [25, 想法论]  
 
 2020-11-19 10:41:33,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50011} closed  
 
 2020-11-19 10:41:33,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 10:41:33,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:33,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:33,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 10:41:33,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 10:41:33,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.1833 millis. select * from t_tages  
 
 2020-11-19 10:41:33,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} open  
 
 2020-11-19 10:41:33,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Header: [id, tage]  
 
 2020-11-19 10:41:33,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [1, 学习日记]  
 
 2020-11-19 10:41:33,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [2, 错误笔记]  
 
 2020-11-19 10:41:33,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [3, 数据库笔记]  
 
 2020-11-19 10:41:33,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [4, 程序运行日记]  
 
 2020-11-19 10:41:33,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [5, 开发日记]  
 
 2020-11-19 10:41:33,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [8, 开发手册]  
 
 2020-11-19 10:41:33,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} Result: [10, 搭建日记]  
 
 2020-11-19 10:41:33,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50012} closed  
 
 2020-11-19 10:41:33,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 10:41:33,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 10:41:33,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 10:41:33,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 10:41:33,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 10:41:33,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0062 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 10:41:33,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} open  
 
 2020-11-19 10:41:33,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Header: [count(0)]  
 
 2020-11-19 10:41:33,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} Result: [3]  
 
 2020-11-19 10:41:33,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50013} closed  
 
 2020-11-19 10:41:33,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 10:41:33,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 10:41:33,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 10:41:33,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.014 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 10:41:33,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} open  
 
 2020-11-19 10:41:33,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 10:41:33,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 10:41:33,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 10:41:33,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 10:41:33,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} closed  
 
 2020-11-19 10:41:33,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 10:41:33,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:00:48,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-624} connected  
 
 2020-11-19 11:00:48,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-625} connected  
 
 2020-11-19 11:00:48,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-626} connected  
 
 2020-11-19 11:00:48,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-627} connected  
 
 2020-11-19 11:00:48,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-628} connected  
 
 2020-11-19 11:00:48,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:00:48,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 11:00:48,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:00:48,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:00:48,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 43.2334 millis. select * from t_types  
 
 2020-11-19 11:00:49,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 11:00:49,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 11:00:49,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 11:00:49,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 11:00:49,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 11:00:49,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 11:00:49,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 11:00:49,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 11:00:49,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 11:00:49,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:00:49,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:00:49,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:00:49,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 11:00:49,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:00:49,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:00:49,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.9505 millis. select * from t_tages  
 
 2020-11-19 11:00:49,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 11:00:49,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 11:00:49,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 11:00:49,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 11:00:49,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 11:00:49,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 11:00:49,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 11:00:49,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 11:00:49,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 11:00:49,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 11:00:49,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:00:49,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:00:49,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:00:49,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:00:49,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:00:49,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:00:49,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 11:00:49,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 11:00:49,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 6.7849 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:00:49,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 11:00:49,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 11:00:49,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 11:00:49,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 11:00:49,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:00:49,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:00:49,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 11:00:49,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 11:00:49,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 17.1317 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:00:49,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 11:00:49,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:00:49,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:00:49,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:00:49,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:00:49,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 11:00:49,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 11:00:49,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:00:53,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:00:53,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:00:53,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:00:53,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.9889 millis. select * from t_tages  
 
 2020-11-19 11:00:53,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} open  
 
 2020-11-19 11:00:53,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Header: [id, tage]  
 
 2020-11-19 11:00:53,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [1, 学习日记]  
 
 2020-11-19 11:00:53,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [2, 错误笔记]  
 
 2020-11-19 11:00:53,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [3, 数据库笔记]  
 
 2020-11-19 11:00:53,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [4, 程序运行日记]  
 
 2020-11-19 11:00:53,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [5, 开发日记]  
 
 2020-11-19 11:00:53,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [8, 开发手册]  
 
 2020-11-19 11:00:53,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-19 11:00:53,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} closed  
 
 2020-11-19 11:00:53,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:00:53,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:00:53,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:00:53,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 11:00:53,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 11:00:53,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8522 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:00:53,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-19 11:00:53,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [count(0)]  
 
 2020-11-19 11:00:53,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [3]  
 
 2020-11-19 11:00:53,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-19 11:00:53,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:00:53,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 11:00:53,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 11:00:53,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.9611 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:00:53,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} open  
 
 2020-11-19 11:00:53,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:00:53,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:00:53,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:00:53,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:00:53,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} closed  
 
 2020-11-19 11:00:53,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 11:00:53,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:00:57,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:00:57,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:00:57,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:00:57,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.3107 millis. select * from t_types  
 
 2020-11-19 11:00:57,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} open  
 
 2020-11-19 11:00:57,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Header: [id, name]  
 
 2020-11-19 11:00:57,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [8, 方法论]  
 
 2020-11-19 11:00:57,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [9, 理论类]  
 
 2020-11-19 11:00:57,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [21, 错误日记]  
 
 2020-11-19 11:00:57,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [23, 开发日记]  
 
 2020-11-19 11:00:57,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [24, 实践论]  
 
 2020-11-19 11:00:57,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} Result: [25, 想法论]  
 
 2020-11-19 11:00:57,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50007} closed  
 
 2020-11-19 11:00:57,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:00:57,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:00:57,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:00:57,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 11:00:57,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 11:00:57,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.8928 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:00:57,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} open  
 
 2020-11-19 11:00:57,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Header: [count(0)]  
 
 2020-11-19 11:00:57,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [3]  
 
 2020-11-19 11:00:57,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} closed  
 
 2020-11-19 11:00:57,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:00:57,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 11:00:57,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 11:00:57,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.4321 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:00:57,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} open  
 
 2020-11-19 11:00:57,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:00:57,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:00:57,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:00:57,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:00:57,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} closed  
 
 2020-11-19 11:00:57,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 11:00:57,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:07:01,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-629} connected  
 
 2020-11-19 11:07:01,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-630} connected  
 
 2020-11-19 11:07:01,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-631} connected  
 
 2020-11-19 11:07:01,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-632} connected  
 
 2020-11-19 11:07:01,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-633} connected  
 
 2020-11-19 11:07:01,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:07:01,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 11:07:01,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:07:01,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:07:01,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.7688 millis. select * from t_types  
 
 2020-11-19 11:07:01,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 11:07:01,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 11:07:01,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 11:07:01,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 11:07:01,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 11:07:01,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 11:07:01,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 11:07:01,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 11:07:01,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 11:07:01,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:07:01,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:07:01,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:07:01,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:07:01,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:07:01,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:07:01,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:07:01,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:07:01,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.749 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:07:01,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 11:07:01,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 11:07:01,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 11:07:01,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 11:07:01,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:07:01,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:07:01,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 11:07:01,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 11:07:01,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.8062 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:07:01,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 11:07:01,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:07:01,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:07:01,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:07:01,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:07:01,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 11:07:01,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:07:01,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:07:57,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-634} connected  
 
 2020-11-19 11:07:57,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-635} connected  
 
 2020-11-19 11:07:57,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-636} connected  
 
 2020-11-19 11:07:57,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-637} connected  
 
 2020-11-19 11:07:57,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-638} connected  
 
 2020-11-19 11:07:57,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:07:57,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 11:07:57,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:07:57,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:07:57,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.4842 millis. select * from t_types  
 
 2020-11-19 11:07:57,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 11:07:57,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 11:07:57,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 11:07:57,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 11:07:57,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 11:07:57,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 11:07:57,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 11:07:57,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 11:07:57,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 11:07:57,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:07:57,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:07:57,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:07:57,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:07:57,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:07:58,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:07:58,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:07:58,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:07:58,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.0818 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:07:58,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 11:07:58,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 11:07:58,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 11:07:58,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 11:07:58,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:07:58,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:07:58,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 11:07:58,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 11:07:58,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.4976 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:07:58,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 11:07:58,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:07:58,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:07:58,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:07:58,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:07:58,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 11:07:58,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:07:58,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:11:01,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-639} connected  
 
 2020-11-19 11:11:01,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-640} connected  
 
 2020-11-19 11:11:01,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-641} connected  
 
 2020-11-19 11:11:01,578 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-642} connected  
 
 2020-11-19 11:11:01,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-643} connected  
 
 2020-11-19 11:11:01,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:11:01,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 11:11:01,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:11:01,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:11:01,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.7741 millis. select * from t_types  
 
 2020-11-19 11:11:01,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 11:11:01,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 11:11:01,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 11:11:01,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 11:11:01,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 11:11:01,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 11:11:01,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 11:11:01,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 11:11:01,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 11:11:01,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:11:01,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:11:01,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:11:01,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:11:01,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:11:01,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:11:01,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:11:01,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:11:01,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.9555 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:11:01,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 11:11:01,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 11:11:01,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 11:11:01,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 11:11:01,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:11:01,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:11:01,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 11:11:01,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 11:11:01,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.3035 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:11:01,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 11:11:01,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:11:01,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:11:01,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:11:01,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:11:01,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 11:11:01,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:11:01,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:12:20,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-644} connected  
 
 2020-11-19 11:12:20,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-645} connected  
 
 2020-11-19 11:12:20,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-646} connected  
 
 2020-11-19 11:12:20,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-647} connected  
 
 2020-11-19 11:12:20,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-648} connected  
 
 2020-11-19 11:12:20,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:12:20,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 11:12:20,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:12:20,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:12:20,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.9631 millis. select * from t_types  
 
 2020-11-19 11:12:20,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 11:12:20,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 11:12:20,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 11:12:20,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 11:12:20,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 11:12:20,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 11:12:20,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 11:12:20,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 11:12:20,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 11:12:20,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:12:20,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:12:20,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:12:20,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:12:20,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:12:20,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:12:20,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:12:20,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:12:20,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.938 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:12:20,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 11:12:20,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 11:12:20,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 11:12:20,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 11:12:20,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:12:20,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:12:20,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 11:12:20,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 11:12:20,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.4045 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:12:20,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 11:12:20,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:12:20,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:12:20,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:12:20,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:12:20,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 11:12:20,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:12:20,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:16:04,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-649} connected  
 
 2020-11-19 11:16:04,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-650} connected  
 
 2020-11-19 11:16:04,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-651} connected  
 
 2020-11-19 11:16:04,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-652} connected  
 
 2020-11-19 11:16:04,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-653} connected  
 
 2020-11-19 11:16:04,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:16:04,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 11:16:04,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:16:04,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:16:04,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.152 millis. select * from t_types  
 
 2020-11-19 11:16:04,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 11:16:04,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 11:16:04,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 11:16:04,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 11:16:04,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 11:16:04,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 11:16:04,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 11:16:04,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 11:16:04,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 11:16:04,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:16:04,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:16:04,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:16:04,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:16:04,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:16:04,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:16:04,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:16:04,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:16:04,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.7712 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:16:04,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 11:16:04,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 11:16:04,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 11:16:04,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 11:16:04,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:16:04,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:16:04,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 11:16:04,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 11:16:04,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.7954 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:16:04,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 11:16:04,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:16:04,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:16:04,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:16:04,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:16:04,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 11:16:04,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:16:04,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:19:13,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-654} connected  
 
 2020-11-19 11:19:13,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-655} connected  
 
 2020-11-19 11:19:13,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-656} connected  
 
 2020-11-19 11:19:13,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-657} connected  
 
 2020-11-19 11:19:13,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-658} connected  
 
 2020-11-19 11:19:13,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:19:14,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_tages  
 
 2020-11-19 11:19:14,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:19:14,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:19:14,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.0397 millis. select * from t_tages  
 
 2020-11-19 11:19:14,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 11:19:14,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, tage]  
 
 2020-11-19 11:19:14,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, 学习日记]  
 
 2020-11-19 11:19:14,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [2, 错误笔记]  
 
 2020-11-19 11:19:14,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [3, 数据库笔记]  
 
 2020-11-19 11:19:14,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [4, 程序运行日记]  
 
 2020-11-19 11:19:14,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [5, 开发日记]  
 
 2020-11-19 11:19:14,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 开发手册]  
 
 2020-11-19 11:19:14,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [10, 搭建日记]  
 
 2020-11-19 11:19:14,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 11:19:14,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:19:14,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:19:14,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:19:14,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:19:14,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:19:14,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:19:14,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:19:14,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:19:14,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.8409 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:19:14,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 11:19:14,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 11:19:14,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3]  
 
 2020-11-19 11:19:14,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 11:19:14,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:19:14,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:19:14,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 11:19:14,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 11:19:14,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 10.4757 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:19:14,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 11:19:14,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:19:14,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:19:14,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:19:14,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:19:14,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 11:19:14,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:19:14,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:19:26,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:19:26,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:19:26,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:19:26,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.4941 millis. select * from t_tages  
 
 2020-11-19 11:19:26,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-19 11:19:26,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [id, tage]  
 
 2020-11-19 11:19:26,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [1, 学习日记]  
 
 2020-11-19 11:19:26,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-19 11:19:26,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-19 11:19:26,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-19 11:19:26,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [5, 开发日记]  
 
 2020-11-19 11:19:26,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [8, 开发手册]  
 
 2020-11-19 11:19:26,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [10, 搭建日记]  
 
 2020-11-19 11:19:26,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-19 11:19:26,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:19:26,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:19:26,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:19:26,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:19:26,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:19:26,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.9286 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:19:26,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} open  
 
 2020-11-19 11:19:26,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Header: [count(0)]  
 
 2020-11-19 11:19:26,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [3]  
 
 2020-11-19 11:19:26,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} closed  
 
 2020-11-19 11:19:26,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:19:26,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [4]  
 
 2020-11-19 11:19:26,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 11:19:26,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 5.7806 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:19:26,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-19 11:19:26,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:19:26,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:19:26,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:19:26,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:19:26,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-19 11:19:26,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:19:26,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:54,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-659} connected  
 
 2020-11-19 11:36:54,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-660} connected  
 
 2020-11-19 11:36:54,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-661} connected  
 
 2020-11-19 11:36:54,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-662} connected  
 
 2020-11-19 11:36:54,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-663} connected  
 
 2020-11-19 11:36:54,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:55,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 11:36:55,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:36:55,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:36:55,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 51.4435 millis. select * from t_types  
 
 2020-11-19 11:36:55,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 11:36:55,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 11:36:55,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 11:36:55,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 11:36:55,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 11:36:55,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 11:36:55,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 11:36:55,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 11:36:55,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 11:36:55,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:36:55,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:55,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:55,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 11:36:55,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:36:55,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:36:55,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.223 millis. select * from t_tages  
 
 2020-11-19 11:36:55,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 11:36:55,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 11:36:55,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 11:36:55,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 11:36:55,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 11:36:55,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 11:36:55,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 11:36:55,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 11:36:55,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 11:36:55,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 11:36:55,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:36:55,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:55,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:55,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:55,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:55,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:36:55,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 11:36:55,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 11:36:55,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 12.3373 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:36:55,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 11:36:55,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 11:36:55,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 11:36:55,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 11:36:55,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:36:55,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:36:55,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 11:36:55,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 11:36:55,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 17.8015 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:36:55,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 11:36:55,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:36:55,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:36:55,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:36:55,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:36:56,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 11:36:56,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 11:36:56,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:56,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:56,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:36:56,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:36:56,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 9.3529 millis. select * from t_types  
 
 2020-11-19 11:36:56,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 11:36:56,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 11:36:56,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 11:36:56,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 11:36:56,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 11:36:56,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 11:36:56,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 11:36:56,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 11:36:56,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 11:36:56,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:36:56,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:56,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:56,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 11:36:56,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 11:36:56,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.8873 millis. select * from t_tages  
 
 2020-11-19 11:36:56,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 11:36:56,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 11:36:56,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 11:36:56,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 11:36:56,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 11:36:56,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 11:36:56,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 11:36:56,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 11:36:56,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 11:36:56,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 11:36:56,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 11:36:56,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:56,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:56,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 11:36:56,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 11:36:56,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.2144 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:36:56,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 11:36:56,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 11:36:56,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [3]  
 
 2020-11-19 11:36:56,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 11:36:56,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:36:56,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 11:36:56,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 11:36:56,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.9091 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:36:56,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 11:36:56,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:36:56,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:36:56,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:36:56,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:36:56,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 11:36:56,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 11:36:56,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:59,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:59,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 11:36:59,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 11:36:59,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.3302 millis. select * from t_types  
 
 2020-11-19 11:36:59,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} open  
 
 2020-11-19 11:36:59,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Header: [id, name]  
 
 2020-11-19 11:36:59,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [8, 方法论]  
 
 2020-11-19 11:36:59,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [9, 理论类]  
 
 2020-11-19 11:36:59,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [21, 错误日记]  
 
 2020-11-19 11:36:59,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [23, 开发日记]  
 
 2020-11-19 11:36:59,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [24, 实践论]  
 
 2020-11-19 11:36:59,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [25, 想法论]  
 
 2020-11-19 11:36:59,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} closed  
 
 2020-11-19 11:36:59,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 11:36:59,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 11:36:59,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 11:36:59,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 11:36:59,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 11:36:59,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.738 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 11:36:59,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} open  
 
 2020-11-19 11:36:59,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} Header: [count(0)]  
 
 2020-11-19 11:36:59,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} Result: [3]  
 
 2020-11-19 11:36:59,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50009} closed  
 
 2020-11-19 11:36:59,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 11:36:59,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 11:36:59,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 11:36:59,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.8339 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 11:36:59,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} open  
 
 2020-11-19 11:36:59,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 11:36:59,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 11:36:59,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 11:36:59,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 11:36:59,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50010} closed  
 
 2020-11-19 11:36:59,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 11:36:59,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:08:19,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-664} connected  
 
 2020-11-19 15:08:19,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-665} connected  
 
 2020-11-19 15:08:19,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-666} connected  
 
 2020-11-19 15:08:19,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-667} connected  
 
 2020-11-19 15:08:19,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-668} connected  
 
 2020-11-19 15:08:19,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:08:19,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:08:20,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} created. select * from t_types  
 
 2020-11-19 15:08:20,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 15:08:20,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 15:08:20,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} Parameters : []  
 
 2020-11-19 15:08:20,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 15:08:20,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} Types : []  
 
 2020-11-19 15:08:20,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 40.2823 millis. select * from t_types  
 
 2020-11-19 15:08:20,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} executed. 40.2822 millis. select * from t_types  
 
 2020-11-19 15:08:20,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 15:08:20,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} open  
 
 2020-11-19 15:08:20,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 15:08:20,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Header: [id, name]  
 
 2020-11-19 15:08:20,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 15:08:20,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [8, 方法论]  
 
 2020-11-19 15:08:20,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [9, 理论类]  
 
 2020-11-19 15:08:20,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 15:08:20,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [21, 错误日记]  
 
 2020-11-19 15:08:20,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 15:08:20,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [23, 开发日记]  
 
 2020-11-19 15:08:20,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 15:08:20,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [24, 实践论]  
 
 2020-11-19 15:08:20,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 15:08:20,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} Result: [25, 想法论]  
 
 2020-11-19 15:08:20,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 15:08:20,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50001} closed  
 
 2020-11-19 15:08:20,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 15:08:20,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} clearParameters.   
 
 2020-11-19 15:08:20,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 15:08:20,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:08:20,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:08:20,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:08:20,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:08:20,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_tages  
 
 2020-11-19 15:08:20,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} created. select * from t_tages  
 
 2020-11-19 15:08:20,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 15:08:20,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : []  
 
 2020-11-19 15:08:20,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 15:08:20,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : []  
 
 2020-11-19 15:08:20,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 10.023 millis. select * from t_tages  
 
 2020-11-19 15:08:20,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 11.5368 millis. select * from t_tages  
 
 2020-11-19 15:08:20,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} open  
 
 2020-11-19 15:08:20,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} open  
 
 2020-11-19 15:08:20,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Header: [id, tage]  
 
 2020-11-19 15:08:20,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Header: [id, tage]  
 
 2020-11-19 15:08:20,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [1, 学习日记]  
 
 2020-11-19 15:08:20,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [1, 学习日记]  
 
 2020-11-19 15:08:20,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [2, 错误笔记]  
 
 2020-11-19 15:08:20,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-19 15:08:20,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [3, 数据库笔记]  
 
 2020-11-19 15:08:20,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-19 15:08:20,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [4, 程序运行日记]  
 
 2020-11-19 15:08:20,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-19 15:08:20,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [5, 开发日记]  
 
 2020-11-19 15:08:20,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [5, 开发日记]  
 
 2020-11-19 15:08:20,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [8, 开发手册]  
 
 2020-11-19 15:08:20,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [8, 开发手册]  
 
 2020-11-19 15:08:20,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} Result: [10, 搭建日记]  
 
 2020-11-19 15:08:20,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} Result: [10, 搭建日记]  
 
 2020-11-19 15:08:20,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50002} closed  
 
 2020-11-19 15:08:20,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50003} closed  
 
 2020-11-19 15:08:20,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-19 15:08:20,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 15:08:20,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:08:20,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:08:20,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:08:20,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:08:20,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:08:20,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:08:20,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:08:20,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:08:20,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:08:20,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:08:20,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 15:08:20,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : []  
 
 2020-11-19 15:08:20,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 15:08:20,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : []  
 
 2020-11-19 15:08:20,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 7.3709 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:08:20,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 7.6969 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:08:20,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50004} open  
 
 2020-11-19 15:08:20,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} open  
 
 2020-11-19 15:08:20,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50004} Header: [count(0)]  
 
 2020-11-19 15:08:20,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Header: [count(0)]  
 
 2020-11-19 15:08:20,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50004} Result: [3]  
 
 2020-11-19 15:08:20,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} Result: [3]  
 
 2020-11-19 15:08:20,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50004} closed  
 
 2020-11-19 15:08:20,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50005} closed  
 
 2020-11-19 15:08:20,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-19 15:08:20,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 15:08:20,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:08:20,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:08:20,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [4]  
 
 2020-11-19 15:08:20,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : [4]  
 
 2020-11-19 15:08:20,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-19 15:08:20,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 15:08:20,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 10.8359 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:08:20,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 10.9539 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:08:20,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} open  
 
 2020-11-19 15:08:20,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} open  
 
 2020-11-19 15:08:20,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:08:20,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:08:20,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:08:20,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:08:20,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:08:20,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:08:20,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:08:20,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:08:20,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} closed  
 
 2020-11-19 15:08:20,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 15:08:20,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50006} closed  
 
 2020-11-19 15:08:20,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:08:20,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-19 15:08:20,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:08:24,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:08:24,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} Parameters : []  
 
 2020-11-19 15:08:24,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} Types : []  
 
 2020-11-19 15:08:24,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} executed. 2.7245 millis. select * from t_types  
 
 2020-11-19 15:08:24,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} open  
 
 2020-11-19 15:08:24,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} Header: [id, name]  
 
 2020-11-19 15:08:24,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} Result: [8, 方法论]  
 
 2020-11-19 15:08:24,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} Result: [9, 理论类]  
 
 2020-11-19 15:08:24,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} Result: [21, 错误日记]  
 
 2020-11-19 15:08:24,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} Result: [23, 开发日记]  
 
 2020-11-19 15:08:24,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} Result: [24, 实践论]  
 
 2020-11-19 15:08:24,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} Result: [25, 想法论]  
 
 2020-11-19 15:08:24,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20001, rs-50008} closed  
 
 2020-11-19 15:08:24,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20001} clearParameters.   
 
 2020-11-19 15:08:24,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:08:24,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:08:24,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : []  
 
 2020-11-19 15:08:24,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : []  
 
 2020-11-19 15:08:24,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 2.8143 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:08:24,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50009} open  
 
 2020-11-19 15:08:24,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-19 15:08:24,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50009} Result: [3]  
 
 2020-11-19 15:08:24,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50009} closed  
 
 2020-11-19 15:08:24,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-19 15:08:24,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : [4]  
 
 2020-11-19 15:08:24,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 15:08:24,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 13.8973 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:08:24,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50010} open  
 
 2020-11-19 15:08:24,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:08:24,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:08:24,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:08:24,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:08:24,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50010} closed  
 
 2020-11-19 15:08:24,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-19 15:08:24,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:08:46,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:08:46,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Parameters : []  
 
 2020-11-19 15:08:46,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} Types : []  
 
 2020-11-19 15:08:46,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} executed. 3.5978 millis. select * from t_tages  
 
 2020-11-19 15:08:46,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} open  
 
 2020-11-19 15:08:46,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Header: [id, tage]  
 
 2020-11-19 15:08:46,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [1, 学习日记]  
 
 2020-11-19 15:08:46,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [2, 错误笔记]  
 
 2020-11-19 15:08:46,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [3, 数据库笔记]  
 
 2020-11-19 15:08:46,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [4, 程序运行日记]  
 
 2020-11-19 15:08:46,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [5, 开发日记]  
 
 2020-11-19 15:08:46,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [8, 开发手册]  
 
 2020-11-19 15:08:46,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} Result: [10, 搭建日记]  
 
 2020-11-19 15:08:46,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20003, rs-50011} closed  
 
 2020-11-19 15:08:46,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20003} clearParameters.   
 
 2020-11-19 15:08:46,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:08:46,273 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:08:46,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Parameters : []  
 
 2020-11-19 15:08:46,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} Types : []  
 
 2020-11-19 15:08:46,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} executed. 3.051 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:08:46,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} open  
 
 2020-11-19 15:08:46,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} Header: [count(0)]  
 
 2020-11-19 15:08:46,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} Result: [3]  
 
 2020-11-19 15:08:46,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20005, rs-50012} closed  
 
 2020-11-19 15:08:46,281 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20005} clearParameters.   
 
 2020-11-19 15:08:46,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Parameters : [4]  
 
 2020-11-19 15:08:46,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 15:08:46,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} executed. 3.4313 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:08:46,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} open  
 
 2020-11-19 15:08:46,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:08:46,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:08:46,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:08:46,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:08:46,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20006, rs-50013} closed  
 
 2020-11-19 15:08:46,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20006} clearParameters.   
 
 2020-11-19 15:08:46,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:09:20,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:09:20,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} created. select * from t_user where username=?  
 
 2020-11-19 15:09:20,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : [zhangsan]  
 
 2020-11-19 15:09:20,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : [VARCHAR]  
 
 2020-11-19 15:09:20,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 4.4791 millis. select * from t_user where username=?  
 
 2020-11-19 15:09:20,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50014} open  
 
 2020-11-19 15:09:20,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50014} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 15:09:20,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50014} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 15:09:20,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50014} closed  
 
 2020-11-19 15:09:20,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-19 15:09:20,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:09:26,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:09:26,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 15:09:26,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [1]  
 
 2020-11-19 15:09:26,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 15:09:26,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 11.6513 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 15:09:27,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} open  
 
 2020-11-19 15:09:27,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} Header: [count(0)]  
 
 2020-11-19 15:09:27,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} Result: [3]  
 
 2020-11-19 15:09:27,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50015} closed  
 
 2020-11-19 15:09:27,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-19 15:09:27,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 15:09:27,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Parameters : [1, 5]  
 
 2020-11-19 15:09:27,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Types : [INTEGER, INTEGER]  
 
 2020-11-19 15:09:27,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} executed. 2.4132 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 15:09:27,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50016} open  
 
 2020-11-19 15:09:27,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50016} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 15:09:27,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50016} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-19 15:09:27,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50016} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-19 15:09:27,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50016} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-19 15:09:27,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50016} closed  
 
 2020-11-19 15:09:27,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} clearParameters.   
 
 2020-11-19 15:09:27,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:09:44,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:09:44,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} created. SELECT count(0) FROM t_types  
 
 2020-11-19 15:09:44,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : []  
 
 2020-11-19 15:09:44,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : []  
 
 2020-11-19 15:09:44,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 10.4975 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 15:09:44,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50017} open  
 
 2020-11-19 15:09:44,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50017} Header: [count(0)]  
 
 2020-11-19 15:09:44,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50017} Result: [6]  
 
 2020-11-19 15:09:44,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50017} closed  
 
 2020-11-19 15:09:44,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-19 15:09:44,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} created. select * from t_types LIMIT ?   
 
 2020-11-19 15:09:44,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Parameters : [5]  
 
 2020-11-19 15:09:44,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 15:09:44,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} executed. 2.4648 millis. select * from t_types LIMIT ?   
 
 2020-11-19 15:09:44,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50018} open  
 
 2020-11-19 15:09:44,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50018} Header: [id, name]  
 
 2020-11-19 15:09:44,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50018} Result: [8, 方法论]  
 
 2020-11-19 15:09:44,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50018} Result: [9, 理论类]  
 
 2020-11-19 15:09:44,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50018} Result: [21, 错误日记]  
 
 2020-11-19 15:09:44,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50018} Result: [23, 开发日记]  
 
 2020-11-19 15:09:44,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50018} Result: [24, 实践论]  
 
 2020-11-19 15:09:44,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50018} closed  
 
 2020-11-19 15:09:44,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} clearParameters.   
 
 2020-11-19 15:09:44,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:09:53,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:09:53,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [1]  
 
 2020-11-19 15:09:53,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 15:09:54,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 2.8215 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 15:09:54,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50019} open  
 
 2020-11-19 15:09:54,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50019} Header: [count(0)]  
 
 2020-11-19 15:09:54,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50019} Result: [3]  
 
 2020-11-19 15:09:54,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50019} closed  
 
 2020-11-19 15:09:54,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-19 15:09:54,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Parameters : [1, 5]  
 
 2020-11-19 15:09:54,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Types : [INTEGER, INTEGER]  
 
 2020-11-19 15:09:54,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} executed. 2.7447 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 15:09:54,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50020} open  
 
 2020-11-19 15:09:54,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50020} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 15:09:54,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50020} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-19 15:09:54,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50020} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-19 15:09:54,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50020} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-19 15:09:54,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50020} closed  
 
 2020-11-19 15:09:54,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} clearParameters.   
 
 2020-11-19 15:09:54,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:09:55,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 15:09:55,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : []  
 
 2020-11-19 15:09:55,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : []  
 
 2020-11-19 15:09:55,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 3.1192 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 15:09:55,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50021} open  
 
 2020-11-19 15:09:55,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50021} Header: [count(0)]  
 
 2020-11-19 15:09:55,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50021} Result: [6]  
 
 2020-11-19 15:09:55,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50021} closed  
 
 2020-11-19 15:09:55,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-19 15:09:55,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Parameters : [5]  
 
 2020-11-19 15:09:55,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 15:09:55,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} executed. 2.3015 millis. select * from t_types LIMIT ?   
 
 2020-11-19 15:09:55,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50022} open  
 
 2020-11-19 15:09:55,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50022} Header: [id, name]  
 
 2020-11-19 15:09:55,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50022} Result: [8, 方法论]  
 
 2020-11-19 15:09:55,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50022} Result: [9, 理论类]  
 
 2020-11-19 15:09:55,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50022} Result: [21, 错误日记]  
 
 2020-11-19 15:09:55,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50022} Result: [23, 开发日记]  
 
 2020-11-19 15:09:55,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50022} Result: [24, 实践论]  
 
 2020-11-19 15:09:55,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20012, rs-50022} closed  
 
 2020-11-19 15:09:55,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20012} clearParameters.   
 
 2020-11-19 15:09:55,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 15:10:49,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-669} connected  
 
 2020-11-19 15:10:49,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-670} connected  
 
 2020-11-19 15:10:49,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-671} connected  
 
 2020-11-19 15:10:49,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-672} connected  
 
 2020-11-19 15:10:49,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-673} connected  
 
 2020-11-19 15:10:49,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:10:50,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-19 15:10:50,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-19 15:10:50,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-19 15:10:50,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 44.9314 millis. select * from t_user where username=?  
 
 2020-11-19 15:10:50,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 15:10:50,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 15:10:50,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 15:10:50,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 15:10:50,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 15:10:50,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:10:54,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:10:54,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:10:54,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:10:54,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_types  
 
 2020-11-19 15:10:54,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 15:10:54,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 15:10:54,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.6161 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 15:10:54,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 15:10:54,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 15:10:54,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [6]  
 
 2020-11-19 15:10:54,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 15:10:54,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 15:10:54,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_types LIMIT ?   
 
 2020-11-19 15:10:54,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [5]  
 
 2020-11-19 15:10:54,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 15:10:54,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.9853 millis. select * from t_types LIMIT ?   
 
 2020-11-19 15:10:54,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 15:10:54,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, name]  
 
 2020-11-19 15:10:54,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 方法论]  
 
 2020-11-19 15:10:54,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [9, 理论类]  
 
 2020-11-19 15:10:54,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [21, 错误日记]  
 
 2020-11-19 15:10:54,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [23, 开发日记]  
 
 2020-11-19 15:10:54,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [24, 实践论]  
 
 2020-11-19 15:10:54,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 15:10:54,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 15:10:54,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:10:57,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:10:57,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 15:10:57,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-19 15:10:57,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 15:10:57,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 8.0303 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 15:10:57,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 15:10:57,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-19 15:10:57,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [3]  
 
 2020-11-19 15:10:57,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 15:10:57,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 15:10:57,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 15:10:57,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-19 15:10:57,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-19 15:10:57,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.7403 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 15:10:57,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 15:10:57,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 15:10:57,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-19 15:10:57,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-19 15:10:57,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-19 15:10:57,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 15:10:57,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 15:10:57,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:12:59,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-19 15:12:59,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 15:12:59,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-19 15:12:59,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-19 15:12:59,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-19 15:12:59,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-674} connected  
 
 2020-11-19 15:12:59,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 15:12:59,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. SELECT count(0) FROM t_types  
 
 2020-11-19 15:12:59,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 15:12:59,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 15:12:59,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.3987 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 15:12:59,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} open  
 
 2020-11-19 15:12:59,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-19 15:12:59,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [6]  
 
 2020-11-19 15:12:59,321 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} closed  
 
 2020-11-19 15:12:59,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 15:12:59,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. select * from t_types LIMIT ?   
 
 2020-11-19 15:12:59,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [5]  
 
 2020-11-19 15:12:59,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 15:12:59,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 1.3793 millis. select * from t_types LIMIT ?   
 
 2020-11-19 15:12:59,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} open  
 
 2020-11-19 15:12:59,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Header: [id, name]  
 
 2020-11-19 15:12:59,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [8, 方法论]  
 
 2020-11-19 15:12:59,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [9, 理论类]  
 
 2020-11-19 15:12:59,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [21, 错误日记]  
 
 2020-11-19 15:12:59,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [23, 开发日记]  
 
 2020-11-19 15:12:59,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [24, 实践论]  
 
 2020-11-19 15:12:59,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} closed  
 
 2020-11-19 15:12:59,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 15:12:59,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 15:13:00,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 15:13:00,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:13:00,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : []  
 
 2020-11-19 15:13:00,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : []  
 
 2020-11-19 15:13:00,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 3.4678 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:13:00,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} open  
 
 2020-11-19 15:13:00,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} Header: [count(0)]  
 
 2020-11-19 15:13:00,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} Result: [7]  
 
 2020-11-19 15:13:00,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50007} closed  
 
 2020-11-19 15:13:00,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 15:13:00,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} created. select * from t_tages LIMIT ?   
 
 2020-11-19 15:13:00,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [5]  
 
 2020-11-19 15:13:00,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 15:13:00,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 2.0704 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 15:13:00,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} open  
 
 2020-11-19 15:13:00,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Header: [id, tage]  
 
 2020-11-19 15:13:00,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [1, 学习日记]  
 
 2020-11-19 15:13:00,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [2, 错误笔记]  
 
 2020-11-19 15:13:00,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [3, 数据库笔记]  
 
 2020-11-19 15:13:00,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [4, 程序运行日记]  
 
 2020-11-19 15:13:00,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} Result: [5, 开发日记]  
 
 2020-11-19 15:13:00,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50008} closed  
 
 2020-11-19 15:13:00,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 15:13:00,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 15:14:40,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-675} connected  
 
 2020-11-19 15:14:40,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-676} connected  
 
 2020-11-19 15:14:40,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-677} connected  
 
 2020-11-19 15:14:40,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-678} connected  
 
 2020-11-19 15:14:40,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-679} connected  
 
 2020-11-19 15:14:40,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:40,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 15:14:40,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 15:14:40,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 15:14:40,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.0875 millis. select * from t_types  
 
 2020-11-19 15:14:40,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 15:14:40,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 15:14:40,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 15:14:40,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 15:14:40,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 15:14:40,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 15:14:40,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 15:14:40,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 15:14:40,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 15:14:40,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 15:14:40,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:40,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:40,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 15:14:40,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 15:14:40,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 15:14:40,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.309 millis. select * from t_tages  
 
 2020-11-19 15:14:40,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 15:14:40,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 15:14:40,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 15:14:40,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 15:14:40,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 15:14:40,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 15:14:40,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 15:14:40,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 15:14:40,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 15:14:40,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 15:14:40,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 15:14:40,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:40,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:40,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:40,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:40,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:14:40,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 15:14:40,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 15:14:40,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8149 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:14:40,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 15:14:40,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 15:14:40,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 15:14:40,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 15:14:40,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 15:14:40,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:14:40,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 15:14:40,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 15:14:40,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.5338 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:14:40,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 15:14:40,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:14:40,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:14:41,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:14:41,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:14:41,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 15:14:41,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 15:14:41,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:41,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:41,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 15:14:41,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 15:14:41,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 5.7458 millis. select * from t_types  
 
 2020-11-19 15:14:41,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 15:14:41,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 15:14:41,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 15:14:41,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 15:14:41,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 15:14:41,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 15:14:41,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 15:14:41,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 15:14:41,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 15:14:41,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 15:14:41,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:41,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:41,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 15:14:41,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 15:14:41,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.2331 millis. select * from t_tages  
 
 2020-11-19 15:14:41,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 15:14:41,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 15:14:41,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 15:14:41,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 15:14:41,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 15:14:41,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 15:14:41,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 15:14:41,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 15:14:41,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 15:14:41,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 15:14:41,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 15:14:41,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:41,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:41,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 15:14:41,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 15:14:41,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.1557 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:14:41,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 15:14:41,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 15:14:41,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [3]  
 
 2020-11-19 15:14:41,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 15:14:41,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 15:14:41,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 15:14:41,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 15:14:41,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.1991 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:14:41,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 15:14:41,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:14:41,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:14:41,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:14:41,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:14:41,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 15:14:41,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 15:14:41,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:48,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:48,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 15:14:48,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 15:14:48,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 15:14:48,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 4.9075 millis. select * from t_user where username=?  
 
 2020-11-19 15:14:48,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-19 15:14:48,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 15:14:48,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 15:14:48,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-19 15:14:48,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 15:14:48,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:51,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:51,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_types  
 
 2020-11-19 15:14:51,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 15:14:51,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 15:14:51,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.4623 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 15:14:51,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-19 15:14:51,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-19 15:14:51,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [6]  
 
 2020-11-19 15:14:51,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-19 15:14:51,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 15:14:51,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_types LIMIT ?   
 
 2020-11-19 15:14:51,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 15:14:51,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 15:14:51,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.2558 millis. select * from t_types LIMIT ?   
 
 2020-11-19 15:14:51,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-19 15:14:51,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [id, name]  
 
 2020-11-19 15:14:51,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [8, 方法论]  
 
 2020-11-19 15:14:51,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [9, 理论类]  
 
 2020-11-19 15:14:51,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [21, 错误日记]  
 
 2020-11-19 15:14:51,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [23, 开发日记]  
 
 2020-11-19 15:14:51,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [24, 实践论]  
 
 2020-11-19 15:14:51,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-19 15:14:51,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 15:14:51,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:14:55,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:14:55,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:14:55,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-19 15:14:55,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-19 15:14:55,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.9894 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:14:55,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} open  
 
 2020-11-19 15:14:55,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Header: [count(0)]  
 
 2020-11-19 15:14:55,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} Result: [7]  
 
 2020-11-19 15:14:55,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50011} closed  
 
 2020-11-19 15:14:55,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 15:14:55,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_tages LIMIT ?   
 
 2020-11-19 15:14:55,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5]  
 
 2020-11-19 15:14:55,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 15:14:55,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.2544 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 15:14:55,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} open  
 
 2020-11-19 15:14:55,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} Header: [id, tage]  
 
 2020-11-19 15:14:55,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} Result: [1, 学习日记]  
 
 2020-11-19 15:14:55,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} Result: [2, 错误笔记]  
 
 2020-11-19 15:14:55,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} Result: [3, 数据库笔记]  
 
 2020-11-19 15:14:55,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} Result: [4, 程序运行日记]  
 
 2020-11-19 15:14:55,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} Result: [5, 开发日记]  
 
 2020-11-19 15:14:55,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50012} closed  
 
 2020-11-19 15:14:55,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 15:14:55,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:15:00,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:15:00,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-19 15:15:00,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-19 15:15:00,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.2397 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:15:00,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} open  
 
 2020-11-19 15:15:00,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Header: [count(0)]  
 
 2020-11-19 15:15:00,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} Result: [7]  
 
 2020-11-19 15:15:00,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50013} closed  
 
 2020-11-19 15:15:00,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 15:15:00,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 15:15:00,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5, 5]  
 
 2020-11-19 15:15:00,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER, INTEGER]  
 
 2020-11-19 15:15:00,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.2775 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 15:15:00,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} open  
 
 2020-11-19 15:15:00,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Header: [id, tage]  
 
 2020-11-19 15:15:00,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Result: [8, 开发手册]  
 
 2020-11-19 15:15:00,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} Result: [10, 搭建日记]  
 
 2020-11-19 15:15:00,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50014} closed  
 
 2020-11-19 15:15:00,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-19 15:15:00,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:15:08,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:15:08,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-19 15:15:08,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-19 15:15:08,162 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 3.1394 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:15:08,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} open  
 
 2020-11-19 15:15:08,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} Header: [count(0)]  
 
 2020-11-19 15:15:08,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} Result: [7]  
 
 2020-11-19 15:15:08,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50015} closed  
 
 2020-11-19 15:15:08,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 15:15:08,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5]  
 
 2020-11-19 15:15:08,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 15:15:08,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.3001 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 15:15:08,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} open  
 
 2020-11-19 15:15:08,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Header: [id, tage]  
 
 2020-11-19 15:15:08,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Result: [1, 学习日记]  
 
 2020-11-19 15:15:08,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Result: [2, 错误笔记]  
 
 2020-11-19 15:15:08,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Result: [3, 数据库笔记]  
 
 2020-11-19 15:15:08,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Result: [4, 程序运行日记]  
 
 2020-11-19 15:15:08,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} Result: [5, 开发日记]  
 
 2020-11-19 15:15:08,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50016} closed  
 
 2020-11-19 15:15:08,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 15:15:08,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:16:03,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:16:03,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-19 15:16:03,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-19 15:16:03,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 4.0242 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:16:03,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50017} open  
 
 2020-11-19 15:16:03,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50017} Header: [count(0)]  
 
 2020-11-19 15:16:03,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50017} Result: [7]  
 
 2020-11-19 15:16:03,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50017} closed  
 
 2020-11-19 15:16:03,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 15:16:03,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5, 5]  
 
 2020-11-19 15:16:03,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER, INTEGER]  
 
 2020-11-19 15:16:03,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.5977 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 15:16:03,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50018} open  
 
 2020-11-19 15:16:03,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50018} Header: [id, tage]  
 
 2020-11-19 15:16:03,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50018} Result: [8, 开发手册]  
 
 2020-11-19 15:16:03,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50018} Result: [10, 搭建日记]  
 
 2020-11-19 15:16:03,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50018} closed  
 
 2020-11-19 15:16:03,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-19 15:16:03,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:16:05,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:16:05,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-19 15:16:05,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-19 15:16:05,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.7477 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:16:05,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50019} open  
 
 2020-11-19 15:16:05,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50019} Header: [count(0)]  
 
 2020-11-19 15:16:05,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50019} Result: [7]  
 
 2020-11-19 15:16:05,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50019} closed  
 
 2020-11-19 15:16:05,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 15:16:05,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5]  
 
 2020-11-19 15:16:05,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 15:16:05,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.1114 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 15:16:05,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50020} open  
 
 2020-11-19 15:16:05,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50020} Header: [id, tage]  
 
 2020-11-19 15:16:05,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50020} Result: [1, 学习日记]  
 
 2020-11-19 15:16:05,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50020} Result: [2, 错误笔记]  
 
 2020-11-19 15:16:05,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50020} Result: [3, 数据库笔记]  
 
 2020-11-19 15:16:05,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50020} Result: [4, 程序运行日记]  
 
 2020-11-19 15:16:05,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50020} Result: [5, 开发日记]  
 
 2020-11-19 15:16:05,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50020} closed  
 
 2020-11-19 15:16:05,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 15:16:05,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:20:44,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-680} connected  
 
 2020-11-19 15:20:44,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-681} connected  
 
 2020-11-19 15:20:44,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-682} connected  
 
 2020-11-19 15:20:44,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-683} connected  
 
 2020-11-19 15:20:44,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-684} connected  
 
 2020-11-19 15:20:44,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:20:44,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 15:20:44,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 15:20:44,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 15:20:44,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 21.1714 millis. select * from t_types  
 
 2020-11-19 15:20:44,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 15:20:44,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 15:20:44,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 15:20:44,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 15:20:44,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 15:20:44,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 15:20:44,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 15:20:44,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 15:20:44,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 15:20:44,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 15:20:44,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:20:44,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:20:44,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 15:20:44,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 15:20:44,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 15:20:44,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.532 millis. select * from t_tages  
 
 2020-11-19 15:20:44,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 15:20:44,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 15:20:44,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 15:20:44,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 15:20:44,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 15:20:44,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 15:20:44,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 15:20:44,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 15:20:44,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 15:20:44,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 15:20:44,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 15:20:44,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:20:44,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:20:44,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:20:44,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:20:44,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:20:44,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 15:20:44,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 15:20:44,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.5456 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:20:44,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 15:20:44,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 15:20:44,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3]  
 
 2020-11-19 15:20:44,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 15:20:44,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 15:20:44,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:20:44,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 15:20:44,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 15:20:44,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 8.9369 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:20:44,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 15:20:44,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:20:44,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:20:44,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:20:44,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:20:44,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 15:20:44,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 15:20:44,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:20:51,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:20:51,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 15:20:51,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 15:20:51,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 15:20:51,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.2792 millis. select * from t_user where username=?  
 
 2020-11-19 15:20:51,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 15:20:51,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 15:20:51,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 15:20:51,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 15:20:51,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 15:20:51,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:20:56,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:20:56,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_types  
 
 2020-11-19 15:20:56,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 15:20:56,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 15:20:56,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.4229 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 15:20:56,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-19 15:20:56,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-19 15:20:56,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [6]  
 
 2020-11-19 15:20:56,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-19 15:20:56,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 15:20:56,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_types LIMIT ?   
 
 2020-11-19 15:20:56,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 15:20:56,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 15:20:56,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.8828 millis. select * from t_types LIMIT ?   
 
 2020-11-19 15:20:56,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-19 15:20:56,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [id, name]  
 
 2020-11-19 15:20:56,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [8, 方法论]  
 
 2020-11-19 15:20:56,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [9, 理论类]  
 
 2020-11-19 15:20:56,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [21, 错误日记]  
 
 2020-11-19 15:20:56,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [23, 开发日记]  
 
 2020-11-19 15:20:56,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [24, 实践论]  
 
 2020-11-19 15:20:56,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-19 15:20:56,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 15:20:56,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:20:59,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:20:59,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 15:20:59,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 15:20:59,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.441 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 15:20:59,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} open  
 
 2020-11-19 15:20:59,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Header: [count(0)]  
 
 2020-11-19 15:20:59,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [6]  
 
 2020-11-19 15:20:59,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} closed  
 
 2020-11-19 15:20:59,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 15:20:59,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. select * from t_types LIMIT ?, ?   
 
 2020-11-19 15:20:59,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [5, 5]  
 
 2020-11-19 15:20:59,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-19 15:20:59,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.0079 millis. select * from t_types LIMIT ?, ?   
 
 2020-11-19 15:20:59,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} open  
 
 2020-11-19 15:20:59,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Header: [id, name]  
 
 2020-11-19 15:20:59,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} Result: [25, 想法论]  
 
 2020-11-19 15:20:59,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50008} closed  
 
 2020-11-19 15:20:59,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 15:20:59,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:00,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:00,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 15:21:00,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 15:21:00,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.2714 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 15:21:00,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-19 15:21:00,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-19 15:21:00,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [6]  
 
 2020-11-19 15:21:00,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-19 15:21:00,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 15:21:00,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 15:21:00,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 15:21:00,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.3061 millis. select * from t_types LIMIT ?   
 
 2020-11-19 15:21:00,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-19 15:21:00,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [id, name]  
 
 2020-11-19 15:21:00,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [8, 方法论]  
 
 2020-11-19 15:21:00,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [9, 理论类]  
 
 2020-11-19 15:21:00,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [21, 错误日记]  
 
 2020-11-19 15:21:00,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [23, 开发日记]  
 
 2020-11-19 15:21:00,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [24, 实践论]  
 
 2020-11-19 15:21:00,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-19 15:21:00,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 15:21:00,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:01,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:01,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:21:01,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-19 15:21:01,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-19 15:21:01,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 3.1443 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:21:01,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50011} open  
 
 2020-11-19 15:21:01,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50011} Header: [count(0)]  
 
 2020-11-19 15:21:01,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50011} Result: [7]  
 
 2020-11-19 15:21:01,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50011} closed  
 
 2020-11-19 15:21:01,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 15:21:01,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. select * from t_tages LIMIT ?   
 
 2020-11-19 15:21:01,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5]  
 
 2020-11-19 15:21:01,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 15:21:01,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.3488 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 15:21:01,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} open  
 
 2020-11-19 15:21:01,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Header: [id, tage]  
 
 2020-11-19 15:21:01,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [1, 学习日记]  
 
 2020-11-19 15:21:01,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [2, 错误笔记]  
 
 2020-11-19 15:21:01,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [3, 数据库笔记]  
 
 2020-11-19 15:21:01,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [4, 程序运行日记]  
 
 2020-11-19 15:21:01,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} Result: [5, 开发日记]  
 
 2020-11-19 15:21:01,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50012} closed  
 
 2020-11-19 15:21:01,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-19 15:21:01,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:02,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:02,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-19 15:21:02,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-19 15:21:02,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 3.4745 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:21:02,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} open  
 
 2020-11-19 15:21:02,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} Header: [count(0)]  
 
 2020-11-19 15:21:02,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} Result: [7]  
 
 2020-11-19 15:21:02,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50013} closed  
 
 2020-11-19 15:21:02,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 15:21:02,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 15:21:02,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [5, 5]  
 
 2020-11-19 15:21:02,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [INTEGER, INTEGER]  
 
 2020-11-19 15:21:02,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 2.5159 millis. select * from t_tages LIMIT ?, ?   
 
 2020-11-19 15:21:02,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50014} open  
 
 2020-11-19 15:21:02,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50014} Header: [id, tage]  
 
 2020-11-19 15:21:02,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50014} Result: [8, 开发手册]  
 
 2020-11-19 15:21:02,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50014} Result: [10, 搭建日记]  
 
 2020-11-19 15:21:02,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20010, rs-50014} closed  
 
 2020-11-19 15:21:02,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-19 15:21:02,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:04,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:04,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : []  
 
 2020-11-19 15:21:04,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : []  
 
 2020-11-19 15:21:04,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 3.1549 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 15:21:04,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50015} open  
 
 2020-11-19 15:21:04,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50015} Header: [count(0)]  
 
 2020-11-19 15:21:04,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50015} Result: [7]  
 
 2020-11-19 15:21:04,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50015} closed  
 
 2020-11-19 15:21:04,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 15:21:04,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [5]  
 
 2020-11-19 15:21:04,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 15:21:04,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 2.5692 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 15:21:04,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} open  
 
 2020-11-19 15:21:04,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} Header: [id, tage]  
 
 2020-11-19 15:21:04,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} Result: [1, 学习日记]  
 
 2020-11-19 15:21:04,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} Result: [2, 错误笔记]  
 
 2020-11-19 15:21:04,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} Result: [3, 数据库笔记]  
 
 2020-11-19 15:21:04,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} Result: [4, 程序运行日记]  
 
 2020-11-19 15:21:04,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} Result: [5, 开发日记]  
 
 2020-11-19 15:21:04,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20009, rs-50016} closed  
 
 2020-11-19 15:21:04,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-19 15:21:04,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:07,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:07,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 15:21:07,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : [1]  
 
 2020-11-19 15:21:07,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : [INTEGER]  
 
 2020-11-19 15:21:07,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 4.2007 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 15:21:07,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50017} open  
 
 2020-11-19 15:21:07,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50017} Header: [count(0)]  
 
 2020-11-19 15:21:07,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50017} Result: [3]  
 
 2020-11-19 15:21:07,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50017} closed  
 
 2020-11-19 15:21:07,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-19 15:21:07,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 15:21:07,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [1, 5]  
 
 2020-11-19 15:21:07,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER, INTEGER]  
 
 2020-11-19 15:21:07,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 2.5052 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 15:21:07,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50018} open  
 
 2020-11-19 15:21:07,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50018} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 15:21:07,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50018} Result: [zhangsan, 1, Java笔记, 2020-11-16 21:52:49.0, 1, true, true]  
 
 2020-11-19 15:21:07,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50018} Result: [zhangsan, 9, Java简介, 2020-11-18 03:13:12.0, 1, true, true]  
 
 2020-11-19 15:21:07,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50018} Result: [zhangsan, 10, Java基本语法02, 2020-11-18 19:38:30.0, 1, true, true]  
 
 2020-11-19 15:21:07,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50018} closed  
 
 2020-11-19 15:21:07,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-19 15:21:07,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:21,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:21,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 15:21:21,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 15:21:21,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9405 millis. select * from t_tages  
 
 2020-11-19 15:21:21,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} open  
 
 2020-11-19 15:21:21,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Header: [id, tage]  
 
 2020-11-19 15:21:21,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [1, 学习日记]  
 
 2020-11-19 15:21:21,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [2, 错误笔记]  
 
 2020-11-19 15:21:21,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [3, 数据库笔记]  
 
 2020-11-19 15:21:21,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [4, 程序运行日记]  
 
 2020-11-19 15:21:21,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [5, 开发日记]  
 
 2020-11-19 15:21:21,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [8, 开发手册]  
 
 2020-11-19 15:21:21,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} Result: [10, 搭建日记]  
 
 2020-11-19 15:21:21,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50019} closed  
 
 2020-11-19 15:21:21,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 15:21:21,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:21,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:21,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 15:21:21,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 15:21:21,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.1354 millis. select * from t_types  
 
 2020-11-19 15:21:21,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} open  
 
 2020-11-19 15:21:21,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Header: [id, name]  
 
 2020-11-19 15:21:21,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [8, 方法论]  
 
 2020-11-19 15:21:21,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [9, 理论类]  
 
 2020-11-19 15:21:21,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [21, 错误日记]  
 
 2020-11-19 15:21:21,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [23, 开发日记]  
 
 2020-11-19 15:21:21,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [24, 实践论]  
 
 2020-11-19 15:21:21,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} Result: [25, 想法论]  
 
 2020-11-19 15:21:21,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50020} closed  
 
 2020-11-19 15:21:21,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 15:21:21,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:57,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:57,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 15:21:57,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 15:21:57,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 6.5484 millis. select * from t_types  
 
 2020-11-19 15:21:57,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} open  
 
 2020-11-19 15:21:57,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} Header: [id, name]  
 
 2020-11-19 15:21:57,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} Result: [8, 方法论]  
 
 2020-11-19 15:21:57,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} Result: [9, 理论类]  
 
 2020-11-19 15:21:57,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} Result: [21, 错误日记]  
 
 2020-11-19 15:21:57,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} Result: [23, 开发日记]  
 
 2020-11-19 15:21:57,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} Result: [24, 实践论]  
 
 2020-11-19 15:21:57,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} Result: [25, 想法论]  
 
 2020-11-19 15:21:57,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50021} closed  
 
 2020-11-19 15:21:57,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 15:21:57,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:57,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:57,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 15:21:57,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 15:21:57,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.231 millis. select * from t_tages  
 
 2020-11-19 15:21:57,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} open  
 
 2020-11-19 15:21:57,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Header: [id, tage]  
 
 2020-11-19 15:21:57,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [1, 学习日记]  
 
 2020-11-19 15:21:57,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [2, 错误笔记]  
 
 2020-11-19 15:21:57,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [3, 数据库笔记]  
 
 2020-11-19 15:21:57,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [4, 程序运行日记]  
 
 2020-11-19 15:21:57,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [5, 开发日记]  
 
 2020-11-19 15:21:57,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [8, 开发手册]  
 
 2020-11-19 15:21:57,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} Result: [10, 搭建日记]  
 
 2020-11-19 15:21:57,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50022} closed  
 
 2020-11-19 15:21:57,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 15:21:57,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:21:57,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:21:57,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 15:21:57,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 15:21:57,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.6531 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:21:57,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} open  
 
 2020-11-19 15:21:57,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} Header: [count(0)]  
 
 2020-11-19 15:21:57,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} Result: [3]  
 
 2020-11-19 15:21:57,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50023} closed  
 
 2020-11-19 15:21:57,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 15:21:57,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 15:21:57,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 15:21:57,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.6307 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:21:57,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} open  
 
 2020-11-19 15:21:57,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:21:57,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:21:57,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:21:57,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:21:57,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50024} closed  
 
 2020-11-19 15:21:57,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 15:21:57,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:22:21,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:22:21,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 15:22:21,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Parameters : [9]  
 
 2020-11-19 15:22:21,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 15:22:21,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} executed. 12.9847 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 15:22:21,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50025} open  
 
 2020-11-19 15:22:21,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50025} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 15:22:21,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50025} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true, 原创, 理论类, 9]  
 
 2020-11-19 15:22:21,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50025} closed  
 
 2020-11-19 15:22:21,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} clearParameters.   
 
 2020-11-19 15:22:21,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:22:33,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:22:33,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 15:22:33,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 15:22:33,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.1285 millis. select * from t_types  
 
 2020-11-19 15:22:33,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} open  
 
 2020-11-19 15:22:33,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Header: [id, name]  
 
 2020-11-19 15:22:33,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [8, 方法论]  
 
 2020-11-19 15:22:33,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [9, 理论类]  
 
 2020-11-19 15:22:33,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [21, 错误日记]  
 
 2020-11-19 15:22:33,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [23, 开发日记]  
 
 2020-11-19 15:22:33,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [24, 实践论]  
 
 2020-11-19 15:22:33,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} Result: [25, 想法论]  
 
 2020-11-19 15:22:33,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50026} closed  
 
 2020-11-19 15:22:33,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 15:22:33,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:22:33,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:22:33,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 15:22:33,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 15:22:33,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9352 millis. select * from t_tages  
 
 2020-11-19 15:22:33,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} open  
 
 2020-11-19 15:22:33,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Header: [id, tage]  
 
 2020-11-19 15:22:33,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [1, 学习日记]  
 
 2020-11-19 15:22:33,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [2, 错误笔记]  
 
 2020-11-19 15:22:33,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [3, 数据库笔记]  
 
 2020-11-19 15:22:33,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [4, 程序运行日记]  
 
 2020-11-19 15:22:33,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [5, 开发日记]  
 
 2020-11-19 15:22:33,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [8, 开发手册]  
 
 2020-11-19 15:22:33,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} Result: [10, 搭建日记]  
 
 2020-11-19 15:22:33,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50027} closed  
 
 2020-11-19 15:22:33,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 15:22:33,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 15:22:33,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 15:22:33,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 15:22:33,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 15:22:33,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3643 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 15:22:33,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} open  
 
 2020-11-19 15:22:33,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} Header: [count(0)]  
 
 2020-11-19 15:22:33,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} Result: [3]  
 
 2020-11-19 15:22:33,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50028} closed  
 
 2020-11-19 15:22:33,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 15:22:33,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 15:22:33,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 15:22:33,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.5876 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 15:22:33,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} open  
 
 2020-11-19 15:22:33,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 15:22:33,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 1, Java笔记, 2020-11-16 21:52:49.0, 0, ##Java笔记
关键字
1 全部是小写，（比如publin）
2 在Notepad++有特色颜色
标识符
1 不能以数字开头
2 不能是关键字
3 标识符可以包括26个英文字母（区分大小写） 0-9数字 $和下划线
命名规则
类名规范  ：首字母大写，后面每一个单词的首字母都要大写（大驼峰式）（比如HelloWorld）
变量名规范  ：首字母小写，后面每一个单词的首字母都要大写（小驼峰式）（比如helloWorld）
方法名规则 ： 和变量名的规则一样
常量
1 凡是用双引号引一起来的部分，都叫字符串常量
2 直接写上数字的，没有小数点，比如100 200 300，都叫整数常量
3 直接写上数字的，有小数点，比如10.2 20.5 ，都叫浮点数常量
4凡是用单引号引一起来的部分，都叫字符常量比如‘2’ ‘3’
5布尔常量 true flae
6空常量 null
数据类型的从小到大顺序
（byte，short，char)-int-long-float-double
基本类型：
public class shuju{
	public static void main(String[] args){
		double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
		System.out.println(num1);
		int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小
的
		System.out.println(num2);
	}
	
}
三元运算：需要三个数据才可以进行运算的运算符；
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
public class jiangx{
	public static void main(String[] args){
		int a=10;
		int b=20;
		int max=a>b ? a:b;
		System.out.println("最大值" + max);
	}
}
创建数组
int[] myList = {1.9, 2.9, 3.4, 3.5};

返回值为空：
public static void main(String[] args){
   	HelloWorld()；
} 
public static （void 空值） HelloWorld(){
	for(){
               System.out.println("输入一段文字")
   }
}只输出打印，没有返回值出来
最后一行的return一般不写；
没有返回值的方法只能是单独调用，不能用打印和赋值调用
因为void是一个空值，
调用的方法有三种：一单独调用：sum（10,20）；二打印调用System.out.println（sum（10,20））；三赋值调用：int sum1=sum（10,20）；System.out.println（sum1）
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
方法重载的主注意事项：
不能有俩个一样的数据参数：
public static void main(String[] args){
   	调用的方法
} 
public static int sum(int a，int b){
	return a+b；
   }
public static int sum(int x，int y){
	return a+b；
   }//这个调用是错误的，方法的调用与数据名称无关

当俩个数据参数类型不一样的时候，谁的数据范围大就取谁的
public static void main(String[] args){
   	调用的方法
} 
public static double sum(double a，int b){
	return a+b；//double大，所以要把int改为double
   }

参数传递的过程中，有俩项规则
1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；
简单地说构造函数是类函数，函数名与类名完全相同，无返回值
调用构造方法名的方法：
new 类名称（）；
继承：
字类只能继承父类非prviate的变量。只能单个继承，但可以无限出现父类
比如：class tater{}
         class（ tater1 ）extend tater{}
         class （tater2 ）extend tater1{}
可以这样继承。
继承：当创建一个对象时，是先调用父类的无参数构造方法，然后在调用子类的无参数构造方法。
          当子类继承父类时，子类有和父类同名，同参数的构造方法，当调用时，子类会覆盖父类的输出数据，
          当父类需要调用到自己的构造方法时，可以用super调用，但必须在子类构造方法的前面：
                             void clas{
                                  super("xyz",30);
		  this.name="stunder name";
		  this.age=20;}

                              void clas1{
                                  super(name,age);
		  this.name=name;
		  this.age=age;
		  this.classno=classno;}
重载的特殊情况：
public class MethodOverloaded {
	
 注意 int add(int x1,int x2){
	   return x1+x2;
   }
   注意double add(double x1,double x2){
	   return x1+x2;
   }
   public static void main(String[] args) {
        注意：MethodOverloaded obj=new MethodOverloaded ();
	   System.out.println(obj.add(10,23));
	   System.out.println(obj.add(10.0, 23));
	
   }
}当重载方法前面没有public static时，只能通过创建对象来获取里面的值，就好像我上面的情况一样。

构造方法只能调用一次
抽象类中不能和pravite，static fainl，一起使用。
static abstract void smoke（）；会报错
接口：
可以使用接口名来访问接口里面的常量：
interface Teacher{
    public static final double p=3.14；
}
public class a{
   public static void main（String[] args）{
      syso（Teacher.p）//是可以打印出来的  
   }
}
接口中方法的定义不需要abstract修饰的，默认就是抽象的：
interface Teacher{
    void a（）；
    void b（）；
}
接口还可以继承，也可以一次性继承多个接口，这一点在类中是不可以的， 
三种数组定义的方法：
1 int[] array=new array[放数组长度]; 比如: int[] array=new array[8]那它就只能取8个长度的数组
2  int[] array={1,2,3,4,};直接放数值；
3  int[] array=new arry{1,2,3,4}直接放数值；这种方式和第二种有点相同，但是也有不同，详细请见图片。

二维数组：
2)names[i]也是一个一维数组，names[i].length指的是当前行有几列，如上例names[0].length表示的是第一行字符串的个数。
字符串：
字符串对象只要是被创建了，那里面的内容不可改变，当你觉得改变的话，其实只是改变了一个地址。

==对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。

如果字符串new一个新的对象的话，那么他的地址也会改变。
小技巧：当用equals比较俩个字符串的时候，当其中一个字符串为常量的时候，推荐把常量写前面。不然会出现以下情况
String str3="null";
 System.out.println(str3.equals（"abc"）);注意：会报错，因为你的str3是一个空值，空值就不能调用方法。
但这样 System.out.println("abc".equals（str3）);这样就不会报错，打印flase。

集合：本身就是一种引用类型，可以存放多个数据，集合的长度可以任意改变，而数组不行，集合包括很多种，现在阶段就学最简单的ArrayList。

创建一个集合：ArrayList<乏型> list=new ArrayList<>()；
集合直接打印打印的不是地址，是内容。
集合的添加元素：ArrayList<String> list=new ArrayList<>()；
                           list.add("out");
boolone succuse=list.add(“”你好“”);
打印succuse是显示true，这个方法是检查这个数据是否添加成功。

获取元素：
list.get（集合下标）；

获取集合长度:
list.size（）;
当你集合想存储其他的数据类型，包括基本类型和引用数据类型，那只要写对数据类型的名称就可以了
基本类型     对于的包装类型
byte                 Byte
int                    Integer
short                Short
long                 Long
float                 Flaot
double             Double
char                 Character
boolean           Boolean
当你想要存储的集合数据类型为整数型时，只需要把集合的乏型写成整数类型就可以了，比如：ArrayList<Integer> list=new ArrayList<>()；就可以了。

异常：
就是用数据发生了数据出错，程序无法运行。java异常就是通过面对对象的思想将问题封装成对象，然后用异常类对其进行描述。


 String d="liasdflihsdhlijsdflihsdfiligsdfglikhsdfklilisdflioli";查找里面有多少个li，-1就是表示没找到这个字符串，
某些查询方法中，如果没有查找到你想要的结果，就会返回-1，表示没有查找到。用-1区判断里面是否有还有li，有就返回1，那就会继续执行代码。
             int count=0;
             int dext=d.indexOf("li");
             while(dext !=-1){
            	 count++;
            	 dext=d.indexOf("li", dext+2);
             }
          System.out.println(count);
栈：
要出数据的话，是后进先出。
队列：
要出数据的话，是先进先出  。

collection集合在使用迭代器的时候，不能中途添加数据：
Iterator iter=col.iterator();
    	while(iter.hasNext()){
    		String iter1=(String)iter.next();
    		if("王伟1".equals(iter1)){
    			col.add("张三");
    		}
    		System.out.println(iter1);
    	}
但是List，ArrayList，LinkList，vcto都可以在使用迭代器的时候添加数据。
异常分为运行时异常和非运行时异常；
运行时异常表示的RunExction
编译时异常为Exction；
这样去区分。
编码问题：
你用的是哪个编码格式去写入文件的，如果你要去读取这个文件，那你就要用相同的编码格式去解码，不然会出现乱码。
比如你用GBK去写入数据，那你要读取数据的话一定要用GBK去读取里面的数据，不然一定会乱码

同步锁synchronized：
synchronized同步代码块的锁对象可以是任意对象（但是线程的实现方法必须是继承Thread）
而且这个对象必须是线程类的共享对象（静态的，就是加了static的）
synchronized是可以加在方法上面 的，如果是静态方法synchronized的所对的锁就是类的类对象。
如果不是静态的方法，synchronized如果加在非静态方法上，那么它的锁就是this

比如有一个类为Fruit。里面有一些私有变量，
当你有一个线程要去使用到里面的私有变量的时候，你可以直接封装成一个对象，比如这样：private Fruit fruit；
这样你可以调用到Fruit里面所有的变量，当Fruit创建成一个对象，比如：Fruit f=new Fruit（），把里面的私有变量都赋予了值得的时候，当你的线程也创建的时候 比如 inducespeople id=new inducespeople(f);
这样你Fruit里面的变量的值都会传过去，当然你的线程里面要有这样一个构造方法：
public buypeople(Fruit fruit) {
        super();
        this.fruit = fruit;
    }
有时候创建线程可以在一个类里面创建，比如：
public class t{
   public t（）{
    min m=new min（）；
    Thread start=new Thread（m）；
   start。start（）；
}
   class min impthis Runable{
   

}


}
当t实例化的时候，线程min也会启动
alter table 表名 add字段 类型 ;  添加字段
alter table 表名 drop column 字段名； 删除字段，

String 中的idnex of的一些用法
比如 String a="jskajdjsjd";

1.indexOf(int ch（一定要是ASCII码）) 在给定字符串中查找字符(ASCII),找到返回字符数组所对应的下标找不到返回-1

2.indexOf(String str)在给定符串中查找另一个字符串。。。

3.indexOf(int ch（一定要是ASCII码）,int fromIndex)从指定的下标开始查找某个字符，查找到返回下标，查找不到返回-1

4.indexOf(String str,int fromIndex)从指定的下标开始查找你要查找的字符

<script>
        function ajaxFunction() {
          var xmlHttp;
          try {
            // Firefox, Opera 8.0+, Safari
            xmlHttp = new XMLHttpRequest();
          } catch (e) {
            try {
              // Internet Explorer
              xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
              try {
                xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
              } catch (e) {
              }
            }
          }
          return xmlHttp;
        }
        function post() {
          //1. 创建对象
          var request = ajaxFunction();
          //2. 发送请求
          request.open("POST", "Gatdate", true);
          //想获取服务器传送过来的数据， 加一个状态的监听。
          request.onreadystatechange = function() {
            if (request.readyState == 4 && request.status == 200) {
              var s=request.responseText;
              $("#score").html(s);
                // $("#score").html(list[2]+list[3]+list.score);
            }
          }
          //如果使用的是post方式带数据，那么 这里要添加头， 说明提交的数据类型是一个经过url编码的form表单数据
          request.setRequestHeader("Content-type",
                  "application/x-www-form-urlencoded");
          // //带数据过去? ， 在send方法里面写表单数据。
          request.send("name="+$("#name").val());
        }
function PostRequest(){

 var xhr = null;

 if(window.XMLHttpRequest){
 xhr = new XMLHttpRequest();

 }else{

 xhr = new ActiveXObject("Microsoft.XMLHttp");
 }

 xhr.open('post,’/ajax_demo’,true);

 xhr.setRequestHeader('Content-Type’,"application/x-www-form-urlencoded’);

 xhr.onreadystatechange = function(){

 if(xhr.readyState == 4 && xhr.status == 200){
 var data = xhr.responseText;
 }

 }
 xhr.send('username=itxdl;password=123456’);

}

jquery：

$(function(){
		//失去去焦点
		$(".user").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入账号");
			}
		})
		//失去去焦点
		 $(".pas").blur(function(){
			var value=$(this).val();
			if(value==""){
				alert("请输入密码");
			}
		}) 
	})
blur这个方法就是失去鼠标的焦点
focus就是成为焦点
$(".user")就是表单中的一个class
$.trim去除空格
http://localhost/upload/index02.jsp

返回所继承的类
Class<T> clazz=(Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[0];

Html清除浮动,直接是一个css文件。在每一个html页面上引入就可以了
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

清除浮动

.clearfix{*zoom:1;} 
.clearfix::after{
	clear:both;
	content:"";
	display:block;
	height:0;
	visibility:hidden;
}
注意：.clearfix的class属性不是用在浮动元素本身上，也是用在浮动元素的父元素上。
问http://localhost:9001/actuator/hystrix.stream 


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:+'
    implementation 'com.android.support.constraint:constraint-layout:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'




IS Null  用来查 数据库数据是否为NULL的 用 =null是不行的 空值查询
IN 集合查询
BETWEEN  值 AND 值 访问查询
, https://picsum.photos/seed/picsum/800/450, 这是属于我个人的一些学习笔记, 1, true, true]  
 
 2020-11-19 15:22:33,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 9, Java简介, 2020-11-18 03:13:12.0, 0, ##Java 语言是简单的：

Java 语言的语法与 C 语言和 C++ 语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java 丢弃了 C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java 语言不使用指针，而是引用。并提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧。

##Java 语言是面向对象的：

Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，而 C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。, https://picsum.photos/seed/picsum/800/450, Java语言的基本编写, 1, true, true]  
 
 2020-11-19 15:22:33,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 10, Java基本语法02, 2020-11-18 19:38:30.0, 0, ##基本语法
编写 Java 程序时，应注意以下几点：

大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。, https://picsum.photos/seed/picsum/800/450, 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。, 1, true, true]  
 
 2020-11-19 15:22:33,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50029} closed  
 
 2020-11-19 15:22:33,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 15:22:33,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:04:53,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-691} connected  
 
 2020-11-19 16:04:53,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-692} connected  
 
 2020-11-19 16:04:53,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-693} connected  
 
 2020-11-19 16:04:53,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-694} connected  
 
 2020-11-19 16:04:53,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-695} connected  
 
 2020-11-19 16:04:53,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:04:53,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 16:04:53,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:04:53,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:04:53,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 21.3646 millis. select * from t_types  
 
 2020-11-19 16:04:53,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:04:53,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 16:04:54,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 16:04:54,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 16:04:54,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 16:04:54,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 16:04:54,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 16:04:54,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 16:04:54,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:04:54,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:04:54,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:04:54,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:04:54,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:04:54,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:04:54,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:04:54,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.402 millis. select * from t_tages  
 
 2020-11-19 16:04:54,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:04:54,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:04:54,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:04:54,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:04:54,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:04:54,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:04:54,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:04:54,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:04:54,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:04:54,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:04:54,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:04:54,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:04:54,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:04:54,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:04:54,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:04:54,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:04:54,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:04:54,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:04:54,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 10.8253 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:04:54,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:04:54,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 16:04:54,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [0]  
 
 2020-11-19 16:04:54,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:04:54,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:04:54,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:04:55,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:04:55,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:04:55,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:04:55,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 9.4092 millis. select * from t_types  
 
 2020-11-19 16:04:55,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} open  
 
 2020-11-19 16:04:55,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Header: [id, name]  
 
 2020-11-19 16:04:55,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [8, 方法论]  
 
 2020-11-19 16:04:55,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [9, 理论类]  
 
 2020-11-19 16:04:55,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [21, 错误日记]  
 
 2020-11-19 16:04:55,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [23, 开发日记]  
 
 2020-11-19 16:04:55,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [24, 实践论]  
 
 2020-11-19 16:04:55,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} Result: [25, 想法论]  
 
 2020-11-19 16:04:55,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50003} closed  
 
 2020-11-19 16:04:55,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:04:55,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:04:55,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:04:55,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:04:55,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:04:55,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.214599 millis. select * from t_tages  
 
 2020-11-19 16:04:55,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} open  
 
 2020-11-19 16:04:55,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Header: [id, tage]  
 
 2020-11-19 16:04:55,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [1, 学习日记]  
 
 2020-11-19 16:04:55,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [2, 错误笔记]  
 
 2020-11-19 16:04:55,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [3, 数据库笔记]  
 
 2020-11-19 16:04:55,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [4, 程序运行日记]  
 
 2020-11-19 16:04:55,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [5, 开发日记]  
 
 2020-11-19 16:04:55,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [8, 开发手册]  
 
 2020-11-19 16:04:55,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-19 16:04:55,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50004} closed  
 
 2020-11-19 16:04:55,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:04:55,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:04:55,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:04:55,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:04:55,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:04:55,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.0815 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:04:55,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-19 16:04:55,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [count(0)]  
 
 2020-11-19 16:04:55,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [0]  
 
 2020-11-19 16:04:55,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-19 16:04:55,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:04:55,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:05:05,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:05:05,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select * from t_user where username=?  
 
 2020-11-19 16:05:05,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [zhangsan]  
 
 2020-11-19 16:05:05,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [VARCHAR]  
 
 2020-11-19 16:05:05,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.0499 millis. select * from t_user where username=?  
 
 2020-11-19 16:05:05,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} open  
 
 2020-11-19 16:05:05,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 16:05:05,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 16:05:05,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} closed  
 
 2020-11-19 16:05:05,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:05:05,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:05:08,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:05:08,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:05:08,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:05:08,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.217701 millis. select * from t_tages  
 
 2020-11-19 16:05:08,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} open  
 
 2020-11-19 16:05:08,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Header: [id, tage]  
 
 2020-11-19 16:05:08,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [1, 学习日记]  
 
 2020-11-19 16:05:08,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [2, 错误笔记]  
 
 2020-11-19 16:05:08,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [3, 数据库笔记]  
 
 2020-11-19 16:05:08,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [4, 程序运行日记]  
 
 2020-11-19 16:05:08,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [5, 开发日记]  
 
 2020-11-19 16:05:08,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [8, 开发手册]  
 
 2020-11-19 16:05:08,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [10, 搭建日记]  
 
 2020-11-19 16:05:08,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} closed  
 
 2020-11-19 16:05:08,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:05:08,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:05:08,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:05:08,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:05:08,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:05:08,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.2745 millis. select * from t_types  
 
 2020-11-19 16:05:08,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} open  
 
 2020-11-19 16:05:08,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Header: [id, name]  
 
 2020-11-19 16:05:08,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [8, 方法论]  
 
 2020-11-19 16:05:08,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [9, 理论类]  
 
 2020-11-19 16:05:08,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [21, 错误日记]  
 
 2020-11-19 16:05:08,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [23, 开发日记]  
 
 2020-11-19 16:05:08,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [24, 实践论]  
 
 2020-11-19 16:05:08,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} Result: [25, 想法论]  
 
 2020-11-19 16:05:08,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50008} closed  
 
 2020-11-19 16:05:08,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:05:08,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:11:12,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-19 16:11:12,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 16:11:12,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-19 16:11:12,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-19 16:11:12,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-19 16:11:12,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-696} connected  
 
 2020-11-19 16:11:12,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:12,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} created. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         , 
            createtime
         , 
            blogdescribe
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:11:12,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Parameters : [null, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 是, 0, true, true, true, true, true, 2020-11-19 16:11:12.19, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容]  
 
 2020-11-19 16:11:12,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, TIMESTAMP, VARCHAR]  
 
 2020-11-19 16:11:12,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} executed. 11.085799 millis. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         , 
            createtime
         , 
            blogdescribe
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:11:12,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} clearParameters.   
 
 2020-11-19 16:11:12,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:11:12,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:12,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. select id from t_blog where title=?  
 
 2020-11-19 16:11:12,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : [Java基本语法]  
 
 2020-11-19 16:11:12,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-19 16:11:12,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.693101 millis. select id from t_blog where title=?  
 
 2020-11-19 16:11:12,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} open  
 
 2020-11-19 16:11:12,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Header: [id]  
 
 2020-11-19 16:11:12,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Result: [11]  
 
 2020-11-19 16:11:12,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} closed  
 
 2020-11-19 16:11:12,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 16:11:12,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:11:12,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:12,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:11:12,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [null, 1, 11]  
 
 2020-11-19 16:11:12,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 16:11:12,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 13.085 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:11:12,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 16:11:12,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:11:12,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:12,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:11:12,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [null, 11, 8]  
 
 2020-11-19 16:11:12,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 16:11:12,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 9.305901 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:11:12,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 16:11:12,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:11:12,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:12,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} created. insert into t_user_blog
         (  
            id
         , 
            uid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:11:12,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [null, 1, 11]  
 
 2020-11-19 16:11:12,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 16:11:12,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 12.581501 millis. insert into t_user_blog
         (  
            id
         , 
            uid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:11:12,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 16:11:12,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:11:12,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:12,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 16:11:12,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Parameters : [1]  
 
 2020-11-19 16:11:12,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 16:11:12,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} executed. 5.345201 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 16:11:12,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50010} open  
 
 2020-11-19 16:11:12,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50010} Header: [count(0)]  
 
 2020-11-19 16:11:12,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50010} Result: [1]  
 
 2020-11-19 16:11:12,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50010} closed  
 
 2020-11-19 16:11:12,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} clearParameters.   
 
 2020-11-19 16:11:12,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 16:11:12,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : [1, 5]  
 
 2020-11-19 16:11:12,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : [INTEGER, INTEGER]  
 
 2020-11-19 16:11:12,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 4.2524 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 16:11:12,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50011} open  
 
 2020-11-19 16:11:12,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50011} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 16:11:12,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50011} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 16:11:12,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50011} closed  
 
 2020-11-19 16:11:12,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 16:11:12,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:11:37,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:37,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} created. select * from t_types  
 
 2020-11-19 16:11:37,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Parameters : []  
 
 2020-11-19 16:11:37,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Types : []  
 
 2020-11-19 16:11:37,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} executed. 2.312599 millis. select * from t_types  
 
 2020-11-19 16:11:37,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} open  
 
 2020-11-19 16:11:37,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Header: [id, name]  
 
 2020-11-19 16:11:37,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Result: [8, 方法论]  
 
 2020-11-19 16:11:37,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Result: [9, 理论类]  
 
 2020-11-19 16:11:37,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Result: [21, 错误日记]  
 
 2020-11-19 16:11:37,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Result: [23, 开发日记]  
 
 2020-11-19 16:11:37,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Result: [24, 实践论]  
 
 2020-11-19 16:11:37,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} Result: [25, 想法论]  
 
 2020-11-19 16:11:37,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50012} closed  
 
 2020-11-19 16:11:37,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} clearParameters.   
 
 2020-11-19 16:11:37,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:11:37,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:37,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} created. select * from t_tages  
 
 2020-11-19 16:11:37,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : []  
 
 2020-11-19 16:11:37,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : []  
 
 2020-11-19 16:11:37,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 2.266201 millis. select * from t_tages  
 
 2020-11-19 16:11:37,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} open  
 
 2020-11-19 16:11:37,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} Header: [id, tage]  
 
 2020-11-19 16:11:37,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} Result: [1, 学习日记]  
 
 2020-11-19 16:11:37,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} Result: [2, 错误笔记]  
 
 2020-11-19 16:11:37,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} Result: [3, 数据库笔记]  
 
 2020-11-19 16:11:37,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} Result: [4, 程序运行日记]  
 
 2020-11-19 16:11:37,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} Result: [5, 开发日记]  
 
 2020-11-19 16:11:37,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} Result: [8, 开发手册]  
 
 2020-11-19 16:11:37,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} Result: [10, 搭建日记]  
 
 2020-11-19 16:11:37,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50013} closed  
 
 2020-11-19 16:11:37,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 16:11:37,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:11:37,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:11:37,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:11:37,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : []  
 
 2020-11-19 16:11:37,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : []  
 
 2020-11-19 16:11:37,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 2.5892 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:11:37,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50014} open  
 
 2020-11-19 16:11:37,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50014} Header: [count(0)]  
 
 2020-11-19 16:11:37,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50014} Result: [1]  
 
 2020-11-19 16:11:37,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50014} closed  
 
 2020-11-19 16:11:37,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-19 16:11:37,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:11:37,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Parameters : [4]  
 
 2020-11-19 16:11:37,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Types : [INTEGER]  
 
 2020-11-19 16:11:37,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} executed. 6.4102 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:11:37,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50015} open  
 
 2020-11-19 16:11:37,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50015} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 16:11:37,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 16:11:37,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50015} closed  
 
 2020-11-19 16:11:37,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} clearParameters.   
 
 2020-11-19 16:11:37,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:12:03,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:12:03,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Parameters : [1]  
 
 2020-11-19 16:12:03,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 16:12:03,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} executed. 2.0708 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 16:12:03,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} open  
 
 2020-11-19 16:12:03,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Header: [count(0)]  
 
 2020-11-19 16:12:03,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Result: [1]  
 
 2020-11-19 16:12:03,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} closed  
 
 2020-11-19 16:12:03,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} clearParameters.   
 
 2020-11-19 16:12:03,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : [1, 5]  
 
 2020-11-19 16:12:03,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : [INTEGER, INTEGER]  
 
 2020-11-19 16:12:03,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 2.3306 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 16:12:03,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50017} open  
 
 2020-11-19 16:12:03,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50017} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 16:12:03,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50017} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 16:12:03,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50017} closed  
 
 2020-11-19 16:12:03,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 16:12:03,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:12:04,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:12:04,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 16:12:04,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Parameters : [11]  
 
 2020-11-19 16:12:04,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Types : [INTEGER]  
 
 2020-11-19 16:12:04,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} executed. 2.4678 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 16:12:04,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50018} open  
 
 2020-11-19 16:12:04,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50018} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 16:12:04,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50018} Result: [11, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 16:12:04,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20015, rs-50018} closed  
 
 2020-11-19 16:12:04,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} clearParameters.   
 
 2020-11-19 16:12:04,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:12:04,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:12:04,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : []  
 
 2020-11-19 16:12:04,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : []  
 
 2020-11-19 16:12:04,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 2.8349 millis. select * from t_tages  
 
 2020-11-19 16:12:04,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} open  
 
 2020-11-19 16:12:04,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} Header: [id, tage]  
 
 2020-11-19 16:12:04,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} Result: [1, 学习日记]  
 
 2020-11-19 16:12:04,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} Result: [2, 错误笔记]  
 
 2020-11-19 16:12:04,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} Result: [3, 数据库笔记]  
 
 2020-11-19 16:12:04,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} Result: [4, 程序运行日记]  
 
 2020-11-19 16:12:04,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} Result: [5, 开发日记]  
 
 2020-11-19 16:12:04,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} Result: [8, 开发手册]  
 
 2020-11-19 16:12:04,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} Result: [10, 搭建日记]  
 
 2020-11-19 16:12:04,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50019} closed  
 
 2020-11-19 16:12:04,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 16:12:04,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:12:04,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:12:04,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Parameters : []  
 
 2020-11-19 16:12:04,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Types : []  
 
 2020-11-19 16:12:04,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} executed. 2.95 millis. select * from t_types  
 
 2020-11-19 16:12:04,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} open  
 
 2020-11-19 16:12:04,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} Header: [id, name]  
 
 2020-11-19 16:12:04,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} Result: [8, 方法论]  
 
 2020-11-19 16:12:04,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} Result: [9, 理论类]  
 
 2020-11-19 16:12:04,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} Result: [21, 错误日记]  
 
 2020-11-19 16:12:04,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} Result: [23, 开发日记]  
 
 2020-11-19 16:12:04,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} Result: [24, 实践论]  
 
 2020-11-19 16:12:04,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} Result: [25, 想法论]  
 
 2020-11-19 16:12:04,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50020} closed  
 
 2020-11-19 16:12:04,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} clearParameters.   
 
 2020-11-19 16:12:04,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:12:14,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:12:14,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} created. update t_blog
         SET title='Java基本语法'
            ,
                content='##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='Thu Nov 19 16:12:14 CST 2020' 
        where id=?  
 
 2020-11-19 16:12:14,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Parameters : [11]  
 
 2020-11-19 16:12:14,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Types : [INTEGER]  
 
 2020-11-19 16:12:14,533 ERROR [com.alibaba.druid.filter.logging.Log4jFilter.statementLogError(Log4jFilter.java:152)] {conn-10006, pstmt-20016} execute error. update t_blog
         SET title='Java基本语法'
            ,
                content='##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='Thu Nov 19 16:12:14 CST 2020' 
        where id=?  
 com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Incorrect datetime value: 'Thu Nov 19 16:12:14 CST 2020' for column 'updatetime' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3461)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:654)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3459)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:497)
	at sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy112.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy110.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy73.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy74.update(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy75.update(Unknown Source)
	at com.example.blog.service.BaseServiceImpl.updateBlog(BaseServiceImpl.java:122)
	at com.example.blog.service.BolgServiceImpl.upDateBlog(BolgServiceImpl.java:93)
	at com.example.blog.controller.BlogController.updateSubmit(BlogController.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1590)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

 2020-11-19 16:12:14,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} clearParameters.   
 
 2020-11-19 16:12:14,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} closed  
 
 2020-11-19 16:12:14,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:12:14,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:12:14,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:24:47,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-702} connected  
 
 2020-11-19 16:24:47,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-703} connected  
 
 2020-11-19 16:24:47,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-704} connected  
 
 2020-11-19 16:24:47,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-705} connected  
 
 2020-11-19 16:24:47,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-706} connected  
 
 2020-11-19 16:24:47,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:24:47,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 16:24:47,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:24:47,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:24:47,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 39.8743 millis. select * from t_types  
 
 2020-11-19 16:24:47,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:24:47,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 16:24:47,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 16:24:47,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 16:24:47,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 16:24:47,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 16:24:47,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 16:24:47,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 16:24:47,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:24:47,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:24:47,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:24:47,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:24:47,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:24:47,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:24:47,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:24:47,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.6178 millis. select * from t_tages  
 
 2020-11-19 16:24:47,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:24:48,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:24:48,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:24:48,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:24:48,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:24:48,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:24:48,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:24:48,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:24:48,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:24:48,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:24:48,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:24:48,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:24:48,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:24:48,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:24:48,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:24:48,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:24:48,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:24:48,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:24:48,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.5679 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:24:48,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:24:48,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 16:24:48,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1]  
 
 2020-11-19 16:24:48,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:24:48,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:24:48,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:24:48,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 16:24:48,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 16:24:48,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.4632 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:24:48,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:24:48,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 16:24:48,214 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 16:24:48,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:24:48,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:24:48,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:26:33,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-707} connected  
 
 2020-11-19 16:26:33,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-708} connected  
 
 2020-11-19 16:26:33,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-709} connected  
 
 2020-11-19 16:26:33,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-710} connected  
 
 2020-11-19 16:26:33,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-711} connected  
 
 2020-11-19 16:26:33,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:26:34,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 16:26:34,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:26:34,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:26:34,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 12.606 millis. select * from t_types  
 
 2020-11-19 16:26:34,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:26:34,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 16:26:34,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 16:26:34,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 16:26:34,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 16:26:34,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 16:26:34,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 16:26:34,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 16:26:34,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:26:34,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:26:34,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:26:34,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:26:34,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:26:34,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:26:34,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:26:34,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.3475 millis. select * from t_tages  
 
 2020-11-19 16:26:34,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:26:34,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:26:34,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:26:34,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:26:34,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:26:34,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:26:34,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:26:34,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:26:34,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:26:34,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:26:34,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:26:34,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:26:34,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:26:34,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:26:34,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:26:34,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:26:34,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:26:34,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:26:34,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.679099 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:26:34,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:26:34,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 16:26:34,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1]  
 
 2020-11-19 16:26:34,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:26:34,279 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:26:34,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.createtime, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:26:34,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 16:26:34,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 16:26:34,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.779199 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.createtime, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:26:34,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:26:34,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, createtime, blogdescribe, id, publish, recommend]  
 
 2020-11-19 16:26:34,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 2020-11-19 16:11:12.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 16:26:34,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:26:34,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:26:34,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:31:08,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-712} connected  
 
 2020-11-19 16:31:08,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-713} connected  
 
 2020-11-19 16:31:08,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-714} connected  
 
 2020-11-19 16:31:08,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-715} connected  
 
 2020-11-19 16:31:08,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-716} connected  
 
 2020-11-19 16:31:08,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:31:08,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 16:31:08,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:31:08,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:31:08,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 11.506399 millis. select * from t_types  
 
 2020-11-19 16:31:08,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:31:08,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 16:31:08,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 16:31:08,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 16:31:08,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 16:31:08,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 16:31:08,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 16:31:08,420 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 16:31:08,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:31:08,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:31:08,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:31:08,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:31:08,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:31:08,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:31:08,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:31:08,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.527299 millis. select * from t_tages  
 
 2020-11-19 16:31:08,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:31:08,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:31:08,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:31:08,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:31:08,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:31:08,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:31:08,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:31:08,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:31:08,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:31:08,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:31:08,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:31:08,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:31:08,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:31:08,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:31:08,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:31:08,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:31:08,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:31:08,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:31:08,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.9645 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:31:08,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:31:08,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 16:31:08,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1]  
 
 2020-11-19 16:31:08,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:31:08,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:31:08,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.createtime, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:31:08,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 16:31:08,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 16:31:08,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.328801 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.createtime, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:31:08,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:31:08,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, createtime, blogdescribe, id, publish, recommend]  
 
 2020-11-19 16:31:08,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 2020-11-19 16:11:12.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 16:31:08,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:31:08,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:31:08,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:31:59,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-717} connected  
 
 2020-11-19 16:31:59,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-718} connected  
 
 2020-11-19 16:31:59,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-719} connected  
 
 2020-11-19 16:31:59,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-720} connected  
 
 2020-11-19 16:31:59,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-721} connected  
 
 2020-11-19 16:31:59,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:31:59,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 16:31:59,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:31:59,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:31:59,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.1746 millis. select * from t_types  
 
 2020-11-19 16:31:59,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:31:59,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 16:31:59,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 16:31:59,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 16:31:59,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 16:31:59,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 16:31:59,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 16:31:59,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 16:31:59,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:31:59,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:31:59,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:31:59,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:31:59,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:31:59,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:31:59,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:31:59,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.634699 millis. select * from t_tages  
 
 2020-11-19 16:31:59,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:31:59,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:31:59,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:31:59,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:31:59,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:31:59,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:31:59,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:31:59,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:31:59,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:31:59,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:31:59,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:31:59,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:31:59,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:31:59,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:31:59,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:31:59,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:31:59,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:31:59,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:31:59,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.970299 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:31:59,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:31:59,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 16:31:59,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1]  
 
 2020-11-19 16:31:59,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:31:59,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:31:59,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.createtime, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:31:59,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 16:31:59,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 16:31:59,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.4818 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.createtime, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:31:59,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:31:59,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, createtime, blogdescribe, id, publish, recommend]  
 
 2020-11-19 16:31:59,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 2020-11-19 16:11:12.0, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 16:31:59,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:31:59,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:31:59,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:32:56,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-722} connected  
 
 2020-11-19 16:32:56,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-723} connected  
 
 2020-11-19 16:32:56,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-724} connected  
 
 2020-11-19 16:32:56,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-725} connected  
 
 2020-11-19 16:32:56,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-726} connected  
 
 2020-11-19 16:32:56,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:32:56,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 16:32:56,351 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:32:56,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:32:56,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.4384 millis. select * from t_types  
 
 2020-11-19 16:32:56,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:32:56,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 16:32:56,379 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 16:32:56,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 16:32:56,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 16:32:56,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 16:32:56,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 16:32:56,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 16:32:56,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:32:56,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:32:56,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:32:56,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:32:56,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:32:56,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:32:56,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:32:56,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.410899 millis. select * from t_tages  
 
 2020-11-19 16:32:56,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:32:56,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:32:56,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:32:56,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:32:56,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:32:56,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:32:56,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:32:56,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:32:56,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:32:56,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:32:56,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:32:56,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:32:56,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:32:56,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:32:56,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:32:56,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:32:56,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:32:56,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:32:56,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.8667 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:32:56,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:32:56,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 16:32:56,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1]  
 
 2020-11-19 16:32:56,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:32:56,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:32:56,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:32:56,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 16:32:56,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 16:32:56,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.963101 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:32:56,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:32:56,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 16:32:56,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 16:32:56,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:32:56,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:32:56,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:38:24,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-727} connected  
 
 2020-11-19 16:38:24,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-728} connected  
 
 2020-11-19 16:38:24,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-729} connected  
 
 2020-11-19 16:38:24,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-730} connected  
 
 2020-11-19 16:38:24,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-731} connected  
 
 2020-11-19 16:38:24,403 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:38:24,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 16:38:24,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:38:24,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:38:24,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.530999 millis. select * from t_types  
 
 2020-11-19 16:38:24,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:38:24,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 16:38:24,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 16:38:24,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 16:38:24,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 16:38:24,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 16:38:24,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 16:38:24,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 16:38:24,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:38:24,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:38:24,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:38:24,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:38:24,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:38:24,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:38:24,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:38:24,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.7364 millis. select * from t_tages  
 
 2020-11-19 16:38:24,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:38:24,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:38:24,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:38:24,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:38:24,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:38:24,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:38:24,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:38:24,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:38:24,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:38:24,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:38:24,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:38:24,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:38:24,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:38:24,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:38:24,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:38:24,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:38:24,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:38:24,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:38:24,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.087 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:38:24,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:38:24,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 16:38:24,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1]  
 
 2020-11-19 16:38:24,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:38:24,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:38:25,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:38:25,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 16:38:25,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 16:38:25,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 11.1284 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:38:25,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:38:25,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 16:38:25,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 16:38:25,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:38:25,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:38:25,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:41:58,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-732} connected  
 
 2020-11-19 16:41:58,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-733} connected  
 
 2020-11-19 16:41:58,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-734} connected  
 
 2020-11-19 16:41:58,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-735} connected  
 
 2020-11-19 16:41:58,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-736} connected  
 
 2020-11-19 16:41:58,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:41:58,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 16:41:58,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 16:41:58,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 16:41:58,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 12.4699 millis. select * from t_types  
 
 2020-11-19 16:41:58,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:41:58,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 16:41:58,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 16:41:58,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 16:41:58,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 16:41:58,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 16:41:58,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 16:41:58,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 16:41:58,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:41:58,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:41:58,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:41:58,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:41:58,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:41:58,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:41:58,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:41:58,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.538399 millis. select * from t_tages  
 
 2020-11-19 16:41:58,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:41:58,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:41:58,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:41:58,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:41:58,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:41:58,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:41:58,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:41:58,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:41:58,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:41:58,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:41:58,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:41:58,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:41:58,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:41:58,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:41:58,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:41:58,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:41:58,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:41:58,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:41:58,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 7.9117 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 16:41:58,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:41:58,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 16:41:58,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1]  
 
 2020-11-19 16:41:58,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:41:58,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:41:58,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:41:58,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 16:41:58,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 16:41:58,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0808 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 16:41:58,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:41:58,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 16:41:58,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 16:41:58,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:41:58,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:41:58,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:37,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-737} connected  
 
 2020-11-19 16:50:37,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-738} connected  
 
 2020-11-19 16:50:37,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-739} connected  
 
 2020-11-19 16:50:37,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-740} connected  
 
 2020-11-19 16:50:37,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-741} connected  
 
 2020-11-19 16:50:37,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:38,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-19 16:50:38,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-19 16:50:38,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-19 16:50:38,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 47.1814 millis. select * from t_user where username=?  
 
 2020-11-19 16:50:38,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:50:38,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 16:50:38,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 16:50:38,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:50:38,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:50:38,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:42,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:42,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:42,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:42,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 16:50:42,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [1]  
 
 2020-11-19 16:50:42,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-19 16:50:42,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.3457 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 16:50:42,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:50:42,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 16:50:42,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1]  
 
 2020-11-19 16:50:42,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:50:42,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:50:42,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 16:50:42,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [1, 5]  
 
 2020-11-19 16:50:42,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER, INTEGER]  
 
 2020-11-19 16:50:42,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.9853 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 16:50:42,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:50:42,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 16:50:42,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 16:50:42,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:50:42,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:50:42,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:43,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:43,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 16:50:43,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [11]  
 
 2020-11-19 16:50:43,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 16:50:43,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 6.1789 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 16:50:43,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:50:43,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 16:50:43,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [11, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 16:50:43,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:50:43,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 16:50:43,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:43,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:43,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_tages  
 
 2020-11-19 16:50:43,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 16:50:43,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 16:50:43,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.3251 millis. select * from t_tages  
 
 2020-11-19 16:50:43,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 16:50:43,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, tage]  
 
 2020-11-19 16:50:43,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, 学习日记]  
 
 2020-11-19 16:50:43,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [2, 错误笔记]  
 
 2020-11-19 16:50:43,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [3, 数据库笔记]  
 
 2020-11-19 16:50:43,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [4, 程序运行日记]  
 
 2020-11-19 16:50:43,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [5, 开发日记]  
 
 2020-11-19 16:50:43,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [8, 开发手册]  
 
 2020-11-19 16:50:43,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-19 16:50:43,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 16:50:43,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 16:50:43,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:43,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:43,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_types  
 
 2020-11-19 16:50:43,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 16:50:43,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 16:50:43,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.732599 millis. select * from t_types  
 
 2020-11-19 16:50:43,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-19 16:50:43,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, name]  
 
 2020-11-19 16:50:43,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [8, 方法论]  
 
 2020-11-19 16:50:43,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, 理论类]  
 
 2020-11-19 16:50:43,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [21, 错误日记]  
 
 2020-11-19 16:50:43,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [23, 开发日记]  
 
 2020-11-19 16:50:43,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [24, 实践论]  
 
 2020-11-19 16:50:43,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [25, 想法论]  
 
 2020-11-19 16:50:43,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-19 16:50:43,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 16:50:43,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:51,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:51,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java基本语法'
            ,
                content='##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 16:50:51.821' 
        where id=?  
 
 2020-11-19 16:50:51,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-19 16:50:51,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 16:50:51,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 12.182199 millis. update t_blog
         SET title='Java基本语法'
            ,
                content='##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 16:50:51.821' 
        where id=?  
 
 2020-11-19 16:50:51,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 16:50:51,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:51,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:51,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. delete from t_blog_tages where bid=?  
 
 2020-11-19 16:50:51,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-19 16:50:51,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-19 16:50:51,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 7.1412 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 16:50:51,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 16:50:51,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:51,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:51,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. delete from t_blog_type where bid=?  
 
 2020-11-19 16:50:51,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [11]  
 
 2020-11-19 16:50:51,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 16:50:51,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 7.9198 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 16:50:51,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 16:50:51,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:51,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:51,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:50:51,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 1, 11]  
 
 2020-11-19 16:50:51,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 16:50:51,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 6.1624 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:50:51,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-19 16:50:51,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:51,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:51,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 10, 11]  
 
 2020-11-19 16:50:51,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 16:50:51,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 6.242201 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:50:51,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-19 16:50:51,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:51,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:51,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:50:51,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [null, 11, 8]  
 
 2020-11-19 16:50:51,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 16:50:51,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 6.6442 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 16:50:51,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-19 16:50:51,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:50:51,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:50:51,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [1]  
 
 2020-11-19 16:50:51,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-19 16:50:51,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.895 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 16:50:51,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-19 16:50:51,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [count(0)]  
 
 2020-11-19 16:50:51,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [1]  
 
 2020-11-19 16:50:51,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-19 16:50:51,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:50:51,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [1, 5]  
 
 2020-11-19 16:50:51,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER, INTEGER]  
 
 2020-11-19 16:50:51,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.4593 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 16:50:51,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} open  
 
 2020-11-19 16:50:51,992 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 16:50:51,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 16:50:51,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} closed  
 
 2020-11-19 16:50:51,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:50:51,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:52:32,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-745} connected  
 
 2020-11-19 16:52:32,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-746} connected  
 
 2020-11-19 16:52:32,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-747} connected  
 
 2020-11-19 16:52:32,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-748} connected  
 
 2020-11-19 16:52:32,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-749} connected  
 
 2020-11-19 16:52:32,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:52:33,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-19 16:52:33,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-19 16:52:33,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-19 16:52:33,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 49.1544 millis. select * from t_user where username=?  
 
 2020-11-19 16:52:33,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 16:52:33,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 16:52:33,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 16:52:33,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 16:52:33,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 16:52:33,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:52:35,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:52:35,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 16:52:35,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 16:52:35,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 16:52:35,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.6827 millis. select * from t_tages  
 
 2020-11-19 16:52:35,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 16:52:35,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 16:52:35,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 16:52:35,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 16:52:35,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 16:52:35,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 16:52:35,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 16:52:35,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 16:52:35,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 16:52:35,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 16:52:35,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 16:52:35,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:52:35,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 16:52:35,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_types  
 
 2020-11-19 16:52:35,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 16:52:35,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 16:52:35,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.752 millis. select * from t_types  
 
 2020-11-19 16:52:35,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 16:52:35,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, name]  
 
 2020-11-19 16:52:35,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 方法论]  
 
 2020-11-19 16:52:35,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [9, 理论类]  
 
 2020-11-19 16:52:35,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [21, 错误日记]  
 
 2020-11-19 16:52:35,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [23, 开发日记]  
 
 2020-11-19 16:52:35,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [24, 实践论]  
 
 2020-11-19 16:52:35,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [25, 想法论]  
 
 2020-11-19 16:52:35,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 16:52:35,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 16:52:35,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 16:59:58,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-19 16:59:58,953 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 16:59:58,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-19 16:59:58,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-19 16:59:58,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-19 16:59:58,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-750} connected  
 
 2020-11-19 16:59:58,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:59:58,988 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} created. select * from t_tages  
 
 2020-11-19 16:59:58,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : []  
 
 2020-11-19 16:59:58,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : []  
 
 2020-11-19 16:59:58,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} executed. 5.1712 millis. select * from t_tages  
 
 2020-11-19 16:59:58,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} open  
 
 2020-11-19 16:59:58,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Header: [id, tage]  
 
 2020-11-19 16:59:58,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [1, 学习日记]  
 
 2020-11-19 16:59:59,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [2, 错误笔记]  
 
 2020-11-19 16:59:59,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [3, 数据库笔记]  
 
 2020-11-19 16:59:59,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [4, 程序运行日记]  
 
 2020-11-19 16:59:59,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [5, 开发日记]  
 
 2020-11-19 16:59:59,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [8, 开发手册]  
 
 2020-11-19 16:59:59,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [10, 搭建日记]  
 
 2020-11-19 16:59:59,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} closed  
 
 2020-11-19 16:59:59,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-19 16:59:59,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 16:59:59,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 16:59:59,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} created. select * from t_types  
 
 2020-11-19 16:59:59,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Parameters : []  
 
 2020-11-19 16:59:59,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Types : []  
 
 2020-11-19 16:59:59,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} executed. 2.398401 millis. select * from t_types  
 
 2020-11-19 16:59:59,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} open  
 
 2020-11-19 16:59:59,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Header: [id, name]  
 
 2020-11-19 16:59:59,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 16:59:59,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 16:59:59,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 16:59:59,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 16:59:59,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 16:59:59,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 16:59:59,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} closed  
 
 2020-11-19 16:59:59,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} clearParameters.   
 
 2020-11-19 16:59:59,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:00:12,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:00:12,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         , 
            createtime
         , 
            blogdescribe
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : [null, Java笔记, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 是, 0, true, true, true, true, true, 2020-11-19 17:00:11.983, 这是一些有关于java基础的内容]  
 
 2020-11-19 17:00:12,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : [OTHER, VARCHAR, VARCHAR, VARCHAR, VARCHAR, INTEGER, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, TIMESTAMP, VARCHAR]  
 
 2020-11-19 17:00:12,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 7.8116 millis. insert into t_blog
         (  
            id
         , 
            title
         , 
            content
         , 
            firstpicture
         , 
            flag
         , 
            views
         , 
            appreciation
         , 
            Opencomment
         , 
            sharestatment
         , 
            publish
         , 
            recommend
         , 
            createtime
         , 
            blogdescribe
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 17:00:12,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:00:12,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:00:12,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. select id from t_blog where title=?  
 
 2020-11-19 17:00:12,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [Java笔记]  
 
 2020-11-19 17:00:12,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [VARCHAR]  
 
 2020-11-19 17:00:12,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.421099 millis. select id from t_blog where title=?  
 
 2020-11-19 17:00:12,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50005} open  
 
 2020-11-19 17:00:12,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50005} Header: [id]  
 
 2020-11-19 17:00:12,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50005} Result: [12]  
 
 2020-11-19 17:00:12,048 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50005} closed  
 
 2020-11-19 17:00:12,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 17:00:12,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:00:12,051 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:00:12,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [null, 1, 12]  
 
 2020-11-19 17:00:12,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 17:00:12,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 6.440799 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 17:00:12,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:00:12,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:00:12,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [null, 5, 12]  
 
 2020-11-19 17:00:12,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 17:00:12,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 5.6391 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 17:00:12,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:00:12,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:00:12,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [null, 12, 8]  
 
 2020-11-19 17:00:12,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 17:00:12,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 6.453401 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 17:00:12,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:00:12,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:00:12,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} created. insert into t_user_blog
         (  
            id
         , 
            uid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Parameters : [null, 1, 12]  
 
 2020-11-19 17:00:12,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 17:00:12,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} executed. 7.5019 millis. insert into t_user_blog
         (  
            id
         , 
            uid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 17:00:12,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} clearParameters.   
 
 2020-11-19 17:00:12,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:00:12,128 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:00:12,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:00:12,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:00:12,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 17:00:12,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : [1]  
 
 2020-11-19 17:00:12,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : [INTEGER]  
 
 2020-11-19 17:00:12,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 3.753 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 17:00:12,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50006} open  
 
 2020-11-19 17:00:12,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50006} Header: [count(0)]  
 
 2020-11-19 17:00:12,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50006} Result: [2]  
 
 2020-11-19 17:00:12,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50006} closed  
 
 2020-11-19 17:00:12,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 17:00:12,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 17:00:12,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Parameters : [1, 5]  
 
 2020-11-19 17:00:12,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Types : [INTEGER, INTEGER]  
 
 2020-11-19 17:00:12,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} executed. 3.2356 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 17:00:12,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50007} open  
 
 2020-11-19 17:00:12,245 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50007} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 17:00:12,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50007} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 17:00:12,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50007} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 17:00:12,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50007} closed  
 
 2020-11-19 17:00:12,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} clearParameters.   
 
 2020-11-19 17:00:12,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:01:51,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} closed  
 
 2020-11-19 17:01:51,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007,procId-751} connected  
 
 2020-11-19 17:01:51,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 17:01:51,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20012} created. select * from t_tages  
 
 2020-11-19 17:01:51,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20012} Parameters : []  
 
 2020-11-19 17:01:51,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20012} Types : []  
 
 2020-11-19 17:01:51,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20012} executed. 2.6826 millis. select * from t_tages  
 
 2020-11-19 17:01:51,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} open  
 
 2020-11-19 17:01:51,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} Header: [id, tage]  
 
 2020-11-19 17:01:51,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} Result: [1, 学习日记]  
 
 2020-11-19 17:01:51,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} Result: [2, 错误笔记]  
 
 2020-11-19 17:01:51,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} Result: [3, 数据库笔记]  
 
 2020-11-19 17:01:51,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} Result: [4, 程序运行日记]  
 
 2020-11-19 17:01:51,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} Result: [5, 开发日记]  
 
 2020-11-19 17:01:51,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} Result: [8, 开发手册]  
 
 2020-11-19 17:01:51,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} Result: [10, 搭建日记]  
 
 2020-11-19 17:01:51,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20012, rs-50008} closed  
 
 2020-11-19 17:01:51,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20012} clearParameters.   
 
 2020-11-19 17:01:51,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 17:01:51,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 17:01:51,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20013} created. select * from t_types  
 
 2020-11-19 17:01:51,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20013} Parameters : []  
 
 2020-11-19 17:01:51,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20013} Types : []  
 
 2020-11-19 17:01:51,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20013} executed. 1.234901 millis. select * from t_types  
 
 2020-11-19 17:01:51,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} open  
 
 2020-11-19 17:01:51,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} Header: [id, name]  
 
 2020-11-19 17:01:51,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} Result: [8, 方法论]  
 
 2020-11-19 17:01:51,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} Result: [9, 理论类]  
 
 2020-11-19 17:01:51,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} Result: [21, 错误日记]  
 
 2020-11-19 17:01:51,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} Result: [23, 开发日记]  
 
 2020-11-19 17:01:51,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} Result: [24, 实践论]  
 
 2020-11-19 17:01:51,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} Result: [25, 想法论]  
 
 2020-11-19 17:01:51,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20013, rs-50009} closed  
 
 2020-11-19 17:01:51,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20013} clearParameters.   
 
 2020-11-19 17:01:51,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 17:04:51,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-752} connected  
 
 2020-11-19 17:04:51,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-753} connected  
 
 2020-11-19 17:04:51,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-754} connected  
 
 2020-11-19 17:04:51,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-755} connected  
 
 2020-11-19 17:04:51,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-756} connected  
 
 2020-11-19 17:04:51,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:04:51,865 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 17:04:51,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 17:04:51,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 17:04:51,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 26.0214 millis. select * from t_types  
 
 2020-11-19 17:04:51,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 17:04:51,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 17:04:51,942 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 17:04:51,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 17:04:51,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 17:04:51,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 17:04:51,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 17:04:51,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 17:04:51,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 17:04:51,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 17:04:51,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:04:51,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:04:51,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 17:04:51,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 17:04:51,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 17:04:51,984 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.404 millis. select * from t_tages  
 
 2020-11-19 17:04:51,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 17:04:51,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 17:04:51,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 17:04:51,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 17:04:51,991 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 17:04:51,993 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 17:04:51,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 17:04:51,995 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 17:04:51,997 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 17:04:51,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 17:04:52,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 17:04:52,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:04:52,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:04:52,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:04:52,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:04:52,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 17:04:52,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 17:04:52,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 17:04:52,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.051201 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 17:04:52,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 17:04:52,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 17:04:52,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 17:04:52,197 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 17:04:52,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 17:04:52,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 17:04:52,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 17:04:52,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 17:04:52,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 8.3025 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 17:04:52,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 17:04:52,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 17:04:52,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 17:04:52,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 17:04:52,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 17:04:52,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 17:04:52,231 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:05:58,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-19 17:05:58,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 17:05:58,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-19 17:05:58,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-19 17:05:58,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-19 17:05:58,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-757} connected  
 
 2020-11-19 17:05:58,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:05:58,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 17:05:58,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 17:05:58,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 17:05:58,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} executed. 3.51 millis. select * from t_user where username=?  
 
 2020-11-19 17:05:58,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} open  
 
 2020-11-19 17:05:58,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 17:05:58,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 17:05:58,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} closed  
 
 2020-11-19 17:05:58,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} clearParameters.   
 
 2020-11-19 17:05:58,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:06:11,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:06:11,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. select * from t_tages  
 
 2020-11-19 17:06:11,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 17:06:11,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 17:06:11,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.900301 millis. select * from t_tages  
 
 2020-11-19 17:06:11,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} open  
 
 2020-11-19 17:06:11,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Header: [id, tage]  
 
 2020-11-19 17:06:11,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 17:06:11,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 17:06:11,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 17:06:11,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 17:06:11,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 17:06:11,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 17:06:11,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 17:06:11,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} closed  
 
 2020-11-19 17:06:11,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 17:06:11,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:06:11,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 17:06:11,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. select * from t_types  
 
 2020-11-19 17:06:11,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 17:06:11,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 17:06:11,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 1.6896 millis. select * from t_types  
 
 2020-11-19 17:06:11,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} open  
 
 2020-11-19 17:06:11,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Header: [id, name]  
 
 2020-11-19 17:06:11,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [8, 方法论]  
 
 2020-11-19 17:06:11,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [9, 理论类]  
 
 2020-11-19 17:06:11,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [21, 错误日记]  
 
 2020-11-19 17:06:11,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [23, 开发日记]  
 
 2020-11-19 17:06:11,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [24, 实践论]  
 
 2020-11-19 17:06:11,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [25, 想法论]  
 
 2020-11-19 17:06:11,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} closed  
 
 2020-11-19 17:06:11,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 17:06:11,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 17:07:22,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-758} connected  
 
 2020-11-19 17:07:22,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-759} connected  
 
 2020-11-19 17:07:22,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-760} connected  
 
 2020-11-19 17:07:22,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-761} connected  
 
 2020-11-19 17:07:22,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-762} connected  
 
 2020-11-19 17:07:22,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:07:22,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 17:07:22,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 17:07:22,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 17:07:22,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.3792 millis. select * from t_types  
 
 2020-11-19 17:07:22,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 17:07:22,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 17:07:22,994 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 17:07:22,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 17:07:23,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 17:07:23,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 17:07:23,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 17:07:23,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 17:07:23,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 17:07:23,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 17:07:23,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:07:23,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:07:23,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 17:07:23,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 17:07:23,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 17:07:23,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.599699 millis. select * from t_tages  
 
 2020-11-19 17:07:23,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 17:07:23,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 17:07:23,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 17:07:23,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 17:07:23,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 17:07:23,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 17:07:23,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 17:07:23,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 17:07:23,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 17:07:23,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 17:07:23,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 17:07:23,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:07:23,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:07:23,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:07:23,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:07:23,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 17:07:23,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 17:07:23,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 17:07:23,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.593301 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 17:07:23,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 17:07:23,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 17:07:23,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 17:07:23,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 17:07:23,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 17:07:23,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 17:07:23,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 17:07:23,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 17:07:23,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.0843 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 17:07:23,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 17:07:23,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 17:07:23,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 17:07:23,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 17:07:23,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 17:07:23,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 17:07:23,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:07:23,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:07:23,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 17:07:23,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 17:07:23,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 4.0767 millis. select * from t_types  
 
 2020-11-19 17:07:23,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 17:07:23,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 17:07:23,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 17:07:23,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 17:07:23,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 17:07:23,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 17:07:23,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 17:07:23,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 17:07:23,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 17:07:23,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 17:07:23,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:07:23,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:07:23,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 17:07:23,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 17:07:23,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.826899 millis. select * from t_tages  
 
 2020-11-19 17:07:23,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 17:07:23,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 17:07:23,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 17:07:23,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 17:07:23,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 17:07:23,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 17:07:23,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 17:07:23,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 17:07:23,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 17:07:23,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 17:07:23,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 17:07:23,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:07:23,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:07:23,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 17:07:23,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 17:07:23,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4438 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 17:07:23,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 17:07:23,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 17:07:23,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-19 17:07:23,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 17:07:23,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 17:07:23,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 17:07:23,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 17:07:23,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.1114 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 17:07:23,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 17:07:23,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 17:07:23,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 17:07:23,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 17:07:23,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 17:07:23,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 17:07:23,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:07:47,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:07:47,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 17:07:47,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 17:07:47,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 17:07:47,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2907 millis. select * from t_user where username=?  
 
 2020-11-19 17:07:47,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-19 17:07:47,389 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 17:07:47,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 17:07:47,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-19 17:07:47,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 17:07:47,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:06,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-763} connected  
 
 2020-11-19 17:12:06,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-764} connected  
 
 2020-11-19 17:12:06,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-765} connected  
 
 2020-11-19 17:12:06,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-766} connected  
 
 2020-11-19 17:12:06,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-767} connected  
 
 2020-11-19 17:12:06,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:06,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 17:12:06,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 17:12:06,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 17:12:06,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 13.6044 millis. select * from t_types  
 
 2020-11-19 17:12:06,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 17:12:06,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 17:12:06,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 17:12:06,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 17:12:06,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 17:12:06,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 17:12:06,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 17:12:06,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 17:12:06,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 17:12:06,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 17:12:06,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:06,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:06,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 17:12:06,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 17:12:06,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 17:12:06,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.091499 millis. select * from t_tages  
 
 2020-11-19 17:12:06,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 17:12:06,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 17:12:06,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 17:12:06,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 17:12:06,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 17:12:06,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 17:12:06,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 17:12:06,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 17:12:06,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 17:12:06,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 17:12:06,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 17:12:06,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:06,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:06,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:06,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:06,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 17:12:06,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 17:12:06,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 17:12:06,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7049 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 17:12:06,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 17:12:06,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 17:12:06,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 17:12:06,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 17:12:06,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 17:12:06,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 17:12:06,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 17:12:06,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 17:12:06,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.936199 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 17:12:06,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 17:12:06,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 17:12:06,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 17:12:06,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 17:12:06,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 17:12:06,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 17:12:06,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:22,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:22,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 17:12:22,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 17:12:22,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 17:12:22,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 7.7825 millis. select * from t_user where username=?  
 
 2020-11-19 17:12:22,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 17:12:22,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 17:12:22,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 17:12:22,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 17:12:22,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 17:12:22,161 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:32,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:32,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 17:12:32,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 17:12:32,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9512 millis. select * from t_tages  
 
 2020-11-19 17:12:32,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 17:12:32,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 17:12:32,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 17:12:32,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 17:12:32,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 17:12:32,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 17:12:32,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 17:12:32,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 17:12:32,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 17:12:32,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 17:12:32,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 17:12:32,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:32,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:32,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 17:12:32,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 17:12:32,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.1274 millis. select * from t_types  
 
 2020-11-19 17:12:32,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} open  
 
 2020-11-19 17:12:32,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Header: [id, name]  
 
 2020-11-19 17:12:32,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [8, 方法论]  
 
 2020-11-19 17:12:32,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [9, 理论类]  
 
 2020-11-19 17:12:32,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [21, 错误日记]  
 
 2020-11-19 17:12:32,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [23, 开发日记]  
 
 2020-11-19 17:12:32,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [24, 实践论]  
 
 2020-11-19 17:12:32,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} Result: [25, 想法论]  
 
 2020-11-19 17:12:32,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50006} closed  
 
 2020-11-19 17:12:32,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 17:12:32,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:48,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:48,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 17:12:48,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [1]  
 
 2020-11-19 17:12:48,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-19 17:12:48,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.1606 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 17:12:48,172 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} open  
 
 2020-11-19 17:12:48,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Header: [count(0)]  
 
 2020-11-19 17:12:48,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} Result: [2]  
 
 2020-11-19 17:12:48,176 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50007} closed  
 
 2020-11-19 17:12:48,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 17:12:48,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 17:12:48,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [1, 5]  
 
 2020-11-19 17:12:48,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER, INTEGER]  
 
 2020-11-19 17:12:48,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 3.001901 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 17:12:48,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} open  
 
 2020-11-19 17:12:48,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 17:12:48,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 17:12:48,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 17:12:48,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50008} closed  
 
 2020-11-19 17:12:48,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 17:12:48,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:52,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:52,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 17:12:52,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 17:12:52,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.508799 millis. select * from t_types  
 
 2020-11-19 17:12:52,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} open  
 
 2020-11-19 17:12:52,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Header: [id, name]  
 
 2020-11-19 17:12:52,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [8, 方法论]  
 
 2020-11-19 17:12:52,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [9, 理论类]  
 
 2020-11-19 17:12:52,106 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [21, 错误日记]  
 
 2020-11-19 17:12:52,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [23, 开发日记]  
 
 2020-11-19 17:12:52,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [24, 实践论]  
 
 2020-11-19 17:12:52,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} Result: [25, 想法论]  
 
 2020-11-19 17:12:52,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50009} closed  
 
 2020-11-19 17:12:52,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 17:12:52,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:52,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:52,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 17:12:52,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 17:12:52,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.1011 millis. select * from t_tages  
 
 2020-11-19 17:12:52,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} open  
 
 2020-11-19 17:12:52,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Header: [id, tage]  
 
 2020-11-19 17:12:52,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [1, 学习日记]  
 
 2020-11-19 17:12:52,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-19 17:12:52,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-19 17:12:52,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-19 17:12:52,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [5, 开发日记]  
 
 2020-11-19 17:12:52,124 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [8, 开发手册]  
 
 2020-11-19 17:12:52,125 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [10, 搭建日记]  
 
 2020-11-19 17:12:52,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} closed  
 
 2020-11-19 17:12:52,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 17:12:52,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 17:12:52,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 17:12:52,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 17:12:52,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 17:12:52,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4418 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 17:12:52,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} open  
 
 2020-11-19 17:12:52,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Header: [count(0)]  
 
 2020-11-19 17:12:52,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [2]  
 
 2020-11-19 17:12:52,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} closed  
 
 2020-11-19 17:12:52,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 17:12:52,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 17:12:52,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 17:12:52,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.1385 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 17:12:52,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} open  
 
 2020-11-19 17:12:52,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 17:12:52,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 17:12:52,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 17:12:52,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} closed  
 
 2020-11-19 17:12:52,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 17:12:52,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:49:29,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-768} connected  
 
 2020-11-19 18:49:29,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-769} connected  
 
 2020-11-19 18:49:29,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-770} connected  
 
 2020-11-19 18:49:29,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-771} connected  
 
 2020-11-19 18:49:29,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-772} connected  
 
 2020-11-19 18:49:29,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:49:29,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 18:49:29,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 18:49:29,398 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 18:49:29,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 24.6815 millis. select * from t_types  
 
 2020-11-19 18:49:29,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 18:49:29,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 18:49:29,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 18:49:29,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 18:49:29,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 18:49:29,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 18:49:29,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 18:49:29,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 18:49:29,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 18:49:29,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 18:49:29,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:49:29,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:49:29,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 18:49:29,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 18:49:29,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 18:49:29,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.836501 millis. select * from t_tages  
 
 2020-11-19 18:49:29,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 18:49:29,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 18:49:29,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 18:49:29,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 18:49:29,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 18:49:29,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 18:49:29,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 18:49:29,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 18:49:29,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 18:49:29,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 18:49:29,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 18:49:29,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:49:29,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:49:29,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:49:29,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:49:29,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:49:29,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 18:49:29,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 18:49:29,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3139 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:49:29,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 18:49:29,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 18:49:29,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 18:49:29,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 18:49:29,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 18:49:29,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:49:29,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 18:49:29,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 18:49:29,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.038499 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:49:29,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 18:49:29,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 18:49:29,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 18:49:29,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 18:49:29,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 18:49:29,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 18:49:29,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:49:30,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:49:30,384 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 18:49:30,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 18:49:30,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 5.662199 millis. select * from t_types  
 
 2020-11-19 18:49:30,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 18:49:30,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 18:49:30,393 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 18:49:30,396 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 18:49:30,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 18:49:30,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 18:49:30,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 18:49:30,404 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 18:49:30,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 18:49:30,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 18:49:30,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:49:30,407 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:49:30,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 18:49:30,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 18:49:30,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.3576 millis. select * from t_tages  
 
 2020-11-19 18:49:30,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 18:49:30,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 18:49:30,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 18:49:30,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 18:49:30,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 18:49:30,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 18:49:30,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 18:49:30,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 18:49:30,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 18:49:30,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 18:49:30,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 18:49:30,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:49:30,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:49:30,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 18:49:30,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 18:49:30,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4938 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:49:30,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 18:49:30,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 18:49:30,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-19 18:49:30,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 18:49:30,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 18:49:30,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 18:49:30,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 18:49:30,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.4877 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:49:30,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 18:49:30,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 18:49:30,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 18:49:30,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 18:49:30,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 18:49:30,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 18:49:30,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:50:40,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-773} connected  
 
 2020-11-19 18:50:40,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-774} connected  
 
 2020-11-19 18:50:40,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-775} connected  
 
 2020-11-19 18:50:40,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-776} connected  
 
 2020-11-19 18:50:40,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-777} connected  
 
 2020-11-19 18:50:40,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:50:40,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 18:50:40,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 18:50:40,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 18:50:40,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 14.785299 millis. select * from t_types  
 
 2020-11-19 18:50:40,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 18:50:40,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 18:50:40,523 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 18:50:40,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 18:50:40,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 18:50:40,526 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 18:50:40,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 18:50:40,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 18:50:40,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 18:50:40,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 18:50:40,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:50:40,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:50:40,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 18:50:40,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 18:50:40,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 18:50:40,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.864 millis. select * from t_tages  
 
 2020-11-19 18:50:40,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 18:50:40,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 18:50:40,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 18:50:40,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 18:50:40,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 18:50:40,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 18:50:40,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 18:50:40,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 18:50:40,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 18:50:40,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 18:50:40,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 18:50:40,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:50:40,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:50:40,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:50:40,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:50:40,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:50:40,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 18:50:40,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 18:50:40,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.8008 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:50:40,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 18:50:40,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 18:50:40,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 18:50:40,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 18:50:40,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 18:50:40,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:50:40,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 18:50:40,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 18:50:40,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.8646 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:50:40,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 18:50:40,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 18:50:40,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 18:50:40,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 18:50:40,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 18:50:40,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 18:50:40,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:53:09,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-778} connected  
 
 2020-11-19 18:53:09,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-779} connected  
 
 2020-11-19 18:53:09,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-780} connected  
 
 2020-11-19 18:53:09,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-781} connected  
 
 2020-11-19 18:53:09,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-782} connected  
 
 2020-11-19 18:53:09,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:53:09,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 18:53:09,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 18:53:09,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 18:53:09,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 19.2899 millis. select * from t_types  
 
 2020-11-19 18:53:09,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 18:53:09,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 18:53:09,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 18:53:09,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 18:53:09,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 18:53:09,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 18:53:09,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 18:53:09,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 18:53:09,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 18:53:09,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 18:53:09,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:53:09,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:53:09,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 18:53:09,441 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 18:53:09,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 18:53:09,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.757499 millis. select * from t_tages  
 
 2020-11-19 18:53:09,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 18:53:09,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 18:53:09,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 18:53:09,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 18:53:09,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 18:53:09,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 18:53:09,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 18:53:09,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 18:53:09,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 18:53:09,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 18:53:09,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 18:53:09,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:53:09,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:53:09,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:53:09,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:53:09,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:53:09,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 18:53:09,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 18:53:09,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.631599 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:53:09,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 18:53:09,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 18:53:09,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 18:53:09,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 18:53:09,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 18:53:09,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:53:09,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 18:53:09,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 18:53:09,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.3945 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:53:09,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 18:53:09,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 18:53:09,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 18:53:09,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 18:53:09,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 18:53:09,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 18:53:09,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:55:13,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-783} connected  
 
 2020-11-19 18:55:13,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-784} connected  
 
 2020-11-19 18:55:13,188 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-785} connected  
 
 2020-11-19 18:55:13,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-786} connected  
 
 2020-11-19 18:55:13,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-787} connected  
 
 2020-11-19 18:55:13,223 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:55:13,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 18:55:13,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 18:55:13,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 18:55:13,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 16.842501 millis. select * from t_types  
 
 2020-11-19 18:55:13,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 18:55:13,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 18:55:13,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 18:55:13,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 18:55:13,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 18:55:13,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 18:55:13,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 18:55:13,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 18:55:13,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 18:55:13,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 18:55:13,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:55:13,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:55:13,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 18:55:13,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 18:55:13,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 18:55:13,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.363801 millis. select * from t_tages  
 
 2020-11-19 18:55:13,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 18:55:13,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 18:55:13,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 18:55:13,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 18:55:13,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 18:55:13,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 18:55:13,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 18:55:13,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 18:55:13,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 18:55:13,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 18:55:13,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 18:55:13,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:55:13,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:55:13,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:55:13,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:55:13,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:55:13,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 18:55:13,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 18:55:13,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.9138 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:55:13,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 18:55:13,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 18:55:13,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 18:55:13,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 18:55:13,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 18:55:13,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:55:13,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 18:55:13,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 18:55:13,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.9962 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:55:13,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 18:55:13,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 18:55:13,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 18:55:13,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 18:55:13,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 18:55:13,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 18:55:13,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:57:45,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-788} connected  
 
 2020-11-19 18:57:45,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-789} connected  
 
 2020-11-19 18:57:45,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-790} connected  
 
 2020-11-19 18:57:45,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-791} connected  
 
 2020-11-19 18:57:45,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-792} connected  
 
 2020-11-19 18:57:45,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:57:45,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 18:57:45,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 18:57:45,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 18:57:45,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 19.7167 millis. select * from t_types  
 
 2020-11-19 18:57:45,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 18:57:45,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 18:57:45,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 18:57:45,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 18:57:45,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 18:57:45,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 18:57:45,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 18:57:45,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 18:57:45,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 18:57:45,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 18:57:45,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:57:45,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:57:45,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 18:57:45,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 18:57:45,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 18:57:45,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.134701 millis. select * from t_tages  
 
 2020-11-19 18:57:45,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 18:57:45,730 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 18:57:45,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 18:57:45,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 18:57:45,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 18:57:45,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 18:57:45,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 18:57:45,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 18:57:45,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 18:57:45,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 18:57:45,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 18:57:45,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:57:45,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:57:45,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:57:45,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:57:45,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:57:45,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 18:57:45,864 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 18:57:45,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4553 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:57:45,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 18:57:45,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 18:57:45,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 18:57:45,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 18:57:45,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 18:57:45,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:57:45,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 18:57:45,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 18:57:45,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.781499 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:57:45,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 18:57:45,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 18:57:45,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 18:57:45,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 18:57:45,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 18:57:45,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 18:57:45,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:59:58,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-793} connected  
 
 2020-11-19 18:59:58,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-794} connected  
 
 2020-11-19 18:59:58,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-795} connected  
 
 2020-11-19 18:59:58,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-796} connected  
 
 2020-11-19 18:59:58,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-797} connected  
 
 2020-11-19 18:59:58,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:59:58,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 18:59:58,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 18:59:58,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 18:59:58,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 46.5381 millis. select * from t_types  
 
 2020-11-19 18:59:58,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 18:59:58,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 18:59:58,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 18:59:58,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 18:59:58,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 18:59:58,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 18:59:58,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 18:59:58,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 18:59:58,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 18:59:58,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 18:59:58,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:59:58,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:59:58,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 18:59:58,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 18:59:58,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 18:59:58,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.7456 millis. select * from t_tages  
 
 2020-11-19 18:59:58,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 18:59:58,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 18:59:58,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 18:59:58,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 18:59:58,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 18:59:58,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 18:59:58,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 18:59:58,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 18:59:58,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 18:59:58,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 18:59:58,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 18:59:58,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:59:58,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:59:58,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 18:59:58,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 18:59:59,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:59:59,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 18:59:59,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 18:59:59,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 5.4152 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 18:59:59,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 18:59:59,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 18:59:59,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 18:59:59,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 18:59:59,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 18:59:59,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:59:59,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 18:59:59,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 18:59:59,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 4.573499 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 18:59:59,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 18:59:59,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 18:59:59,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 18:59:59,126 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 18:59:59,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 18:59:59,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 18:59:59,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:06:37,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-798} connected  
 
 2020-11-19 19:06:37,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-799} connected  
 
 2020-11-19 19:06:37,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-800} connected  
 
 2020-11-19 19:06:37,370 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-801} connected  
 
 2020-11-19 19:06:37,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-802} connected  
 
 2020-11-19 19:06:37,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:06:37,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 19:06:37,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 19:06:37,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 19:06:37,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 40.603599 millis. select * from t_types  
 
 2020-11-19 19:06:37,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 19:06:37,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 19:06:37,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 19:06:37,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 19:06:37,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 19:06:37,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 19:06:37,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 19:06:37,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 19:06:37,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 19:06:37,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 19:06:37,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:06:37,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:06:37,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 19:06:37,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 19:06:37,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 19:06:37,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 5.6536 millis. select * from t_tages  
 
 2020-11-19 19:06:37,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 19:06:37,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 19:06:37,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 19:06:37,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 19:06:37,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 19:06:37,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 19:06:37,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 19:06:37,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 19:06:37,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 19:06:37,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 19:06:37,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 19:06:37,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:06:37,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:06:37,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:06:37,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:06:38,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:06:38,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 19:06:38,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 19:06:38,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.488399 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:06:38,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 19:06:38,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 19:06:38,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 19:06:38,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 19:06:38,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 19:06:38,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:06:38,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 19:06:38,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 19:06:38,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.252 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:06:38,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 19:06:38,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:06:38,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:06:38,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:06:38,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 19:06:38,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 19:06:38,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:06:38,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:06:38,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 19:06:38,711 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 19:06:38,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 8.8863 millis. select * from t_types  
 
 2020-11-19 19:06:38,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 19:06:38,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 19:06:38,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 19:06:38,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 19:06:38,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 19:06:38,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 19:06:38,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 19:06:38,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 19:06:38,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 19:06:38,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 19:06:38,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:06:38,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:06:38,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 19:06:38,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 19:06:38,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.887299 millis. select * from t_tages  
 
 2020-11-19 19:06:38,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 19:06:38,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 19:06:38,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 19:06:38,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 19:06:38,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 19:06:38,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 19:06:38,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 19:06:38,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 19:06:38,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 19:06:38,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 19:06:38,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 19:06:38,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:06:38,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:06:38,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 19:06:38,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 19:06:38,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.4854 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:06:38,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 19:06:38,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 19:06:38,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-19 19:06:38,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 19:06:38,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 19:06:38,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 19:06:38,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 19:06:38,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.0366 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:06:38,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 19:06:38,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:06:38,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:06:38,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:06:38,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 19:06:38,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 19:06:38,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:06:41,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:06:41,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:06:41,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [11]  
 
 2020-11-19 19:06:41,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-19 19:06:41,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.5258 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:06:41,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-19 19:06:41,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:06:41,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:06:41,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-19 19:06:41,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 19:06:41,743 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:08:09,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-19 19:08:09,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 19:08:09,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-19 19:08:09,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-19 19:08:09,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-19 19:08:09,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-803} connected  
 
 2020-11-19 19:08:09,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:09,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. select * from t_user where username=?  
 
 2020-11-19 19:08:09,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : [zhangsan]  
 
 2020-11-19 19:08:09,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : [VARCHAR]  
 
 2020-11-19 19:08:09,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 6.5586 millis. select * from t_user where username=?  
 
 2020-11-19 19:08:09,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} open  
 
 2020-11-19 19:08:09,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 19:08:09,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 19:08:09,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50009} closed  
 
 2020-11-19 19:08:09,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 19:08:09,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:12,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:12,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:08:12,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : [1]  
 
 2020-11-19 19:08:12,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 19:08:12,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.7854 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:08:12,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} open  
 
 2020-11-19 19:08:12,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Header: [count(0)]  
 
 2020-11-19 19:08:12,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} Result: [2]  
 
 2020-11-19 19:08:12,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50010} closed  
 
 2020-11-19 19:08:12,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 19:08:12,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:08:12,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [1, 5]  
 
 2020-11-19 19:08:12,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:08:12,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 2.8675 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:08:12,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} open  
 
 2020-11-19 19:08:12,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:08:12,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:08:12,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:08:12,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20007, rs-50011} closed  
 
 2020-11-19 19:08:12,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 19:08:12,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:13,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:13,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:08:13,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [11]  
 
 2020-11-19 19:08:13,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 19:08:13,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 3.0492 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:08:13,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} open  
 
 2020-11-19 19:08:13,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 19:08:13,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} Result: [11, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 19:08:13,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} Result: [11, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 10, 搭建日记, 8, 方法论]  
 
 2020-11-19 19:08:13,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20008, rs-50012} closed  
 
 2020-11-19 19:08:13,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 19:08:13,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:13,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:13,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} created. select * from t_tages  
 
 2020-11-19 19:08:13,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Parameters : []  
 
 2020-11-19 19:08:13,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Types : []  
 
 2020-11-19 19:08:13,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} executed. 1.9574 millis. select * from t_tages  
 
 2020-11-19 19:08:13,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} open  
 
 2020-11-19 19:08:13,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} Header: [id, tage]  
 
 2020-11-19 19:08:13,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} Result: [1, 学习日记]  
 
 2020-11-19 19:08:13,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} Result: [2, 错误笔记]  
 
 2020-11-19 19:08:13,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} Result: [3, 数据库笔记]  
 
 2020-11-19 19:08:13,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} Result: [4, 程序运行日记]  
 
 2020-11-19 19:08:13,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} Result: [5, 开发日记]  
 
 2020-11-19 19:08:13,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} Result: [8, 开发手册]  
 
 2020-11-19 19:08:13,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} Result: [10, 搭建日记]  
 
 2020-11-19 19:08:13,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50013} closed  
 
 2020-11-19 19:08:13,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} clearParameters.   
 
 2020-11-19 19:08:13,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:13,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:13,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} created. select * from t_types  
 
 2020-11-19 19:08:13,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : []  
 
 2020-11-19 19:08:13,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : []  
 
 2020-11-19 19:08:13,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 2.028499 millis. select * from t_types  
 
 2020-11-19 19:08:13,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} open  
 
 2020-11-19 19:08:13,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} Header: [id, name]  
 
 2020-11-19 19:08:13,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} Result: [8, 方法论]  
 
 2020-11-19 19:08:13,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} Result: [9, 理论类]  
 
 2020-11-19 19:08:13,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} Result: [21, 错误日记]  
 
 2020-11-19 19:08:13,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} Result: [23, 开发日记]  
 
 2020-11-19 19:08:13,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} Result: [24, 实践论]  
 
 2020-11-19 19:08:13,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} Result: [25, 想法论]  
 
 2020-11-19 19:08:13,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50014} closed  
 
 2020-11-19 19:08:13,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 19:08:13,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:25,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:25,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : []  
 
 2020-11-19 19:08:25,127 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : []  
 
 2020-11-19 19:08:25,130 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 3.056101 millis. select * from t_types  
 
 2020-11-19 19:08:25,131 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} open  
 
 2020-11-19 19:08:25,132 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} Header: [id, name]  
 
 2020-11-19 19:08:25,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} Result: [8, 方法论]  
 
 2020-11-19 19:08:25,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} Result: [9, 理论类]  
 
 2020-11-19 19:08:25,137 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} Result: [21, 错误日记]  
 
 2020-11-19 19:08:25,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} Result: [23, 开发日记]  
 
 2020-11-19 19:08:25,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} Result: [24, 实践论]  
 
 2020-11-19 19:08:25,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} Result: [25, 想法论]  
 
 2020-11-19 19:08:25,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50015} closed  
 
 2020-11-19 19:08:25,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 19:08:25,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:25,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:25,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Parameters : []  
 
 2020-11-19 19:08:25,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Types : []  
 
 2020-11-19 19:08:25,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} executed. 2.833199 millis. select * from t_tages  
 
 2020-11-19 19:08:25,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} open  
 
 2020-11-19 19:08:25,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Header: [id, tage]  
 
 2020-11-19 19:08:25,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Result: [1, 学习日记]  
 
 2020-11-19 19:08:25,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Result: [2, 错误笔记]  
 
 2020-11-19 19:08:25,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Result: [3, 数据库笔记]  
 
 2020-11-19 19:08:25,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Result: [4, 程序运行日记]  
 
 2020-11-19 19:08:25,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Result: [5, 开发日记]  
 
 2020-11-19 19:08:25,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Result: [8, 开发手册]  
 
 2020-11-19 19:08:25,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} Result: [10, 搭建日记]  
 
 2020-11-19 19:08:25,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50016} closed  
 
 2020-11-19 19:08:25,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} clearParameters.   
 
 2020-11-19 19:08:25,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:25,163 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:25,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:08:25,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Parameters : []  
 
 2020-11-19 19:08:25,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Types : []  
 
 2020-11-19 19:08:25,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} executed. 2.3304 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:08:25,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50017} open  
 
 2020-11-19 19:08:25,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50017} Header: [count(0)]  
 
 2020-11-19 19:08:25,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50017} Result: [2]  
 
 2020-11-19 19:08:25,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50017} closed  
 
 2020-11-19 19:08:25,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} clearParameters.   
 
 2020-11-19 19:08:25,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:08:25,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : [4]  
 
 2020-11-19 19:08:25,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 19:08:25,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 2.6963 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:08:25,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50018} open  
 
 2020-11-19 19:08:25,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50018} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:08:25,178 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:08:25,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:08:25,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50018} closed  
 
 2020-11-19 19:08:25,182 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 19:08:25,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:26,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:26,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:08:26,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : [11]  
 
 2020-11-19 19:08:26,186 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:08:26,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 3.6916 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:08:26,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50019} open  
 
 2020-11-19 19:08:26,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50019} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:08:26,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:08:26,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50019} closed  
 
 2020-11-19 19:08:26,195 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-19 19:08:26,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:29,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:29,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : []  
 
 2020-11-19 19:08:29,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : []  
 
 2020-11-19 19:08:29,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 2.113101 millis. select * from t_types  
 
 2020-11-19 19:08:29,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} open  
 
 2020-11-19 19:08:29,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} Header: [id, name]  
 
 2020-11-19 19:08:29,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} Result: [8, 方法论]  
 
 2020-11-19 19:08:29,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} Result: [9, 理论类]  
 
 2020-11-19 19:08:29,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} Result: [21, 错误日记]  
 
 2020-11-19 19:08:29,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} Result: [23, 开发日记]  
 
 2020-11-19 19:08:29,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} Result: [24, 实践论]  
 
 2020-11-19 19:08:29,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} Result: [25, 想法论]  
 
 2020-11-19 19:08:29,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50020} closed  
 
 2020-11-19 19:08:29,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 19:08:29,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:29,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:29,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Parameters : []  
 
 2020-11-19 19:08:29,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Types : []  
 
 2020-11-19 19:08:29,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} executed. 2.1724 millis. select * from t_tages  
 
 2020-11-19 19:08:29,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} open  
 
 2020-11-19 19:08:29,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} Header: [id, tage]  
 
 2020-11-19 19:08:29,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} Result: [1, 学习日记]  
 
 2020-11-19 19:08:29,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} Result: [2, 错误笔记]  
 
 2020-11-19 19:08:29,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} Result: [3, 数据库笔记]  
 
 2020-11-19 19:08:29,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} Result: [4, 程序运行日记]  
 
 2020-11-19 19:08:29,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} Result: [5, 开发日记]  
 
 2020-11-19 19:08:29,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} Result: [8, 开发手册]  
 
 2020-11-19 19:08:29,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} Result: [10, 搭建日记]  
 
 2020-11-19 19:08:29,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50021} closed  
 
 2020-11-19 19:08:29,801 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} clearParameters.   
 
 2020-11-19 19:08:29,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:29,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:29,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Parameters : []  
 
 2020-11-19 19:08:29,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Types : []  
 
 2020-11-19 19:08:29,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} executed. 1.731901 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:08:29,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50022} open  
 
 2020-11-19 19:08:29,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50022} Header: [count(0)]  
 
 2020-11-19 19:08:29,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50022} Result: [2]  
 
 2020-11-19 19:08:29,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50022} closed  
 
 2020-11-19 19:08:29,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} clearParameters.   
 
 2020-11-19 19:08:29,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : [4]  
 
 2020-11-19 19:08:29,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 19:08:29,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 2.3632 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:08:29,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50023} open  
 
 2020-11-19 19:08:29,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50023} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:08:29,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50023} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:08:29,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50023} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:08:29,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50023} closed  
 
 2020-11-19 19:08:29,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 19:08:29,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:30,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:30,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : [12]  
 
 2020-11-19 19:08:30,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:08:30,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 4.218901 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:08:30,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50024} open  
 
 2020-11-19 19:08:30,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50024} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:08:30,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50024} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:08:30,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50024} closed  
 
 2020-11-19 19:08:30,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-19 19:08:30,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:48,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:48,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : []  
 
 2020-11-19 19:08:48,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : []  
 
 2020-11-19 19:08:49,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 2.1799 millis. select * from t_types  
 
 2020-11-19 19:08:49,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} open  
 
 2020-11-19 19:08:49,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} Header: [id, name]  
 
 2020-11-19 19:08:49,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} Result: [8, 方法论]  
 
 2020-11-19 19:08:49,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} Result: [9, 理论类]  
 
 2020-11-19 19:08:49,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} Result: [21, 错误日记]  
 
 2020-11-19 19:08:49,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} Result: [23, 开发日记]  
 
 2020-11-19 19:08:49,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} Result: [24, 实践论]  
 
 2020-11-19 19:08:49,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} Result: [25, 想法论]  
 
 2020-11-19 19:08:49,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20010, rs-50025} closed  
 
 2020-11-19 19:08:49,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 19:08:49,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:49,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:49,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Parameters : []  
 
 2020-11-19 19:08:49,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Types : []  
 
 2020-11-19 19:08:49,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} executed. 2.489801 millis. select * from t_tages  
 
 2020-11-19 19:08:49,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} open  
 
 2020-11-19 19:08:49,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} Header: [id, tage]  
 
 2020-11-19 19:08:49,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} Result: [1, 学习日记]  
 
 2020-11-19 19:08:49,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} Result: [2, 错误笔记]  
 
 2020-11-19 19:08:49,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} Result: [3, 数据库笔记]  
 
 2020-11-19 19:08:49,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} Result: [4, 程序运行日记]  
 
 2020-11-19 19:08:49,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} Result: [5, 开发日记]  
 
 2020-11-19 19:08:49,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} Result: [8, 开发手册]  
 
 2020-11-19 19:08:49,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} Result: [10, 搭建日记]  
 
 2020-11-19 19:08:49,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20009, rs-50026} closed  
 
 2020-11-19 19:08:49,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} clearParameters.   
 
 2020-11-19 19:08:49,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:49,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:49,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Parameters : []  
 
 2020-11-19 19:08:49,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Types : []  
 
 2020-11-19 19:08:49,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} executed. 2.0164 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:08:49,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50027} open  
 
 2020-11-19 19:08:49,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50027} Header: [count(0)]  
 
 2020-11-19 19:08:49,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50027} Result: [2]  
 
 2020-11-19 19:08:49,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20011, rs-50027} closed  
 
 2020-11-19 19:08:49,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} clearParameters.   
 
 2020-11-19 19:08:49,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : [4]  
 
 2020-11-19 19:08:49,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 19:08:49,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 2.3301 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:08:49,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50028} open  
 
 2020-11-19 19:08:49,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50028} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:08:49,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50028} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:08:49,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50028} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:08:49,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50028} closed  
 
 2020-11-19 19:08:49,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 19:08:49,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:08:49,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:08:49,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : [11]  
 
 2020-11-19 19:08:49,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:08:49,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 2.8141 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:08:49,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50029} open  
 
 2020-11-19 19:08:49,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50029} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:08:49,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50029} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:08:49,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50029} closed  
 
 2020-11-19 19:08:49,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-19 19:08:49,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:16:36,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-804} connected  
 
 2020-11-19 19:16:36,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-805} connected  
 
 2020-11-19 19:16:36,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-806} connected  
 
 2020-11-19 19:16:36,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-807} connected  
 
 2020-11-19 19:16:36,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-808} connected  
 
 2020-11-19 19:16:36,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:16:37,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:16:37,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [11]  
 
 2020-11-19 19:16:37,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-19 19:16:37,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 25.5196 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:16:37,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 19:16:37,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:16:37,274 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:16:37,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 19:16:37,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 19:16:37,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:09,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-809} connected  
 
 2020-11-19 19:25:09,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-810} connected  
 
 2020-11-19 19:25:09,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-811} connected  
 
 2020-11-19 19:25:09,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-812} connected  
 
 2020-11-19 19:25:09,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-813} connected  
 
 2020-11-19 19:25:09,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:10,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-19 19:25:10,534 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-19 19:25:10,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-19 19:25:10,564 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 42.4073 millis. select * from t_user where username=?  
 
 2020-11-19 19:25:10,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 19:25:10,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 19:25:10,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 19:25:10,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 19:25:10,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 19:25:10,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:13,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:13,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:13,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:13,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:25:13,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [1]  
 
 2020-11-19 19:25:13,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-19 19:25:13,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.3618 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:25:13,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 19:25:13,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [count(0)]  
 
 2020-11-19 19:25:13,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2]  
 
 2020-11-19 19:25:13,989 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 19:25:13,990 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 19:25:13,996 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:25:13,998 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [1, 5]  
 
 2020-11-19 19:25:13,999 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:25:14,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 3.2937 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:25:14,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 19:25:14,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:25:14,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:25:14,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:25:14,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 19:25:14,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 19:25:14,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:15,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:15,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:25:15,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [11]  
 
 2020-11-19 19:25:15,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 19:25:15,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 7.072 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:25:15,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 19:25:15,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 19:25:15,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [11, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 19:25:15,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [11, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```javascript
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 10, 搭建日记, 8, 方法论]  
 
 2020-11-19 19:25:15,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 19:25:15,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 19:25:15,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:15,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:15,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_tages  
 
 2020-11-19 19:25:15,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 19:25:15,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 19:25:15,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.7611 millis. select * from t_tages  
 
 2020-11-19 19:25:15,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 19:25:15,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [id, tage]  
 
 2020-11-19 19:25:15,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [1, 学习日记]  
 
 2020-11-19 19:25:15,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [2, 错误笔记]  
 
 2020-11-19 19:25:15,307 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [3, 数据库笔记]  
 
 2020-11-19 19:25:15,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [4, 程序运行日记]  
 
 2020-11-19 19:25:15,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [5, 开发日记]  
 
 2020-11-19 19:25:15,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [8, 开发手册]  
 
 2020-11-19 19:25:15,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [10, 搭建日记]  
 
 2020-11-19 19:25:15,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 19:25:15,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 19:25:15,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:15,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:15,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. select * from t_types  
 
 2020-11-19 19:25:15,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 19:25:15,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 19:25:15,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.2 millis. select * from t_types  
 
 2020-11-19 19:25:15,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-19 19:25:15,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [id, name]  
 
 2020-11-19 19:25:15,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [8, 方法论]  
 
 2020-11-19 19:25:15,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [9, 理论类]  
 
 2020-11-19 19:25:15,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [21, 错误日记]  
 
 2020-11-19 19:25:15,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [23, 开发日记]  
 
 2020-11-19 19:25:15,334 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [24, 实践论]  
 
 2020-11-19 19:25:15,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [25, 想法论]  
 
 2020-11-19 19:25:15,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-19 19:25:15,337 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 19:25:15,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:35,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:35,553 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. update t_blog
         SET title='Java基本语法'
            ,
                content='##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:25:35.513' 
        where id=?  
 
 2020-11-19 19:25:35,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [11]  
 
 2020-11-19 19:25:35,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 19:25:35,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 14.8271 millis. update t_blog
         SET title='Java基本语法'
            ,
                content='##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:25:35.513' 
        where id=?  
 
 2020-11-19 19:25:35,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 19:25:35,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:35,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:35,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:25:35,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : [11]  
 
 2020-11-19 19:25:35,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : [INTEGER]  
 
 2020-11-19 19:25:35,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 8.404899 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:25:35,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 19:25:35,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:35,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:35,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. delete from t_blog_type where bid=?  
 
 2020-11-19 19:25:35,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [11]  
 
 2020-11-19 19:25:35,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 19:25:35,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 6.5844 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 19:25:35,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 19:25:35,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:35,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:35,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:25:35,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 1, 11]  
 
 2020-11-19 19:25:35,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:25:35,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 8.7334 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:25:35,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-19 19:25:35,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:35,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:35,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Parameters : [null, 10, 11]  
 
 2020-11-19 19:25:35,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:25:35,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} executed. 8.935399 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:25:35,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20009} clearParameters.   
 
 2020-11-19 19:25:35,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:35,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:35,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:25:35,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Parameters : [null, 11, 8]  
 
 2020-11-19 19:25:35,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:25:35,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} executed. 9.615401 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:25:35,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20010} clearParameters.   
 
 2020-11-19 19:25:35,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:35,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:35,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : [1]  
 
 2020-11-19 19:25:35,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : [INTEGER]  
 
 2020-11-19 19:25:35,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.687901 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:25:35,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} open  
 
 2020-11-19 19:25:35,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Header: [count(0)]  
 
 2020-11-19 19:25:35,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} Result: [2]  
 
 2020-11-19 19:25:35,727 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50006} closed  
 
 2020-11-19 19:25:35,728 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 19:25:35,733 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : [1, 5]  
 
 2020-11-19 19:25:35,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:25:35,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.6906 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:25:35,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} open  
 
 2020-11-19 19:25:35,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:25:35,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:25:35,744 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:25:35,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50007} closed  
 
 2020-11-19 19:25:35,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 19:25:35,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:42,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:42,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 19:25:42,577 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 19:25:42,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.6768 millis. select * from t_types  
 
 2020-11-19 19:25:42,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} open  
 
 2020-11-19 19:25:42,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} Header: [id, name]  
 
 2020-11-19 19:25:42,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} Result: [8, 方法论]  
 
 2020-11-19 19:25:42,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} Result: [9, 理论类]  
 
 2020-11-19 19:25:42,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} Result: [21, 错误日记]  
 
 2020-11-19 19:25:42,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} Result: [23, 开发日记]  
 
 2020-11-19 19:25:42,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} Result: [24, 实践论]  
 
 2020-11-19 19:25:42,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} Result: [25, 想法论]  
 
 2020-11-19 19:25:42,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50008} closed  
 
 2020-11-19 19:25:42,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 19:25:42,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:42,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:42,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 19:25:42,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 19:25:42,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.785699 millis. select * from t_tages  
 
 2020-11-19 19:25:42,594 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} open  
 
 2020-11-19 19:25:42,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Header: [id, tage]  
 
 2020-11-19 19:25:42,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [1, 学习日记]  
 
 2020-11-19 19:25:42,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [2, 错误笔记]  
 
 2020-11-19 19:25:42,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [3, 数据库笔记]  
 
 2020-11-19 19:25:42,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [4, 程序运行日记]  
 
 2020-11-19 19:25:42,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [5, 开发日记]  
 
 2020-11-19 19:25:42,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [8, 开发手册]  
 
 2020-11-19 19:25:42,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} Result: [10, 搭建日记]  
 
 2020-11-19 19:25:42,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50009} closed  
 
 2020-11-19 19:25:42,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 19:25:42,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:42,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:42,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:25:42,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : []  
 
 2020-11-19 19:25:42,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : []  
 
 2020-11-19 19:25:42,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 2.092401 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:25:42,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50010} open  
 
 2020-11-19 19:25:42,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50010} Header: [count(0)]  
 
 2020-11-19 19:25:42,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50010} Result: [2]  
 
 2020-11-19 19:25:42,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50010} closed  
 
 2020-11-19 19:25:42,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-19 19:25:42,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:25:42,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [4]  
 
 2020-11-19 19:25:42,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 19:25:42,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 3.1369 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:25:42,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50011} open  
 
 2020-11-19 19:25:42,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50011} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:25:42,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:25:42,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50011} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:25:42,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50011} closed  
 
 2020-11-19 19:25:42,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-19 19:25:42,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:44,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:44,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:25:44,149 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Parameters : [12]  
 
 2020-11-19 19:25:44,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:25:44,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} executed. 3.4583 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:25:44,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50012} open  
 
 2020-11-19 19:25:44,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:25:44,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:25:44,157 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50012} closed  
 
 2020-11-19 19:25:44,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} clearParameters.   
 
 2020-11-19 19:25:44,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:56,000 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:56,001 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 19:25:56,002 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 19:25:56,004 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.7409 millis. select * from t_types  
 
 2020-11-19 19:25:56,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} open  
 
 2020-11-19 19:25:56,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Header: [id, name]  
 
 2020-11-19 19:25:56,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [8, 方法论]  
 
 2020-11-19 19:25:56,009 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [9, 理论类]  
 
 2020-11-19 19:25:56,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [21, 错误日记]  
 
 2020-11-19 19:25:56,011 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [23, 开发日记]  
 
 2020-11-19 19:25:56,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [24, 实践论]  
 
 2020-11-19 19:25:56,013 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} Result: [25, 想法论]  
 
 2020-11-19 19:25:56,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50013} closed  
 
 2020-11-19 19:25:56,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 19:25:56,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:56,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:56,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 19:25:56,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 19:25:56,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9463 millis. select * from t_tages  
 
 2020-11-19 19:25:56,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} open  
 
 2020-11-19 19:25:56,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Header: [id, tage]  
 
 2020-11-19 19:25:56,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [1, 学习日记]  
 
 2020-11-19 19:25:56,021 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [2, 错误笔记]  
 
 2020-11-19 19:25:56,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [3, 数据库笔记]  
 
 2020-11-19 19:25:56,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [4, 程序运行日记]  
 
 2020-11-19 19:25:56,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [5, 开发日记]  
 
 2020-11-19 19:25:56,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [8, 开发手册]  
 
 2020-11-19 19:25:56,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} Result: [10, 搭建日记]  
 
 2020-11-19 19:25:56,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50014} closed  
 
 2020-11-19 19:25:56,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 19:25:56,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:56,027 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:56,028 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : []  
 
 2020-11-19 19:25:56,029 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : []  
 
 2020-11-19 19:25:56,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 1.9329 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:25:56,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50015} open  
 
 2020-11-19 19:25:56,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50015} Header: [count(0)]  
 
 2020-11-19 19:25:56,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50015} Result: [2]  
 
 2020-11-19 19:25:56,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50015} closed  
 
 2020-11-19 19:25:56,036 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-19 19:25:56,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [4]  
 
 2020-11-19 19:25:56,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 19:25:56,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 2.918601 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:25:56,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50016} open  
 
 2020-11-19 19:25:56,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50016} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:25:56,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:25:56,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50016} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:25:56,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50016} closed  
 
 2020-11-19 19:25:56,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-19 19:25:56,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:25:56,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:25:56,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Parameters : [11]  
 
 2020-11-19 19:25:56,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:25:56,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} executed. 3.7917 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:25:56,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50017} open  
 
 2020-11-19 19:25:56,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50017} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:25:56,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50017} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:25:56,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50017} closed  
 
 2020-11-19 19:25:56,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} clearParameters.   
 
 2020-11-19 19:25:56,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:26:01,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:26:01,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 19:26:01,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 19:26:01,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 2.4546 millis. select * from t_types  
 
 2020-11-19 19:26:01,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} open  
 
 2020-11-19 19:26:01,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} Header: [id, name]  
 
 2020-11-19 19:26:01,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} Result: [8, 方法论]  
 
 2020-11-19 19:26:01,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} Result: [9, 理论类]  
 
 2020-11-19 19:26:01,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} Result: [21, 错误日记]  
 
 2020-11-19 19:26:01,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} Result: [23, 开发日记]  
 
 2020-11-19 19:26:01,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} Result: [24, 实践论]  
 
 2020-11-19 19:26:01,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} Result: [25, 想法论]  
 
 2020-11-19 19:26:01,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50018} closed  
 
 2020-11-19 19:26:01,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 19:26:01,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:26:01,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:26:01,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : []  
 
 2020-11-19 19:26:01,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : []  
 
 2020-11-19 19:26:01,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.2019 millis. select * from t_tages  
 
 2020-11-19 19:26:01,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} open  
 
 2020-11-19 19:26:01,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Header: [id, tage]  
 
 2020-11-19 19:26:01,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [1, 学习日记]  
 
 2020-11-19 19:26:01,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [2, 错误笔记]  
 
 2020-11-19 19:26:01,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [3, 数据库笔记]  
 
 2020-11-19 19:26:01,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [4, 程序运行日记]  
 
 2020-11-19 19:26:01,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [5, 开发日记]  
 
 2020-11-19 19:26:01,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [8, 开发手册]  
 
 2020-11-19 19:26:01,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} Result: [10, 搭建日记]  
 
 2020-11-19 19:26:01,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50019} closed  
 
 2020-11-19 19:26:01,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 19:26:01,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:26:01,927 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:26:01,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Parameters : []  
 
 2020-11-19 19:26:01,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} Types : []  
 
 2020-11-19 19:26:01,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} executed. 2.7 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:26:01,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50020} open  
 
 2020-11-19 19:26:01,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50020} Header: [count(0)]  
 
 2020-11-19 19:26:01,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50020} Result: [2]  
 
 2020-11-19 19:26:01,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20011, rs-50020} closed  
 
 2020-11-19 19:26:01,935 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20011} clearParameters.   
 
 2020-11-19 19:26:01,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Parameters : [4]  
 
 2020-11-19 19:26:01,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 19:26:01,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} executed. 2.4664 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:26:01,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50021} open  
 
 2020-11-19 19:26:01,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50021} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:26:01,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50021} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:26:01,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50021} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:26:01,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20012, rs-50021} closed  
 
 2020-11-19 19:26:01,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20012} clearParameters.   
 
 2020-11-19 19:26:01,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:26:03,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:26:03,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Parameters : [12]  
 
 2020-11-19 19:26:03,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:26:03,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} executed. 3.647701 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:26:03,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50022} open  
 
 2020-11-19 19:26:03,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50022} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:26:03,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50022} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:26:03,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20013, rs-50022} closed  
 
 2020-11-19 19:26:03,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20013} clearParameters.   
 
 2020-11-19 19:26:03,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:30:17,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-814} connected  
 
 2020-11-19 19:30:17,845 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-815} connected  
 
 2020-11-19 19:30:17,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-816} connected  
 
 2020-11-19 19:30:17,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-817} connected  
 
 2020-11-19 19:30:17,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-818} connected  
 
 2020-11-19 19:30:17,945 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 19:30:18,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:30:18,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [12]  
 
 2020-11-19 19:30:18,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-19 19:30:18,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 45.3947 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:30:18,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 19:30:18,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:30:18,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:30:18,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 19:30:18,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 19:30:18,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 19:31:37,566 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-19 19:31:37,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 19:31:37,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-19 19:31:37,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-19 19:31:37,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-19 19:31:37,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-819} connected  
 
 2020-11-19 19:31:37,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:37,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} created. select * from t_user where username=?  
 
 2020-11-19 19:31:37,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} Parameters : [zhangsan]  
 
 2020-11-19 19:31:37,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} Types : [VARCHAR]  
 
 2020-11-19 19:31:37,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} executed. 7.5827 millis. select * from t_user where username=?  
 
 2020-11-19 19:31:37,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20001, rs-50001} open  
 
 2020-11-19 19:31:37,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20001, rs-50001} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 19:31:37,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20001, rs-50001} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 19:31:37,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20001, rs-50001} closed  
 
 2020-11-19 19:31:37,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20001} clearParameters.   
 
 2020-11-19 19:31:37,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:39,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:39,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:39,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:39,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:31:39,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} Parameters : [1]  
 
 2020-11-19 19:31:39,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 19:31:39,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} executed. 2.160099 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:31:39,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50002} open  
 
 2020-11-19 19:31:39,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 19:31:39,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 19:31:39,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50002} closed  
 
 2020-11-19 19:31:39,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} clearParameters.   
 
 2020-11-19 19:31:39,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:31:39,715 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : [1, 5]  
 
 2020-11-19 19:31:39,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:31:39,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} executed. 2.7049 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:31:39,719 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} open  
 
 2020-11-19 19:31:39,720 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:31:39,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:31:39,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:31:39,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50003} closed  
 
 2020-11-19 19:31:39,725 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-19 19:31:39,726 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:40,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:40,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:31:40,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Parameters : [11]  
 
 2020-11-19 19:31:40,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Types : [INTEGER]  
 
 2020-11-19 19:31:40,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} executed. 3.4644 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:31:40,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} open  
 
 2020-11-19 19:31:40,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 19:31:40,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [11, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 19:31:40,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} Result: [11, Java基本语法, ##基本语法
#####编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 10, 搭建日记, 8, 方法论]  
 
 2020-11-19 19:31:40,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50004} closed  
 
 2020-11-19 19:31:40,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} clearParameters.   
 
 2020-11-19 19:31:40,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:40,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:40,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} created. select * from t_tages  
 
 2020-11-19 19:31:40,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 19:31:40,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 19:31:40,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 1.9269 millis. select * from t_tages  
 
 2020-11-19 19:31:40,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} open  
 
 2020-11-19 19:31:40,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Header: [id, tage]  
 
 2020-11-19 19:31:40,666 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 19:31:40,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 19:31:40,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 19:31:40,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 19:31:40,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 19:31:40,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 19:31:40,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 19:31:40,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50005} closed  
 
 2020-11-19 19:31:40,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 19:31:40,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:40,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:40,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} created. select * from t_types  
 
 2020-11-19 19:31:40,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 19:31:40,679 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 19:31:40,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 1.6634 millis. select * from t_types  
 
 2020-11-19 19:31:40,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} open  
 
 2020-11-19 19:31:40,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Header: [id, name]  
 
 2020-11-19 19:31:40,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [8, 方法论]  
 
 2020-11-19 19:31:40,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [9, 理论类]  
 
 2020-11-19 19:31:40,683 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [21, 错误日记]  
 
 2020-11-19 19:31:40,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [23, 开发日记]  
 
 2020-11-19 19:31:40,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [24, 实践论]  
 
 2020-11-19 19:31:40,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} Result: [25, 想法论]  
 
 2020-11-19 19:31:40,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50006} closed  
 
 2020-11-19 19:31:40,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 19:31:40,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:51,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:51,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} created. update t_blog
         SET title='Java基本语法'
            ,
                content='## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:31:51.705' 
        where id=?  
 
 2020-11-19 19:31:51,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Parameters : [11]  
 
 2020-11-19 19:31:51,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} Types : [INTEGER]  
 
 2020-11-19 19:31:51,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} executed. 15.8795 millis. update t_blog
         SET title='Java基本语法'
            ,
                content='## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:31:51.705' 
        where id=?  
 
 2020-11-19 19:31:51,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20007} clearParameters.   
 
 2020-11-19 19:31:51,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:51,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:51,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} created. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:31:51,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Parameters : [11]  
 
 2020-11-19 19:31:51,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 19:31:51,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} executed. 7.639399 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:31:51,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20008} clearParameters.   
 
 2020-11-19 19:31:51,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:51,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:51,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} created. delete from t_blog_type where bid=?  
 
 2020-11-19 19:31:51,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Parameters : [11]  
 
 2020-11-19 19:31:51,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 19:31:51,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} executed. 6.8088 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 19:31:51,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20009} clearParameters.   
 
 2020-11-19 19:31:51,799 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:51,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:51,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:31:51,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : [null, 1, 11]  
 
 2020-11-19 19:31:51,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:31:51,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 7.090901 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:31:51,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 19:31:51,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:51,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:51,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Parameters : [null, 10, 11]  
 
 2020-11-19 19:31:51,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:31:51,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} executed. 9.324201 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:31:51,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20010} clearParameters.   
 
 2020-11-19 19:31:51,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:51,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:51,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:31:51,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Parameters : [null, 11, 8]  
 
 2020-11-19 19:31:51,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:31:51,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} executed. 6.006201 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:31:51,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20011} clearParameters.   
 
 2020-11-19 19:31:51,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:51,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:51,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} Parameters : [1]  
 
 2020-11-19 19:31:51,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 19:31:51,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} executed. 2.424 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:31:51,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50007} open  
 
 2020-11-19 19:31:51,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50007} Header: [count(0)]  
 
 2020-11-19 19:31:51,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50007} Result: [2]  
 
 2020-11-19 19:31:51,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50007} closed  
 
 2020-11-19 19:31:51,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} clearParameters.   
 
 2020-11-19 19:31:51,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : [1, 5]  
 
 2020-11-19 19:31:51,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:31:51,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} executed. 2.0803 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:31:51,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50008} open  
 
 2020-11-19 19:31:51,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50008} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:31:51,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50008} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:31:51,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50008} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:31:51,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50008} closed  
 
 2020-11-19 19:31:51,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-19 19:31:51,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:53,402 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:53,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 19:31:53,406 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 19:31:53,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 3.0429 millis. select * from t_types  
 
 2020-11-19 19:31:53,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} open  
 
 2020-11-19 19:31:53,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} Header: [id, name]  
 
 2020-11-19 19:31:53,410 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} Result: [8, 方法论]  
 
 2020-11-19 19:31:53,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} Result: [9, 理论类]  
 
 2020-11-19 19:31:53,411 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} Result: [21, 错误日记]  
 
 2020-11-19 19:31:53,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} Result: [23, 开发日记]  
 
 2020-11-19 19:31:53,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} Result: [24, 实践论]  
 
 2020-11-19 19:31:53,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} Result: [25, 想法论]  
 
 2020-11-19 19:31:53,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50009} closed  
 
 2020-11-19 19:31:53,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 19:31:53,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:53,417 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:53,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 19:31:53,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 19:31:53,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 3.0268 millis. select * from t_tages  
 
 2020-11-19 19:31:53,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} open  
 
 2020-11-19 19:31:53,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} Header: [id, tage]  
 
 2020-11-19 19:31:53,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} Result: [1, 学习日记]  
 
 2020-11-19 19:31:53,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-19 19:31:53,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-19 19:31:53,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-19 19:31:53,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} Result: [5, 开发日记]  
 
 2020-11-19 19:31:53,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} Result: [8, 开发手册]  
 
 2020-11-19 19:31:53,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} Result: [10, 搭建日记]  
 
 2020-11-19 19:31:53,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50010} closed  
 
 2020-11-19 19:31:53,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 19:31:53,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:53,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:53,440 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:31:53,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : []  
 
 2020-11-19 19:31:53,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : []  
 
 2020-11-19 19:31:53,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 3.040801 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:31:53,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50011} open  
 
 2020-11-19 19:31:53,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50011} Header: [count(0)]  
 
 2020-11-19 19:31:53,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50011} Result: [2]  
 
 2020-11-19 19:31:53,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50011} closed  
 
 2020-11-19 19:31:53,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 19:31:53,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:31:53,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : [4]  
 
 2020-11-19 19:31:53,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:31:53,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 3.8015 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:31:53,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50012} open  
 
 2020-11-19 19:31:53,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:31:53,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:31:53,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:31:53,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50012} closed  
 
 2020-11-19 19:31:53,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-19 19:31:53,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:31:54,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:31:54,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:31:54,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Parameters : [11]  
 
 2020-11-19 19:31:54,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Types : [INTEGER]  
 
 2020-11-19 19:31:54,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} executed. 3.519601 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:31:54,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50013} open  
 
 2020-11-19 19:31:54,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50013} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:31:54,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50013} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:31:54,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50013} closed  
 
 2020-11-19 19:31:54,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} clearParameters.   
 
 2020-11-19 19:31:54,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:09,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:09,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 19:32:09,811 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 19:32:09,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.603299 millis. select * from t_types  
 
 2020-11-19 19:32:09,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} open  
 
 2020-11-19 19:32:09,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} Header: [id, name]  
 
 2020-11-19 19:32:09,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} Result: [8, 方法论]  
 
 2020-11-19 19:32:09,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} Result: [9, 理论类]  
 
 2020-11-19 19:32:09,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} Result: [21, 错误日记]  
 
 2020-11-19 19:32:09,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} Result: [23, 开发日记]  
 
 2020-11-19 19:32:09,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} Result: [24, 实践论]  
 
 2020-11-19 19:32:09,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} Result: [25, 想法论]  
 
 2020-11-19 19:32:09,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50014} closed  
 
 2020-11-19 19:32:09,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 19:32:09,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:09,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:09,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 19:32:09,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 19:32:09,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.0191 millis. select * from t_tages  
 
 2020-11-19 19:32:09,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} open  
 
 2020-11-19 19:32:09,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} Header: [id, tage]  
 
 2020-11-19 19:32:09,830 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} Result: [1, 学习日记]  
 
 2020-11-19 19:32:09,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} Result: [2, 错误笔记]  
 
 2020-11-19 19:32:09,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} Result: [3, 数据库笔记]  
 
 2020-11-19 19:32:09,833 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} Result: [4, 程序运行日记]  
 
 2020-11-19 19:32:09,834 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} Result: [5, 开发日记]  
 
 2020-11-19 19:32:09,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} Result: [8, 开发手册]  
 
 2020-11-19 19:32:09,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} Result: [10, 搭建日记]  
 
 2020-11-19 19:32:09,837 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50015} closed  
 
 2020-11-19 19:32:09,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 19:32:09,840 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:09,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:09,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : []  
 
 2020-11-19 19:32:09,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : []  
 
 2020-11-19 19:32:09,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 2.3631 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:32:09,847 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50016} open  
 
 2020-11-19 19:32:09,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50016} Header: [count(0)]  
 
 2020-11-19 19:32:09,848 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50016} Result: [2]  
 
 2020-11-19 19:32:09,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50016} closed  
 
 2020-11-19 19:32:09,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 19:32:09,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : [4]  
 
 2020-11-19 19:32:09,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:32:09,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 2.3349 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:32:09,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50017} open  
 
 2020-11-19 19:32:09,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50017} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:32:09,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50017} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:32:09,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50017} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:32:09,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50017} closed  
 
 2020-11-19 19:32:09,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-19 19:32:09,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:10,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:10,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Parameters : [12]  
 
 2020-11-19 19:32:10,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Types : [INTEGER]  
 
 2020-11-19 19:32:10,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} executed. 3.1255 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:32:10,981 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50018} open  
 
 2020-11-19 19:32:10,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50018} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:32:10,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50018} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:32:10,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20014, rs-50018} closed  
 
 2020-11-19 19:32:10,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} clearParameters.   
 
 2020-11-19 19:32:10,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:17,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:17,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 19:32:17,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 19:32:17,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.3214 millis. select * from t_types  
 
 2020-11-19 19:32:17,809 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} open  
 
 2020-11-19 19:32:17,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Header: [id, name]  
 
 2020-11-19 19:32:17,810 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [8, 方法论]  
 
 2020-11-19 19:32:17,812 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [9, 理论类]  
 
 2020-11-19 19:32:17,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [21, 错误日记]  
 
 2020-11-19 19:32:17,813 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [23, 开发日记]  
 
 2020-11-19 19:32:17,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [24, 实践论]  
 
 2020-11-19 19:32:17,815 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} Result: [25, 想法论]  
 
 2020-11-19 19:32:17,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50019} closed  
 
 2020-11-19 19:32:17,817 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 19:32:17,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:17,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:17,820 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 19:32:17,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 19:32:17,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 2.0159 millis. select * from t_tages  
 
 2020-11-19 19:32:17,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} open  
 
 2020-11-19 19:32:17,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} Header: [id, tage]  
 
 2020-11-19 19:32:17,824 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} Result: [1, 学习日记]  
 
 2020-11-19 19:32:17,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} Result: [2, 错误笔记]  
 
 2020-11-19 19:32:17,826 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} Result: [3, 数据库笔记]  
 
 2020-11-19 19:32:17,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} Result: [4, 程序运行日记]  
 
 2020-11-19 19:32:17,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} Result: [5, 开发日记]  
 
 2020-11-19 19:32:17,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} Result: [8, 开发手册]  
 
 2020-11-19 19:32:17,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} Result: [10, 搭建日记]  
 
 2020-11-19 19:32:17,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50020} closed  
 
 2020-11-19 19:32:17,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 19:32:17,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:17,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:17,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : []  
 
 2020-11-19 19:32:17,839 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : []  
 
 2020-11-19 19:32:17,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 2.188201 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:32:17,841 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50021} open  
 
 2020-11-19 19:32:17,842 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50021} Header: [count(0)]  
 
 2020-11-19 19:32:17,843 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50021} Result: [2]  
 
 2020-11-19 19:32:17,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20012, rs-50021} closed  
 
 2020-11-19 19:32:17,844 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 19:32:17,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : [4]  
 
 2020-11-19 19:32:17,846 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 19:32:17,849 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 3.291999 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:32:17,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50022} open  
 
 2020-11-19 19:32:17,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50022} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:32:17,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50022} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:32:17,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50022} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:32:17,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20013, rs-50022} closed  
 
 2020-11-19 19:32:17,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-19 19:32:17,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:22,816 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:22,818 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} Parameters : [1]  
 
 2020-11-19 19:32:22,819 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} Types : [INTEGER]  
 
 2020-11-19 19:32:22,821 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} executed. 2.9474 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:32:22,822 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50023} open  
 
 2020-11-19 19:32:22,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50023} Header: [count(0)]  
 
 2020-11-19 19:32:22,823 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50023} Result: [2]  
 
 2020-11-19 19:32:22,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20002, rs-50023} closed  
 
 2020-11-19 19:32:22,825 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20002} clearParameters.   
 
 2020-11-19 19:32:22,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Parameters : [1, 5]  
 
 2020-11-19 19:32:22,827 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:32:22,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} executed. 2.218799 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:32:22,829 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50024} open  
 
 2020-11-19 19:32:22,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50024} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:32:22,831 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50024} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:32:22,832 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50024} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:32:22,835 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20003, rs-50024} closed  
 
 2020-11-19 19:32:22,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20003} clearParameters.   
 
 2020-11-19 19:32:22,838 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:23,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:23,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Parameters : [12]  
 
 2020-11-19 19:32:23,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} Types : [INTEGER]  
 
 2020-11-19 19:32:23,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} executed. 3.2677 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:32:23,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50025} open  
 
 2020-11-19 19:32:23,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50025} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 19:32:23,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50025} Result: [12, Java笔记, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 19:32:23,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50025} Result: [12, Java笔记, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
> 1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
> 2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

```
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
```
* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 5, 开发日记, 8, 方法论]  
 
 2020-11-19 19:32:23,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20004, rs-50025} closed  
 
 2020-11-19 19:32:23,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20004} clearParameters.   
 
 2020-11-19 19:32:23,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:23,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:23,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Parameters : []  
 
 2020-11-19 19:32:23,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} Types : []  
 
 2020-11-19 19:32:23,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} executed. 1.9306 millis. select * from t_tages  
 
 2020-11-19 19:32:23,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} open  
 
 2020-11-19 19:32:23,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} Header: [id, tage]  
 
 2020-11-19 19:32:23,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} Result: [1, 学习日记]  
 
 2020-11-19 19:32:23,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} Result: [2, 错误笔记]  
 
 2020-11-19 19:32:23,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} Result: [3, 数据库笔记]  
 
 2020-11-19 19:32:23,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} Result: [4, 程序运行日记]  
 
 2020-11-19 19:32:23,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} Result: [5, 开发日记]  
 
 2020-11-19 19:32:23,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} Result: [8, 开发手册]  
 
 2020-11-19 19:32:23,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} Result: [10, 搭建日记]  
 
 2020-11-19 19:32:23,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20005, rs-50026} closed  
 
 2020-11-19 19:32:23,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20005} clearParameters.   
 
 2020-11-19 19:32:23,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:32:23,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 19:32:23,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Parameters : []  
 
 2020-11-19 19:32:23,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} Types : []  
 
 2020-11-19 19:32:23,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} executed. 2.0488 millis. select * from t_types  
 
 2020-11-19 19:32:23,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} open  
 
 2020-11-19 19:32:23,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} Header: [id, name]  
 
 2020-11-19 19:32:23,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} Result: [8, 方法论]  
 
 2020-11-19 19:32:23,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} Result: [9, 理论类]  
 
 2020-11-19 19:32:23,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} Result: [21, 错误日记]  
 
 2020-11-19 19:32:23,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} Result: [23, 开发日记]  
 
 2020-11-19 19:32:23,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} Result: [24, 实践论]  
 
 2020-11-19 19:32:23,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} Result: [25, 想法论]  
 
 2020-11-19 19:32:23,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20006, rs-50027} closed  
 
 2020-11-19 19:32:23,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20006} clearParameters.   
 
 2020-11-19 19:32:23,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 19:34:47,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} closed  
 
 2020-11-19 19:34:47,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007,procId-820} connected  
 
 2020-11-19 19:34:47,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:47,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20015} created. update t_blog
         SET title='Java笔记'
            ,
                content='* 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

  ```java
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
 ```
* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:34:47.002' 
        where id=?  
 
 2020-11-19 19:34:47,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20015} Parameters : [12]  
 
 2020-11-19 19:34:47,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20015} Types : [INTEGER]  
 
 2020-11-19 19:34:47,042 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20015} executed. 15.9817 millis. update t_blog
         SET title='Java笔记'
            ,
                content='* 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

  ```java
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
 ```
* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:34:47.002' 
        where id=?  
 
 2020-11-19 19:34:47,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20015} clearParameters.   
 
 2020-11-19 19:34:47,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:47,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:47,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20016} created. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:34:47,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20016} Parameters : [12]  
 
 2020-11-19 19:34:47,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20016} Types : [INTEGER]  
 
 2020-11-19 19:34:47,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20016} executed. 6.813299 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:34:47,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20016} clearParameters.   
 
 2020-11-19 19:34:47,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:47,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:47,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20017} created. delete from t_blog_type where bid=?  
 
 2020-11-19 19:34:47,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20017} Parameters : [12]  
 
 2020-11-19 19:34:47,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20017} Types : [INTEGER]  
 
 2020-11-19 19:34:47,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20017} executed. 6.4023 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 19:34:47,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20017} clearParameters.   
 
 2020-11-19 19:34:47,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:47,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:47,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:34:47,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} Parameters : [null, 1, 12]  
 
 2020-11-19 19:34:47,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:34:47,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} executed. 7.0152 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:34:47,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} clearParameters.   
 
 2020-11-19 19:34:47,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:47,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:47,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} Parameters : [null, 5, 12]  
 
 2020-11-19 19:34:47,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:34:47,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} executed. 6.2542 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:34:47,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20018} clearParameters.   
 
 2020-11-19 19:34:47,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:47,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:47,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20019} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:34:47,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20019} Parameters : [null, 12, 8]  
 
 2020-11-19 19:34:47,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20019} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:34:47,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20019} executed. 6.1053 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:34:47,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20019} clearParameters.   
 
 2020-11-19 19:34:47,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:47,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:47,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:34:47,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} Parameters : [1]  
 
 2020-11-19 19:34:47,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} Types : [INTEGER]  
 
 2020-11-19 19:34:47,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} executed. 2.014899 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:34:47,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20020, rs-50028} open  
 
 2020-11-19 19:34:47,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20020, rs-50028} Header: [count(0)]  
 
 2020-11-19 19:34:47,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20020, rs-50028} Result: [2]  
 
 2020-11-19 19:34:47,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20020, rs-50028} closed  
 
 2020-11-19 19:34:47,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} clearParameters.   
 
 2020-11-19 19:34:47,115 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:34:47,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} Parameters : [1, 5]  
 
 2020-11-19 19:34:47,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:34:47,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} executed. 1.996601 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:34:47,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50029} open  
 
 2020-11-19 19:34:47,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50029} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:34:47,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50029} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:34:47,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50029} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:34:47,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50029} closed  
 
 2020-11-19 19:34:47,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} clearParameters.   
 
 2020-11-19 19:34:47,123 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:48,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:48,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} created. select * from t_types  
 
 2020-11-19 19:34:48,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Parameters : []  
 
 2020-11-19 19:34:48,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Types : []  
 
 2020-11-19 19:34:48,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} executed. 2.1052 millis. select * from t_types  
 
 2020-11-19 19:34:48,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} open  
 
 2020-11-19 19:34:48,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} Header: [id, name]  
 
 2020-11-19 19:34:48,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} Result: [8, 方法论]  
 
 2020-11-19 19:34:48,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} Result: [9, 理论类]  
 
 2020-11-19 19:34:48,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} Result: [21, 错误日记]  
 
 2020-11-19 19:34:48,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} Result: [23, 开发日记]  
 
 2020-11-19 19:34:48,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} Result: [24, 实践论]  
 
 2020-11-19 19:34:48,345 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} Result: [25, 想法论]  
 
 2020-11-19 19:34:48,346 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50030} closed  
 
 2020-11-19 19:34:48,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} clearParameters.   
 
 2020-11-19 19:34:48,347 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:48,348 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:48,349 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} created. select * from t_tages  
 
 2020-11-19 19:34:48,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Parameters : []  
 
 2020-11-19 19:34:48,350 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Types : []  
 
 2020-11-19 19:34:48,352 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} executed. 2.3986 millis. select * from t_tages  
 
 2020-11-19 19:34:48,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} open  
 
 2020-11-19 19:34:48,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} Header: [id, tage]  
 
 2020-11-19 19:34:48,354 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} Result: [1, 学习日记]  
 
 2020-11-19 19:34:48,355 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} Result: [2, 错误笔记]  
 
 2020-11-19 19:34:48,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} Result: [3, 数据库笔记]  
 
 2020-11-19 19:34:48,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} Result: [4, 程序运行日记]  
 
 2020-11-19 19:34:48,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} Result: [5, 开发日记]  
 
 2020-11-19 19:34:48,357 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} Result: [8, 开发手册]  
 
 2020-11-19 19:34:48,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} Result: [10, 搭建日记]  
 
 2020-11-19 19:34:48,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50031} closed  
 
 2020-11-19 19:34:48,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} clearParameters.   
 
 2020-11-19 19:34:48,360 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:48,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:48,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:34:48,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Parameters : []  
 
 2020-11-19 19:34:48,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Types : []  
 
 2020-11-19 19:34:48,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} executed. 2.0578 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:34:48,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50032} open  
 
 2020-11-19 19:34:48,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50032} Header: [count(0)]  
 
 2020-11-19 19:34:48,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50032} Result: [2]  
 
 2020-11-19 19:34:48,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50032} closed  
 
 2020-11-19 19:34:48,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} clearParameters.   
 
 2020-11-19 19:34:48,371 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:34:48,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Parameters : [4]  
 
 2020-11-19 19:34:48,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Types : [INTEGER]  
 
 2020-11-19 19:34:48,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} executed. 2.517601 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:34:48,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50033} open  
 
 2020-11-19 19:34:48,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50033} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:34:48,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50033} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:34:48,378 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50033} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

  ```java
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
 ```
* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:34:48,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50033} closed  
 
 2020-11-19 19:34:48,381 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} clearParameters.   
 
 2020-11-19 19:34:48,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:49,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:49,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:34:49,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} Parameters : [11]  
 
 2020-11-19 19:34:49,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} Types : [INTEGER]  
 
 2020-11-19 19:34:49,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} executed. 2.5901 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:34:49,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50034} open  
 
 2020-11-19 19:34:49,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50034} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:34:49,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50034} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:34:49,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50034} closed  
 
 2020-11-19 19:34:49,677 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} clearParameters.   
 
 2020-11-19 19:34:49,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:53,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:53,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Parameters : []  
 
 2020-11-19 19:34:53,465 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Types : []  
 
 2020-11-19 19:34:53,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} executed. 2.3086 millis. select * from t_types  
 
 2020-11-19 19:34:53,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} open  
 
 2020-11-19 19:34:53,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} Header: [id, name]  
 
 2020-11-19 19:34:53,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} Result: [8, 方法论]  
 
 2020-11-19 19:34:53,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} Result: [9, 理论类]  
 
 2020-11-19 19:34:53,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} Result: [21, 错误日记]  
 
 2020-11-19 19:34:53,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} Result: [23, 开发日记]  
 
 2020-11-19 19:34:53,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} Result: [24, 实践论]  
 
 2020-11-19 19:34:53,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} Result: [25, 想法论]  
 
 2020-11-19 19:34:53,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50035} closed  
 
 2020-11-19 19:34:53,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} clearParameters.   
 
 2020-11-19 19:34:53,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:53,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:53,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Parameters : []  
 
 2020-11-19 19:34:53,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Types : []  
 
 2020-11-19 19:34:53,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} executed. 2.188 millis. select * from t_tages  
 
 2020-11-19 19:34:53,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} open  
 
 2020-11-19 19:34:53,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} Header: [id, tage]  
 
 2020-11-19 19:34:53,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} Result: [1, 学习日记]  
 
 2020-11-19 19:34:53,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} Result: [2, 错误笔记]  
 
 2020-11-19 19:34:53,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} Result: [3, 数据库笔记]  
 
 2020-11-19 19:34:53,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} Result: [4, 程序运行日记]  
 
 2020-11-19 19:34:53,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} Result: [5, 开发日记]  
 
 2020-11-19 19:34:53,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} Result: [8, 开发手册]  
 
 2020-11-19 19:34:53,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} Result: [10, 搭建日记]  
 
 2020-11-19 19:34:53,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50036} closed  
 
 2020-11-19 19:34:53,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} clearParameters.   
 
 2020-11-19 19:34:53,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:53,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:53,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Parameters : []  
 
 2020-11-19 19:34:53,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Types : []  
 
 2020-11-19 19:34:53,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} executed. 2.3293 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:34:53,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50037} open  
 
 2020-11-19 19:34:53,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50037} Header: [count(0)]  
 
 2020-11-19 19:34:53,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50037} Result: [2]  
 
 2020-11-19 19:34:53,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50037} closed  
 
 2020-11-19 19:34:53,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} clearParameters.   
 
 2020-11-19 19:34:53,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Parameters : [4]  
 
 2020-11-19 19:34:53,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Types : [INTEGER]  
 
 2020-11-19 19:34:53,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} executed. 2.6123 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:34:53,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50038} open  
 
 2020-11-19 19:34:53,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50038} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:34:53,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50038} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:34:53,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50038} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

  ```java
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
 ```
* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:34:53,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50038} closed  
 
 2020-11-19 19:34:53,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} clearParameters.   
 
 2020-11-19 19:34:53,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:34:54,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:34:54,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} Parameters : [12]  
 
 2020-11-19 19:34:54,445 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} Types : [INTEGER]  
 
 2020-11-19 19:34:54,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} executed. 3.1261 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:34:54,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50039} open  
 
 2020-11-19 19:34:54,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50039} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:34:54,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50039} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

  ```java
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
 ```
* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:34:54,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50039} closed  
 
 2020-11-19 19:34:54,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} clearParameters.   
 
 2020-11-19 19:34:54,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:13,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:13,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Parameters : []  
 
 2020-11-19 19:35:13,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Types : []  
 
 2020-11-19 19:35:13,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} executed. 1.846199 millis. select * from t_types  
 
 2020-11-19 19:35:13,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} open  
 
 2020-11-19 19:35:13,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} Header: [id, name]  
 
 2020-11-19 19:35:13,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} Result: [8, 方法论]  
 
 2020-11-19 19:35:13,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} Result: [9, 理论类]  
 
 2020-11-19 19:35:13,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} Result: [21, 错误日记]  
 
 2020-11-19 19:35:13,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} Result: [23, 开发日记]  
 
 2020-11-19 19:35:13,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} Result: [24, 实践论]  
 
 2020-11-19 19:35:13,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} Result: [25, 想法论]  
 
 2020-11-19 19:35:13,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50040} closed  
 
 2020-11-19 19:35:13,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} clearParameters.   
 
 2020-11-19 19:35:13,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:13,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:13,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Parameters : []  
 
 2020-11-19 19:35:13,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Types : []  
 
 2020-11-19 19:35:13,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} executed. 1.983801 millis. select * from t_tages  
 
 2020-11-19 19:35:13,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} open  
 
 2020-11-19 19:35:13,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} Header: [id, tage]  
 
 2020-11-19 19:35:13,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} Result: [1, 学习日记]  
 
 2020-11-19 19:35:13,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} Result: [2, 错误笔记]  
 
 2020-11-19 19:35:13,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} Result: [3, 数据库笔记]  
 
 2020-11-19 19:35:13,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} Result: [4, 程序运行日记]  
 
 2020-11-19 19:35:13,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} Result: [5, 开发日记]  
 
 2020-11-19 19:35:13,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} Result: [8, 开发手册]  
 
 2020-11-19 19:35:13,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} Result: [10, 搭建日记]  
 
 2020-11-19 19:35:13,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50041} closed  
 
 2020-11-19 19:35:13,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} clearParameters.   
 
 2020-11-19 19:35:13,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:13,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:13,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Parameters : []  
 
 2020-11-19 19:35:13,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Types : []  
 
 2020-11-19 19:35:13,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} executed. 1.945799 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:35:13,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50042} open  
 
 2020-11-19 19:35:13,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50042} Header: [count(0)]  
 
 2020-11-19 19:35:13,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50042} Result: [2]  
 
 2020-11-19 19:35:13,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50042} closed  
 
 2020-11-19 19:35:13,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} clearParameters.   
 
 2020-11-19 19:35:13,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Parameters : [4]  
 
 2020-11-19 19:35:13,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Types : [INTEGER]  
 
 2020-11-19 19:35:13,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} executed. 2.4395 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:35:13,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50043} open  
 
 2020-11-19 19:35:13,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50043} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:35:13,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50043} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:35:13,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50043} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

  ```java
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
 ```
* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:35:13,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50043} closed  
 
 2020-11-19 19:35:13,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} clearParameters.   
 
 2020-11-19 19:35:13,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:18,955 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:18,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Parameters : []  
 
 2020-11-19 19:35:18,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Types : []  
 
 2020-11-19 19:35:18,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} executed. 2.0572 millis. select * from t_tages  
 
 2020-11-19 19:35:18,959 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} open  
 
 2020-11-19 19:35:18,960 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} Header: [id, tage]  
 
 2020-11-19 19:35:18,961 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} Result: [1, 学习日记]  
 
 2020-11-19 19:35:18,962 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} Result: [2, 错误笔记]  
 
 2020-11-19 19:35:18,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} Result: [3, 数据库笔记]  
 
 2020-11-19 19:35:18,963 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} Result: [4, 程序运行日记]  
 
 2020-11-19 19:35:18,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} Result: [5, 开发日记]  
 
 2020-11-19 19:35:18,964 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} Result: [8, 开发手册]  
 
 2020-11-19 19:35:18,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} Result: [10, 搭建日记]  
 
 2020-11-19 19:35:18,966 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50044} closed  
 
 2020-11-19 19:35:18,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} clearParameters.   
 
 2020-11-19 19:35:18,967 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:18,968 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:18,969 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Parameters : []  
 
 2020-11-19 19:35:18,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Types : []  
 
 2020-11-19 19:35:18,971 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} executed. 1.9847 millis. select * from t_types  
 
 2020-11-19 19:35:18,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} open  
 
 2020-11-19 19:35:18,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} Header: [id, name]  
 
 2020-11-19 19:35:18,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} Result: [8, 方法论]  
 
 2020-11-19 19:35:18,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} Result: [9, 理论类]  
 
 2020-11-19 19:35:18,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} Result: [21, 错误日记]  
 
 2020-11-19 19:35:18,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} Result: [23, 开发日记]  
 
 2020-11-19 19:35:18,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} Result: [24, 实践论]  
 
 2020-11-19 19:35:18,976 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} Result: [25, 想法论]  
 
 2020-11-19 19:35:18,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50045} closed  
 
 2020-11-19 19:35:18,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} clearParameters.   
 
 2020-11-19 19:35:18,978 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:20,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:20,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} Parameters : [1]  
 
 2020-11-19 19:35:20,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} Types : [INTEGER]  
 
 2020-11-19 19:35:20,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} executed. 2.863899 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:35:20,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20020, rs-50046} open  
 
 2020-11-19 19:35:20,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20020, rs-50046} Header: [count(0)]  
 
 2020-11-19 19:35:20,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20020, rs-50046} Result: [2]  
 
 2020-11-19 19:35:20,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20020, rs-50046} closed  
 
 2020-11-19 19:35:20,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20020} clearParameters.   
 
 2020-11-19 19:35:20,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} Parameters : [1, 5]  
 
 2020-11-19 19:35:20,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:35:20,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} executed. 2.938799 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:35:20,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50047} open  
 
 2020-11-19 19:35:20,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50047} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:35:20,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50047} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:35:20,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50047} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:35:20,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20021, rs-50047} closed  
 
 2020-11-19 19:35:20,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20021} clearParameters.   
 
 2020-11-19 19:35:20,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:22,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:22,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:35:22,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} Parameters : [12]  
 
 2020-11-19 19:35:22,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} Types : [INTEGER]  
 
 2020-11-19 19:35:22,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} executed. 3.3026 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:35:22,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50048} open  
 
 2020-11-19 19:35:22,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50048} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 19:35:22,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50048} Result: [12, Java笔记, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

  ```java
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
 ```
* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 19:35:22,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50048} Result: [12, Java笔记, * 数据类型的从小到大顺序
```
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

  ```java
===对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。
 ```
* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 5, 开发日记, 8, 方法论]  
 
 2020-11-19 19:35:22,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50048} closed  
 
 2020-11-19 19:35:22,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} clearParameters.   
 
 2020-11-19 19:35:22,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:22,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:22,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Parameters : []  
 
 2020-11-19 19:35:22,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} Types : []  
 
 2020-11-19 19:35:22,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} executed. 2.6781 millis. select * from t_tages  
 
 2020-11-19 19:35:22,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} open  
 
 2020-11-19 19:35:22,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} Header: [id, tage]  
 
 2020-11-19 19:35:22,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} Result: [1, 学习日记]  
 
 2020-11-19 19:35:22,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} Result: [2, 错误笔记]  
 
 2020-11-19 19:35:22,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} Result: [3, 数据库笔记]  
 
 2020-11-19 19:35:22,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} Result: [4, 程序运行日记]  
 
 2020-11-19 19:35:22,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} Result: [5, 开发日记]  
 
 2020-11-19 19:35:22,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} Result: [8, 开发手册]  
 
 2020-11-19 19:35:22,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} Result: [10, 搭建日记]  
 
 2020-11-19 19:35:22,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20023, rs-50049} closed  
 
 2020-11-19 19:35:22,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20023} clearParameters.   
 
 2020-11-19 19:35:22,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:35:22,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 19:35:22,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Parameters : []  
 
 2020-11-19 19:35:22,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} Types : []  
 
 2020-11-19 19:35:22,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} executed. 2.053299 millis. select * from t_types  
 
 2020-11-19 19:35:22,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} open  
 
 2020-11-19 19:35:22,096 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} Header: [id, name]  
 
 2020-11-19 19:35:22,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} Result: [8, 方法论]  
 
 2020-11-19 19:35:22,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} Result: [9, 理论类]  
 
 2020-11-19 19:35:22,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} Result: [21, 错误日记]  
 
 2020-11-19 19:35:22,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} Result: [23, 开发日记]  
 
 2020-11-19 19:35:22,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} Result: [24, 实践论]  
 
 2020-11-19 19:35:22,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} Result: [25, 想法论]  
 
 2020-11-19 19:35:22,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20022, rs-50050} closed  
 
 2020-11-19 19:35:22,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20022} clearParameters.   
 
 2020-11-19 19:35:22,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 19:37:36,184 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} closed  
 
 2020-11-19 19:37:36,201 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008,procId-821} connected  
 
 2020-11-19 19:37:36,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:36,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20028} created. update t_blog
         SET title='Java笔记'
            ,
                content='* 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:37:36.182' 
        where id=?  
 
 2020-11-19 19:37:36,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20028} Parameters : [12]  
 
 2020-11-19 19:37:36,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20028} Types : [INTEGER]  
 
 2020-11-19 19:37:36,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20028} executed. 17.9317 millis. update t_blog
         SET title='Java笔记'
            ,
                content='* 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:37:36.182' 
        where id=?  
 
 2020-11-19 19:37:36,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20028} clearParameters.   
 
 2020-11-19 19:37:36,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:36,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:36,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20029} created. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:37:36,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20029} Parameters : [12]  
 
 2020-11-19 19:37:36,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20029} Types : [INTEGER]  
 
 2020-11-19 19:37:36,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20029} executed. 6.5136 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:37:36,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20029} clearParameters.   
 
 2020-11-19 19:37:36,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:36,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:36,239 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20030} created. delete from t_blog_type where bid=?  
 
 2020-11-19 19:37:36,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20030} Parameters : [12]  
 
 2020-11-19 19:37:36,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20030} Types : [INTEGER]  
 
 2020-11-19 19:37:36,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20030} executed. 6.5818 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 19:37:36,248 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20030} clearParameters.   
 
 2020-11-19 19:37:36,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:36,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:36,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:37:36,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} Parameters : [null, 1, 12]  
 
 2020-11-19 19:37:36,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:37:36,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} executed. 5.130599 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:37:36,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} clearParameters.   
 
 2020-11-19 19:37:36,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:36,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:36,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} Parameters : [null, 5, 12]  
 
 2020-11-19 19:37:36,261 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:37:36,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} executed. 5.945699 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:37:36,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20031} clearParameters.   
 
 2020-11-19 19:37:36,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:36,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:36,269 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20032} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:37:36,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20032} Parameters : [null, 12, 8]  
 
 2020-11-19 19:37:36,272 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20032} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:37:36,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20032} executed. 4.8764 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:37:36,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20032} clearParameters.   
 
 2020-11-19 19:37:36,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:36,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:36,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20033} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:37:36,285 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20033} Parameters : [1]  
 
 2020-11-19 19:37:36,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20033} Types : [INTEGER]  
 
 2020-11-19 19:37:36,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20033} executed. 2.9278 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:37:36,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20033, rs-50051} open  
 
 2020-11-19 19:37:36,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20033, rs-50051} Header: [count(0)]  
 
 2020-11-19 19:37:36,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20033, rs-50051} Result: [2]  
 
 2020-11-19 19:37:36,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20033, rs-50051} closed  
 
 2020-11-19 19:37:36,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20033} clearParameters.   
 
 2020-11-19 19:37:36,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20034} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:37:36,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20034} Parameters : [1, 5]  
 
 2020-11-19 19:37:36,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20034} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:37:36,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20034} executed. 3.7225 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:37:36,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20034, rs-50052} open  
 
 2020-11-19 19:37:36,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20034, rs-50052} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:37:36,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20034, rs-50052} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:37:36,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20034, rs-50052} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:37:36,308 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20034, rs-50052} closed  
 
 2020-11-19 19:37:36,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20034} clearParameters.   
 
 2020-11-19 19:37:36,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:37,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:37,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20035} created. select * from t_types  
 
 2020-11-19 19:37:37,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20035} Parameters : []  
 
 2020-11-19 19:37:37,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20035} Types : []  
 
 2020-11-19 19:37:37,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20035} executed. 2.553 millis. select * from t_types  
 
 2020-11-19 19:37:37,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} open  
 
 2020-11-19 19:37:37,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} Header: [id, name]  
 
 2020-11-19 19:37:37,602 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} Result: [8, 方法论]  
 
 2020-11-19 19:37:37,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} Result: [9, 理论类]  
 
 2020-11-19 19:37:37,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} Result: [21, 错误日记]  
 
 2020-11-19 19:37:37,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} Result: [23, 开发日记]  
 
 2020-11-19 19:37:37,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} Result: [24, 实践论]  
 
 2020-11-19 19:37:37,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} Result: [25, 想法论]  
 
 2020-11-19 19:37:37,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20035, rs-50053} closed  
 
 2020-11-19 19:37:37,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20035} clearParameters.   
 
 2020-11-19 19:37:37,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:37,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:37,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20036} created. select * from t_tages  
 
 2020-11-19 19:37:37,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20036} Parameters : []  
 
 2020-11-19 19:37:37,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20036} Types : []  
 
 2020-11-19 19:37:37,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20036} executed. 1.9563 millis. select * from t_tages  
 
 2020-11-19 19:37:37,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} open  
 
 2020-11-19 19:37:37,613 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} Header: [id, tage]  
 
 2020-11-19 19:37:37,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} Result: [1, 学习日记]  
 
 2020-11-19 19:37:37,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} Result: [2, 错误笔记]  
 
 2020-11-19 19:37:37,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} Result: [3, 数据库笔记]  
 
 2020-11-19 19:37:37,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} Result: [4, 程序运行日记]  
 
 2020-11-19 19:37:37,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} Result: [5, 开发日记]  
 
 2020-11-19 19:37:37,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} Result: [8, 开发手册]  
 
 2020-11-19 19:37:37,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} Result: [10, 搭建日记]  
 
 2020-11-19 19:37:37,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20036, rs-50054} closed  
 
 2020-11-19 19:37:37,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20036} clearParameters.   
 
 2020-11-19 19:37:37,619 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:37,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:37,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20037} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:37:37,625 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20037} Parameters : []  
 
 2020-11-19 19:37:37,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20037} Types : []  
 
 2020-11-19 19:37:37,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20037} executed. 2.358099 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:37:37,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20037, rs-50055} open  
 
 2020-11-19 19:37:37,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20037, rs-50055} Header: [count(0)]  
 
 2020-11-19 19:37:37,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20037, rs-50055} Result: [2]  
 
 2020-11-19 19:37:37,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20037, rs-50055} closed  
 
 2020-11-19 19:37:37,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20037} clearParameters.   
 
 2020-11-19 19:37:37,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20038} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:37:37,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20038} Parameters : [4]  
 
 2020-11-19 19:37:37,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20038} Types : [INTEGER]  
 
 2020-11-19 19:37:37,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20038} executed. 2.522199 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:37:37,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20038, rs-50056} open  
 
 2020-11-19 19:37:37,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20038, rs-50056} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:37:37,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20038, rs-50056} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:37:37,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20038, rs-50056} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:37:37,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20038, rs-50056} closed  
 
 2020-11-19 19:37:37,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20038} clearParameters.   
 
 2020-11-19 19:37:37,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:37:39,005 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-connect  
 
 2020-11-19 19:37:39,006 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20039} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:37:39,007 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20039} Parameters : [12]  
 
 2020-11-19 19:37:39,008 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20039} Types : [INTEGER]  
 
 2020-11-19 19:37:39,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20039} executed. 2.777101 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:37:39,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20039, rs-50057} open  
 
 2020-11-19 19:37:39,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20039, rs-50057} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:37:39,016 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20039, rs-50057} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:37:39,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10008, pstmt-20039, rs-50057} closed  
 
 2020-11-19 19:37:39,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10008, pstmt-20039} clearParameters.   
 
 2020-11-19 19:37:39,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} pool-recycle  
 
 2020-11-19 19:43:32,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10008} closed  
 
 2020-11-19 19:43:32,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009,procId-822} connected  
 
 2020-11-19 19:43:32,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-connect  
 
 2020-11-19 19:43:32,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} created. select * from t_types  
 
 2020-11-19 19:43:32,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} Parameters : []  
 
 2020-11-19 19:43:32,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} Types : []  
 
 2020-11-19 19:43:32,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} executed. 2.516599 millis. select * from t_types  
 
 2020-11-19 19:43:32,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} open  
 
 2020-11-19 19:43:32,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} Header: [id, name]  
 
 2020-11-19 19:43:32,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} Result: [8, 方法论]  
 
 2020-11-19 19:43:32,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} Result: [9, 理论类]  
 
 2020-11-19 19:43:32,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} Result: [21, 错误日记]  
 
 2020-11-19 19:43:32,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} Result: [23, 开发日记]  
 
 2020-11-19 19:43:32,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} Result: [24, 实践论]  
 
 2020-11-19 19:43:32,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} Result: [25, 想法论]  
 
 2020-11-19 19:43:32,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50058} closed  
 
 2020-11-19 19:43:32,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} clearParameters.   
 
 2020-11-19 19:43:32,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-recycle  
 
 2020-11-19 19:43:32,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-connect  
 
 2020-11-19 19:43:32,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} created. select * from t_tages  
 
 2020-11-19 19:43:32,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} Parameters : []  
 
 2020-11-19 19:43:32,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} Types : []  
 
 2020-11-19 19:43:32,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} executed. 1.7463 millis. select * from t_tages  
 
 2020-11-19 19:43:32,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} open  
 
 2020-11-19 19:43:32,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} Header: [id, tage]  
 
 2020-11-19 19:43:32,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} Result: [1, 学习日记]  
 
 2020-11-19 19:43:32,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} Result: [2, 错误笔记]  
 
 2020-11-19 19:43:32,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} Result: [3, 数据库笔记]  
 
 2020-11-19 19:43:32,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} Result: [4, 程序运行日记]  
 
 2020-11-19 19:43:32,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} Result: [5, 开发日记]  
 
 2020-11-19 19:43:32,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} Result: [8, 开发手册]  
 
 2020-11-19 19:43:32,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} Result: [10, 搭建日记]  
 
 2020-11-19 19:43:32,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50059} closed  
 
 2020-11-19 19:43:32,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} clearParameters.   
 
 2020-11-19 19:43:32,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-recycle  
 
 2020-11-19 19:43:32,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-connect  
 
 2020-11-19 19:43:32,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20042} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:43:32,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20042} Parameters : []  
 
 2020-11-19 19:43:32,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20042} Types : []  
 
 2020-11-19 19:43:32,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20042} executed. 1.799401 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:43:32,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20042, rs-50060} open  
 
 2020-11-19 19:43:32,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20042, rs-50060} Header: [count(0)]  
 
 2020-11-19 19:43:32,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20042, rs-50060} Result: [2]  
 
 2020-11-19 19:43:32,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20042, rs-50060} closed  
 
 2020-11-19 19:43:32,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20042} clearParameters.   
 
 2020-11-19 19:43:32,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20043} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:43:32,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20043} Parameters : [4]  
 
 2020-11-19 19:43:32,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20043} Types : [INTEGER]  
 
 2020-11-19 19:43:32,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20043} executed. 2.0789 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:43:32,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20043, rs-50061} open  
 
 2020-11-19 19:43:32,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20043, rs-50061} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:43:32,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20043, rs-50061} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:43:32,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20043, rs-50061} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:43:32,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20043, rs-50061} closed  
 
 2020-11-19 19:43:32,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20043} clearParameters.   
 
 2020-11-19 19:43:32,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-recycle  
 
 2020-11-19 19:43:38,356 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-connect  
 
 2020-11-19 19:43:38,358 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20044} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:43:38,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20044} Parameters : [1]  
 
 2020-11-19 19:43:38,359 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20044} Types : [INTEGER]  
 
 2020-11-19 19:43:38,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20044} executed. 2.6062 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:43:38,362 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20044, rs-50062} open  
 
 2020-11-19 19:43:38,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20044, rs-50062} Header: [count(0)]  
 
 2020-11-19 19:43:38,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20044, rs-50062} Result: [2]  
 
 2020-11-19 19:43:38,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20044, rs-50062} closed  
 
 2020-11-19 19:43:38,366 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20044} clearParameters.   
 
 2020-11-19 19:43:38,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20045} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:43:38,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20045} Parameters : [1, 5]  
 
 2020-11-19 19:43:38,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20045} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:43:38,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20045} executed. 3.102001 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:43:38,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20045, rs-50063} open  
 
 2020-11-19 19:43:38,373 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20045, rs-50063} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:43:38,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20045, rs-50063} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:43:38,375 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20045, rs-50063} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:43:38,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20045, rs-50063} closed  
 
 2020-11-19 19:43:38,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20045} clearParameters.   
 
 2020-11-19 19:43:38,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-recycle  
 
 2020-11-19 19:43:39,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-connect  
 
 2020-11-19 19:43:39,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20046} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:43:39,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20046} Parameters : [12]  
 
 2020-11-19 19:43:39,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20046} Types : [INTEGER]  
 
 2020-11-19 19:43:39,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20046} executed. 5.043299 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:43:39,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20046, rs-50064} open  
 
 2020-11-19 19:43:39,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20046, rs-50064} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 19:43:39,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20046, rs-50064} Result: [12, Java笔记, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 19:43:39,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20046, rs-50064} Result: [12, Java笔记, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
``` java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
 ```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 5, 开发日记, 8, 方法论]  
 
 2020-11-19 19:43:39,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20046, rs-50064} closed  
 
 2020-11-19 19:43:39,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20046} clearParameters.   
 
 2020-11-19 19:43:39,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-recycle  
 
 2020-11-19 19:43:39,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-connect  
 
 2020-11-19 19:43:39,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} Parameters : []  
 
 2020-11-19 19:43:39,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} Types : []  
 
 2020-11-19 19:43:39,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} executed. 1.501099 millis. select * from t_tages  
 
 2020-11-19 19:43:39,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} open  
 
 2020-11-19 19:43:39,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} Header: [id, tage]  
 
 2020-11-19 19:43:39,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} Result: [1, 学习日记]  
 
 2020-11-19 19:43:39,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} Result: [2, 错误笔记]  
 
 2020-11-19 19:43:39,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} Result: [3, 数据库笔记]  
 
 2020-11-19 19:43:39,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} Result: [4, 程序运行日记]  
 
 2020-11-19 19:43:39,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} Result: [5, 开发日记]  
 
 2020-11-19 19:43:39,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} Result: [8, 开发手册]  
 
 2020-11-19 19:43:39,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} Result: [10, 搭建日记]  
 
 2020-11-19 19:43:39,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20041, rs-50065} closed  
 
 2020-11-19 19:43:39,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20041} clearParameters.   
 
 2020-11-19 19:43:39,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-recycle  
 
 2020-11-19 19:43:39,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-connect  
 
 2020-11-19 19:43:39,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} Parameters : []  
 
 2020-11-19 19:43:39,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} Types : []  
 
 2020-11-19 19:43:39,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} executed. 2.0765 millis. select * from t_types  
 
 2020-11-19 19:43:39,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} open  
 
 2020-11-19 19:43:39,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} Header: [id, name]  
 
 2020-11-19 19:43:39,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} Result: [8, 方法论]  
 
 2020-11-19 19:43:39,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} Result: [9, 理论类]  
 
 2020-11-19 19:43:39,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} Result: [21, 错误日记]  
 
 2020-11-19 19:43:39,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} Result: [23, 开发日记]  
 
 2020-11-19 19:43:39,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} Result: [24, 实践论]  
 
 2020-11-19 19:43:39,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} Result: [25, 想法论]  
 
 2020-11-19 19:43:39,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10009, pstmt-20040, rs-50066} closed  
 
 2020-11-19 19:43:39,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10009, pstmt-20040} clearParameters.   
 
 2020-11-19 19:43:39,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} pool-recycle  
 
 2020-11-19 19:44:40,623 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10009} closed  
 
 2020-11-19 19:44:40,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010,procId-823} connected  
 
 2020-11-19 19:44:40,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:40,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20047} created. update t_blog
         SET title='Java笔记'
            ,
                content='* 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:44:40.621' 
        where id=?  
 
 2020-11-19 19:44:40,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20047} Parameters : [12]  
 
 2020-11-19 19:44:40,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20047} Types : [INTEGER]  
 
 2020-11-19 19:44:40,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20047} executed. 16.8059 millis. update t_blog
         SET title='Java笔记'
            ,
                content='* 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:44:40.621' 
        where id=?  
 
 2020-11-19 19:44:40,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20047} clearParameters.   
 
 2020-11-19 19:44:40,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:40,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:40,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} created. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:44:40,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} Parameters : [12]  
 
 2020-11-19 19:44:40,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} Types : [INTEGER]  
 
 2020-11-19 19:44:40,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} executed. 8.6912 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:44:40,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} clearParameters.   
 
 2020-11-19 19:44:40,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:40,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:40,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} created. delete from t_blog_type where bid=?  
 
 2020-11-19 19:44:40,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} Parameters : [12]  
 
 2020-11-19 19:44:40,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} Types : [INTEGER]  
 
 2020-11-19 19:44:40,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} executed. 6.633499 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 19:44:40,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} clearParameters.   
 
 2020-11-19 19:44:40,682 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:40,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:40,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:44:40,686 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} Parameters : [null, 1, 12]  
 
 2020-11-19 19:44:40,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:44:40,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} executed. 6.0364 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:44:40,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} clearParameters.   
 
 2020-11-19 19:44:40,694 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:40,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:40,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} Parameters : [null, 5, 12]  
 
 2020-11-19 19:44:40,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:44:40,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} executed. 6.076499 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:44:40,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} clearParameters.   
 
 2020-11-19 19:44:40,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:40,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:40,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:44:40,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} Parameters : [null, 12, 8]  
 
 2020-11-19 19:44:40,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:44:40,721 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} executed. 9.184899 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:44:40,723 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} clearParameters.   
 
 2020-11-19 19:44:40,724 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:40,737 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:40,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:44:40,741 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} Parameters : [1]  
 
 2020-11-19 19:44:40,742 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} Types : [INTEGER]  
 
 2020-11-19 19:44:40,746 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} executed. 4.4199 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:44:40,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50067} open  
 
 2020-11-19 19:44:40,748 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50067} Header: [count(0)]  
 
 2020-11-19 19:44:40,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50067} Result: [2]  
 
 2020-11-19 19:44:40,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50067} closed  
 
 2020-11-19 19:44:40,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} clearParameters.   
 
 2020-11-19 19:44:40,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:44:40,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} Parameters : [1, 5]  
 
 2020-11-19 19:44:40,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:44:40,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} executed. 4.5596 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:44:40,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50068} open  
 
 2020-11-19 19:44:40,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50068} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:44:40,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50068} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:44:40,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50068} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:44:40,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50068} closed  
 
 2020-11-19 19:44:40,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} clearParameters.   
 
 2020-11-19 19:44:40,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:42,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:42,414 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} created. select * from t_types  
 
 2020-11-19 19:44:42,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Parameters : []  
 
 2020-11-19 19:44:42,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Types : []  
 
 2020-11-19 19:44:42,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} executed. 2.922899 millis. select * from t_types  
 
 2020-11-19 19:44:42,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} open  
 
 2020-11-19 19:44:42,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} Header: [id, name]  
 
 2020-11-19 19:44:42,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} Result: [8, 方法论]  
 
 2020-11-19 19:44:42,421 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} Result: [9, 理论类]  
 
 2020-11-19 19:44:42,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} Result: [21, 错误日记]  
 
 2020-11-19 19:44:42,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} Result: [23, 开发日记]  
 
 2020-11-19 19:44:42,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} Result: [24, 实践论]  
 
 2020-11-19 19:44:42,424 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} Result: [25, 想法论]  
 
 2020-11-19 19:44:42,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50069} closed  
 
 2020-11-19 19:44:42,425 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} clearParameters.   
 
 2020-11-19 19:44:42,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:42,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:42,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} created. select * from t_tages  
 
 2020-11-19 19:44:42,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Parameters : []  
 
 2020-11-19 19:44:42,428 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Types : []  
 
 2020-11-19 19:44:42,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} executed. 1.9102 millis. select * from t_tages  
 
 2020-11-19 19:44:42,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} open  
 
 2020-11-19 19:44:42,431 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} Header: [id, tage]  
 
 2020-11-19 19:44:42,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} Result: [1, 学习日记]  
 
 2020-11-19 19:44:42,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} Result: [2, 错误笔记]  
 
 2020-11-19 19:44:42,433 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} Result: [3, 数据库笔记]  
 
 2020-11-19 19:44:42,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} Result: [4, 程序运行日记]  
 
 2020-11-19 19:44:42,435 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} Result: [5, 开发日记]  
 
 2020-11-19 19:44:42,436 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} Result: [8, 开发手册]  
 
 2020-11-19 19:44:42,437 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} Result: [10, 搭建日记]  
 
 2020-11-19 19:44:42,438 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50070} closed  
 
 2020-11-19 19:44:42,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} clearParameters.   
 
 2020-11-19 19:44:42,439 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:42,442 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:42,443 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:44:42,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} Parameters : []  
 
 2020-11-19 19:44:42,444 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} Types : []  
 
 2020-11-19 19:44:42,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} executed. 2.0105 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:44:42,446 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50071} open  
 
 2020-11-19 19:44:42,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50071} Header: [count(0)]  
 
 2020-11-19 19:44:42,447 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50071} Result: [2]  
 
 2020-11-19 19:44:42,448 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50071} closed  
 
 2020-11-19 19:44:42,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} clearParameters.   
 
 2020-11-19 19:44:42,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:44:42,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} Parameters : [4]  
 
 2020-11-19 19:44:42,452 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} Types : [INTEGER]  
 
 2020-11-19 19:44:42,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} executed. 2.2939 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:44:42,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50072} open  
 
 2020-11-19 19:44:42,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50072} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:44:42,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50072} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:44:42,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50072} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:44:42,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50072} closed  
 
 2020-11-19 19:44:42,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} clearParameters.   
 
 2020-11-19 19:44:42,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:43,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:43,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:44:43,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} Parameters : [12]  
 
 2020-11-19 19:44:43,701 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} Types : [INTEGER]  
 
 2020-11-19 19:44:43,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} executed. 2.9903 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:44:43,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50073} open  
 
 2020-11-19 19:44:43,705 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50073} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:44:43,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50073} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:44:43,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50073} closed  
 
 2020-11-19 19:44:43,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} clearParameters.   
 
 2020-11-19 19:44:43,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:57,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:57,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Parameters : []  
 
 2020-11-19 19:44:57,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Types : []  
 
 2020-11-19 19:44:57,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} executed. 3.026999 millis. select * from t_types  
 
 2020-11-19 19:44:57,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} open  
 
 2020-11-19 19:44:57,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} Header: [id, name]  
 
 2020-11-19 19:44:57,776 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} Result: [8, 方法论]  
 
 2020-11-19 19:44:57,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} Result: [9, 理论类]  
 
 2020-11-19 19:44:57,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} Result: [21, 错误日记]  
 
 2020-11-19 19:44:57,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} Result: [23, 开发日记]  
 
 2020-11-19 19:44:57,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} Result: [24, 实践论]  
 
 2020-11-19 19:44:57,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} Result: [25, 想法论]  
 
 2020-11-19 19:44:57,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50074} closed  
 
 2020-11-19 19:44:57,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} clearParameters.   
 
 2020-11-19 19:44:57,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:57,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:57,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Parameters : []  
 
 2020-11-19 19:44:57,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Types : []  
 
 2020-11-19 19:44:57,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} executed. 1.9895 millis. select * from t_tages  
 
 2020-11-19 19:44:57,786 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} open  
 
 2020-11-19 19:44:57,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} Header: [id, tage]  
 
 2020-11-19 19:44:57,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} Result: [1, 学习日记]  
 
 2020-11-19 19:44:57,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} Result: [2, 错误笔记]  
 
 2020-11-19 19:44:57,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} Result: [3, 数据库笔记]  
 
 2020-11-19 19:44:57,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} Result: [4, 程序运行日记]  
 
 2020-11-19 19:44:57,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} Result: [5, 开发日记]  
 
 2020-11-19 19:44:57,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} Result: [8, 开发手册]  
 
 2020-11-19 19:44:57,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} Result: [10, 搭建日记]  
 
 2020-11-19 19:44:57,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50075} closed  
 
 2020-11-19 19:44:57,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} clearParameters.   
 
 2020-11-19 19:44:57,791 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:44:57,793 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:44:57,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} Parameters : []  
 
 2020-11-19 19:44:57,794 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} Types : []  
 
 2020-11-19 19:44:57,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} executed. 1.8125 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:44:57,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50076} open  
 
 2020-11-19 19:44:57,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50076} Header: [count(0)]  
 
 2020-11-19 19:44:57,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50076} Result: [2]  
 
 2020-11-19 19:44:57,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50076} closed  
 
 2020-11-19 19:44:57,798 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} clearParameters.   
 
 2020-11-19 19:44:57,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} Parameters : [4]  
 
 2020-11-19 19:44:57,800 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} Types : [INTEGER]  
 
 2020-11-19 19:44:57,802 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} executed. 2.427401 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:44:57,803 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50077} open  
 
 2020-11-19 19:44:57,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50077} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:44:57,804 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50077} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:44:57,805 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50077} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:44:57,806 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50077} closed  
 
 2020-11-19 19:44:57,807 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} clearParameters.   
 
 2020-11-19 19:44:57,808 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:01,449 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:01,450 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} Parameters : [1]  
 
 2020-11-19 19:45:01,451 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} Types : [INTEGER]  
 
 2020-11-19 19:45:01,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} executed. 2.3117 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:45:01,453 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50078} open  
 
 2020-11-19 19:45:01,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50078} Header: [count(0)]  
 
 2020-11-19 19:45:01,454 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50078} Result: [2]  
 
 2020-11-19 19:45:01,455 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50078} closed  
 
 2020-11-19 19:45:01,456 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} clearParameters.   
 
 2020-11-19 19:45:01,457 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} Parameters : [1, 5]  
 
 2020-11-19 19:45:01,458 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:45:01,459 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} executed. 2.1344 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:45:01,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50079} open  
 
 2020-11-19 19:45:01,460 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50079} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:45:01,461 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50079} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:45:01,462 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50079} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:45:01,463 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50079} closed  
 
 2020-11-19 19:45:01,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} clearParameters.   
 
 2020-11-19 19:45:01,464 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:02,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:02,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20059} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:45:02,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20059} Parameters : [12]  
 
 2020-11-19 19:45:02,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20059} Types : [INTEGER]  
 
 2020-11-19 19:45:02,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20059} executed. 3.136201 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 19:45:02,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20059, rs-50080} open  
 
 2020-11-19 19:45:02,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20059, rs-50080} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 19:45:02,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20059, rs-50080} Result: [12, Java笔记, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 19:45:02,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20059, rs-50080} Result: [12, Java笔记, * 数据类型的从小到大顺序
```java
（byte，short，char)-int-long-float-double
```
* 基本类型：
```java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
```
* 三元运算：需要三个数据才可以进行运算的运算符；
```java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
```
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
```java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 5, 开发日记, 8, 方法论]  
 
 2020-11-19 19:45:02,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20059, rs-50080} closed  
 
 2020-11-19 19:45:02,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20059} clearParameters.   
 
 2020-11-19 19:45:02,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:02,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:02,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Parameters : []  
 
 2020-11-19 19:45:02,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Types : []  
 
 2020-11-19 19:45:02,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} executed. 2.165201 millis. select * from t_tages  
 
 2020-11-19 19:45:02,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} open  
 
 2020-11-19 19:45:02,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} Header: [id, tage]  
 
 2020-11-19 19:45:02,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} Result: [1, 学习日记]  
 
 2020-11-19 19:45:02,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} Result: [2, 错误笔记]  
 
 2020-11-19 19:45:02,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} Result: [3, 数据库笔记]  
 
 2020-11-19 19:45:02,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} Result: [4, 程序运行日记]  
 
 2020-11-19 19:45:02,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} Result: [5, 开发日记]  
 
 2020-11-19 19:45:02,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} Result: [8, 开发手册]  
 
 2020-11-19 19:45:02,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} Result: [10, 搭建日记]  
 
 2020-11-19 19:45:02,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50081} closed  
 
 2020-11-19 19:45:02,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} clearParameters.   
 
 2020-11-19 19:45:02,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:02,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:02,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Parameters : []  
 
 2020-11-19 19:45:02,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Types : []  
 
 2020-11-19 19:45:02,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} executed. 1.394801 millis. select * from t_types  
 
 2020-11-19 19:45:02,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} open  
 
 2020-11-19 19:45:02,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} Header: [id, name]  
 
 2020-11-19 19:45:02,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} Result: [8, 方法论]  
 
 2020-11-19 19:45:02,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} Result: [9, 理论类]  
 
 2020-11-19 19:45:02,516 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} Result: [21, 错误日记]  
 
 2020-11-19 19:45:02,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} Result: [23, 开发日记]  
 
 2020-11-19 19:45:02,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} Result: [24, 实践论]  
 
 2020-11-19 19:45:02,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} Result: [25, 想法论]  
 
 2020-11-19 19:45:02,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50082} closed  
 
 2020-11-19 19:45:02,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} clearParameters.   
 
 2020-11-19 19:45:02,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:18,022 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:18,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20060} created. update t_blog
         SET title='Java笔记'
            ,
                content='* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:45:18.022' 
        where id=?  
 
 2020-11-19 19:45:18,025 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20060} Parameters : [12]  
 
 2020-11-19 19:45:18,026 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20060} Types : [INTEGER]  
 
 2020-11-19 19:45:18,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20060} executed. 17.496401 millis. update t_blog
         SET title='Java笔记'
            ,
                content='* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 19:45:18.022' 
        where id=?  
 
 2020-11-19 19:45:18,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20060} clearParameters.   
 
 2020-11-19 19:45:18,044 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:18,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:18,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} Parameters : [12]  
 
 2020-11-19 19:45:18,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} Types : [INTEGER]  
 
 2020-11-19 19:45:18,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} executed. 8.2882 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 19:45:18,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20048} clearParameters.   
 
 2020-11-19 19:45:18,056 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:18,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:18,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} Parameters : [12]  
 
 2020-11-19 19:45:18,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} Types : [INTEGER]  
 
 2020-11-19 19:45:18,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} executed. 10.0918 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 19:45:18,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20049} clearParameters.   
 
 2020-11-19 19:45:18,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:18,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:18,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} Parameters : [null, 1, 12]  
 
 2020-11-19 19:45:18,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:45:18,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} executed. 4.805301 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:45:18,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} clearParameters.   
 
 2020-11-19 19:45:18,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:18,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:18,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} Parameters : [null, 5, 12]  
 
 2020-11-19 19:45:18,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:45:18,085 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} executed. 6.1985 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:45:18,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20050} clearParameters.   
 
 2020-11-19 19:45:18,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:18,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:18,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} Parameters : [null, 12, 8]  
 
 2020-11-19 19:45:18,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 19:45:18,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} executed. 4.850201 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 19:45:18,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20051} clearParameters.   
 
 2020-11-19 19:45:18,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:18,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:18,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} Parameters : [1]  
 
 2020-11-19 19:45:18,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} Types : [INTEGER]  
 
 2020-11-19 19:45:18,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} executed. 2.9239 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 19:45:18,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50083} open  
 
 2020-11-19 19:45:18,109 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50083} Header: [count(0)]  
 
 2020-11-19 19:45:18,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50083} Result: [2]  
 
 2020-11-19 19:45:18,110 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20052, rs-50083} closed  
 
 2020-11-19 19:45:18,112 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20052} clearParameters.   
 
 2020-11-19 19:45:18,113 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} Parameters : [1, 5]  
 
 2020-11-19 19:45:18,114 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} Types : [INTEGER, INTEGER]  
 
 2020-11-19 19:45:18,116 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} executed. 2.8127 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 19:45:18,117 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50084} open  
 
 2020-11-19 19:45:18,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50084} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 19:45:18,118 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50084} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 19:45:18,120 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50084} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 19:45:18,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20053, rs-50084} closed  
 
 2020-11-19 19:45:18,121 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20053} clearParameters.   
 
 2020-11-19 19:45:18,122 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:19,582 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:19,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Parameters : []  
 
 2020-11-19 19:45:19,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Types : []  
 
 2020-11-19 19:45:19,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} executed. 1.8856 millis. select * from t_types  
 
 2020-11-19 19:45:19,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} open  
 
 2020-11-19 19:45:19,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} Header: [id, name]  
 
 2020-11-19 19:45:19,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} Result: [8, 方法论]  
 
 2020-11-19 19:45:19,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} Result: [9, 理论类]  
 
 2020-11-19 19:45:19,588 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} Result: [21, 错误日记]  
 
 2020-11-19 19:45:19,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} Result: [23, 开发日记]  
 
 2020-11-19 19:45:19,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} Result: [24, 实践论]  
 
 2020-11-19 19:45:19,589 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} Result: [25, 想法论]  
 
 2020-11-19 19:45:19,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50085} closed  
 
 2020-11-19 19:45:19,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} clearParameters.   
 
 2020-11-19 19:45:19,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:19,592 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:19,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Parameters : []  
 
 2020-11-19 19:45:19,593 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Types : []  
 
 2020-11-19 19:45:19,595 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} executed. 1.890499 millis. select * from t_tages  
 
 2020-11-19 19:45:19,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} open  
 
 2020-11-19 19:45:19,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} Header: [id, tage]  
 
 2020-11-19 19:45:19,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} Result: [1, 学习日记]  
 
 2020-11-19 19:45:19,597 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} Result: [2, 错误笔记]  
 
 2020-11-19 19:45:19,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} Result: [3, 数据库笔记]  
 
 2020-11-19 19:45:19,598 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} Result: [4, 程序运行日记]  
 
 2020-11-19 19:45:19,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} Result: [5, 开发日记]  
 
 2020-11-19 19:45:19,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} Result: [8, 开发手册]  
 
 2020-11-19 19:45:19,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} Result: [10, 搭建日记]  
 
 2020-11-19 19:45:19,600 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50086} closed  
 
 2020-11-19 19:45:19,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} clearParameters.   
 
 2020-11-19 19:45:19,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:19,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:19,604 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} Parameters : []  
 
 2020-11-19 19:45:19,605 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} Types : []  
 
 2020-11-19 19:45:19,606 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} executed. 2.075601 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:45:19,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50087} open  
 
 2020-11-19 19:45:19,608 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50087} Header: [count(0)]  
 
 2020-11-19 19:45:19,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50087} Result: [2]  
 
 2020-11-19 19:45:19,609 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50087} closed  
 
 2020-11-19 19:45:19,610 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} clearParameters.   
 
 2020-11-19 19:45:19,611 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} Parameters : [4]  
 
 2020-11-19 19:45:19,612 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} Types : [INTEGER]  
 
 2020-11-19 19:45:19,614 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} executed. 3.1003 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:45:19,615 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50088} open  
 
 2020-11-19 19:45:19,616 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50088} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:45:19,617 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50088} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:45:19,618 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50088} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:45:19,620 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50088} closed  
 
 2020-11-19 19:45:19,621 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} clearParameters.   
 
 2020-11-19 19:45:19,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:45:20,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:45:20,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} Parameters : [12]  
 
 2020-11-19 19:45:20,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} Types : [INTEGER]  
 
 2020-11-19 19:45:20,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} executed. 2.467701 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:45:20,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50089} open  
 
 2020-11-19 19:45:20,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50089} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:45:20,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50089} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:45:20,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50089} closed  
 
 2020-11-19 19:45:20,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} clearParameters.   
 
 2020-11-19 19:45:20,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:46:02,466 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:46:02,467 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Parameters : []  
 
 2020-11-19 19:46:02,468 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} Types : []  
 
 2020-11-19 19:46:02,469 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} executed. 2.066 millis. select * from t_types  
 
 2020-11-19 19:46:02,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} open  
 
 2020-11-19 19:46:02,470 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} Header: [id, name]  
 
 2020-11-19 19:46:02,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} Result: [8, 方法论]  
 
 2020-11-19 19:46:02,471 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} Result: [9, 理论类]  
 
 2020-11-19 19:46:02,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} Result: [21, 错误日记]  
 
 2020-11-19 19:46:02,472 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} Result: [23, 开发日记]  
 
 2020-11-19 19:46:02,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} Result: [24, 实践论]  
 
 2020-11-19 19:46:02,473 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} Result: [25, 想法论]  
 
 2020-11-19 19:46:02,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20054, rs-50090} closed  
 
 2020-11-19 19:46:02,474 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20054} clearParameters.   
 
 2020-11-19 19:46:02,475 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:46:02,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:46:02,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Parameters : []  
 
 2020-11-19 19:46:02,477 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} Types : []  
 
 2020-11-19 19:46:02,478 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} executed. 2.005301 millis. select * from t_tages  
 
 2020-11-19 19:46:02,479 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} open  
 
 2020-11-19 19:46:02,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} Header: [id, tage]  
 
 2020-11-19 19:46:02,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} Result: [1, 学习日记]  
 
 2020-11-19 19:46:02,481 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} Result: [2, 错误笔记]  
 
 2020-11-19 19:46:02,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} Result: [3, 数据库笔记]  
 
 2020-11-19 19:46:02,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} Result: [4, 程序运行日记]  
 
 2020-11-19 19:46:02,483 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} Result: [5, 开发日记]  
 
 2020-11-19 19:46:02,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} Result: [8, 开发手册]  
 
 2020-11-19 19:46:02,485 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} Result: [10, 搭建日记]  
 
 2020-11-19 19:46:02,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20055, rs-50091} closed  
 
 2020-11-19 19:46:02,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20055} clearParameters.   
 
 2020-11-19 19:46:02,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:46:02,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:46:02,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} Parameters : []  
 
 2020-11-19 19:46:02,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} Types : []  
 
 2020-11-19 19:46:02,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} executed. 2.655799 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:46:02,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50092} open  
 
 2020-11-19 19:46:02,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50092} Header: [count(0)]  
 
 2020-11-19 19:46:02,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50092} Result: [2]  
 
 2020-11-19 19:46:02,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20056, rs-50092} closed  
 
 2020-11-19 19:46:02,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20056} clearParameters.   
 
 2020-11-19 19:46:02,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} Parameters : [4]  
 
 2020-11-19 19:46:02,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} Types : [INTEGER]  
 
 2020-11-19 19:46:02,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} executed. 2.2806 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:46:02,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50093} open  
 
 2020-11-19 19:46:02,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50093} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:46:02,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50093} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:46:02,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50093} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:46:02,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20057, rs-50093} closed  
 
 2020-11-19 19:46:02,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20057} clearParameters.   
 
 2020-11-19 19:46:02,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:46:03,729 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-connect  
 
 2020-11-19 19:46:03,731 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} Parameters : [11]  
 
 2020-11-19 19:46:03,732 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} Types : [INTEGER]  
 
 2020-11-19 19:46:03,734 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} executed. 3.0011 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:46:03,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50094} open  
 
 2020-11-19 19:46:03,735 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50094} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:46:03,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50094} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:46:03,738 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10010, pstmt-20058, rs-50094} closed  
 
 2020-11-19 19:46:03,739 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10010, pstmt-20058} clearParameters.   
 
 2020-11-19 19:46:03,740 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} pool-recycle  
 
 2020-11-19 19:52:17,603 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10010} closed  
 
 2020-11-19 19:52:17,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011,procId-824} connected  
 
 2020-11-19 19:52:17,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011} pool-connect  
 
 2020-11-19 19:52:17,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20061} created. select * from t_types  
 
 2020-11-19 19:52:17,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20061} Parameters : []  
 
 2020-11-19 19:52:17,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20061} Types : []  
 
 2020-11-19 19:52:17,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20061} executed. 3.4219 millis. select * from t_types  
 
 2020-11-19 19:52:17,631 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} open  
 
 2020-11-19 19:52:17,632 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} Header: [id, name]  
 
 2020-11-19 19:52:17,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} Result: [8, 方法论]  
 
 2020-11-19 19:52:17,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} Result: [9, 理论类]  
 
 2020-11-19 19:52:17,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} Result: [21, 错误日记]  
 
 2020-11-19 19:52:17,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} Result: [23, 开发日记]  
 
 2020-11-19 19:52:17,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} Result: [24, 实践论]  
 
 2020-11-19 19:52:17,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} Result: [25, 想法论]  
 
 2020-11-19 19:52:17,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20061, rs-50095} closed  
 
 2020-11-19 19:52:17,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20061} clearParameters.   
 
 2020-11-19 19:52:17,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011} pool-recycle  
 
 2020-11-19 19:52:17,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011} pool-connect  
 
 2020-11-19 19:52:17,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20062} created. select * from t_tages  
 
 2020-11-19 19:52:17,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20062} Parameters : []  
 
 2020-11-19 19:52:17,642 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20062} Types : []  
 
 2020-11-19 19:52:17,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20062} executed. 2.0427 millis. select * from t_tages  
 
 2020-11-19 19:52:17,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} open  
 
 2020-11-19 19:52:17,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} Header: [id, tage]  
 
 2020-11-19 19:52:17,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} Result: [1, 学习日记]  
 
 2020-11-19 19:52:17,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} Result: [2, 错误笔记]  
 
 2020-11-19 19:52:17,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} Result: [3, 数据库笔记]  
 
 2020-11-19 19:52:17,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} Result: [4, 程序运行日记]  
 
 2020-11-19 19:52:17,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} Result: [5, 开发日记]  
 
 2020-11-19 19:52:17,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} Result: [8, 开发手册]  
 
 2020-11-19 19:52:17,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} Result: [10, 搭建日记]  
 
 2020-11-19 19:52:17,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20062, rs-50096} closed  
 
 2020-11-19 19:52:17,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20062} clearParameters.   
 
 2020-11-19 19:52:17,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011} pool-recycle  
 
 2020-11-19 19:52:17,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011} pool-connect  
 
 2020-11-19 19:52:17,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20063} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:52:17,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20063} Parameters : []  
 
 2020-11-19 19:52:17,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20063} Types : []  
 
 2020-11-19 19:52:17,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20063} executed. 1.9626 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 19:52:17,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20063, rs-50097} open  
 
 2020-11-19 19:52:17,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20063, rs-50097} Header: [count(0)]  
 
 2020-11-19 19:52:17,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20063, rs-50097} Result: [2]  
 
 2020-11-19 19:52:17,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20063, rs-50097} closed  
 
 2020-11-19 19:52:17,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20063} clearParameters.   
 
 2020-11-19 19:52:17,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20064} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:52:17,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20064} Parameters : [4]  
 
 2020-11-19 19:52:17,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20064} Types : [INTEGER]  
 
 2020-11-19 19:52:17,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20064} executed. 1.6829 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 19:52:17,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20064, rs-50098} open  
 
 2020-11-19 19:52:17,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20064, rs-50098} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 19:52:17,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20064, rs-50098} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 19:52:17,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20064, rs-50098} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 19:52:17,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20064, rs-50098} closed  
 
 2020-11-19 19:52:17,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20064} clearParameters.   
 
 2020-11-19 19:52:17,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011} pool-recycle  
 
 2020-11-19 19:52:18,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011} pool-connect  
 
 2020-11-19 19:52:18,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20065} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:52:18,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20065} Parameters : [12]  
 
 2020-11-19 19:52:18,863 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20065} Types : [INTEGER]  
 
 2020-11-19 19:52:18,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20065} executed. 2.8507 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 19:52:18,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20065, rs-50099} open  
 
 2020-11-19 19:52:18,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20065, rs-50099} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 19:52:18,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20065, rs-50099} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 19:52:18,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10011, pstmt-20065, rs-50099} closed  
 
 2020-11-19 19:52:18,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10011, pstmt-20065} clearParameters.   
 
 2020-11-19 19:52:18,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10011} pool-recycle  
 
 2020-11-19 20:40:30,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-825} connected  
 
 2020-11-19 20:40:30,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-826} connected  
 
 2020-11-19 20:40:30,343 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-827} connected  
 
 2020-11-19 20:40:30,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-828} connected  
 
 2020-11-19 20:40:30,364 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-829} connected  
 
 2020-11-19 20:40:30,367 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:30,736 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 20:40:30,783 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 20:40:30,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 20:40:30,814 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 42.0018 millis. select * from t_types  
 
 2020-11-19 20:40:30,828 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 20:40:30,836 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 20:40:30,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 20:40:30,872 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 20:40:30,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 20:40:30,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 20:40:30,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 20:40:30,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 20:40:30,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 20:40:30,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 20:40:30,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:30,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:30,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 20:40:30,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 20:40:30,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 20:40:30,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 4.796 millis. select * from t_tages  
 
 2020-11-19 20:40:30,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 20:40:30,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 20:40:30,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 20:40:30,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 20:40:30,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 20:40:30,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 20:40:30,906 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 20:40:30,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 20:40:30,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 20:40:30,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 20:40:30,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 20:40:30,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:30,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:30,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:31,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:31,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 20:40:31,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 20:40:31,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 20:40:31,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 6.4584 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 20:40:31,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 20:40:31,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 20:40:31,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 20:40:31,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 20:40:31,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 20:40:31,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 20:40:31,181 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 20:40:31,183 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 20:40:31,190 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 8.7644 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 20:40:31,191 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 20:40:31,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 20:40:31,199 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 20:40:31,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 20:40:31,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 20:40:31,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 20:40:31,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:32,318 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:32,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 20:40:32,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 20:40:32,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 15.6653 millis. select * from t_types  
 
 2020-11-19 20:40:32,344 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 20:40:32,353 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 20:40:32,361 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 20:40:32,363 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 20:40:32,365 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 20:40:32,368 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 20:40:32,369 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 20:40:32,372 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 20:40:32,374 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 20:40:32,376 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 20:40:32,377 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:32,380 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:32,382 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 20:40:32,383 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 20:40:32,385 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.4596 millis. select * from t_tages  
 
 2020-11-19 20:40:32,386 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 20:40:32,387 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, tage]  
 
 2020-11-19 20:40:32,388 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [1, 学习日记]  
 
 2020-11-19 20:40:32,390 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [2, 错误笔记]  
 
 2020-11-19 20:40:32,391 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [3, 数据库笔记]  
 
 2020-11-19 20:40:32,392 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [4, 程序运行日记]  
 
 2020-11-19 20:40:32,394 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [5, 开发日记]  
 
 2020-11-19 20:40:32,395 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 开发手册]  
 
 2020-11-19 20:40:32,397 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [10, 搭建日记]  
 
 2020-11-19 20:40:32,399 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 20:40:32,400 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 20:40:32,401 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:32,405 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:32,408 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 20:40:32,409 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 20:40:32,412 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 4.2878 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 20:40:32,413 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} open  
 
 2020-11-19 20:40:32,415 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Header: [count(0)]  
 
 2020-11-19 20:40:32,416 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} Result: [2]  
 
 2020-11-19 20:40:32,418 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50006} closed  
 
 2020-11-19 20:40:32,419 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 20:40:32,422 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 20:40:32,423 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 20:40:32,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.8001 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 20:40:32,426 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} open  
 
 2020-11-19 20:40:32,427 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 20:40:32,429 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 20:40:32,430 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 20:40:32,432 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50007} closed  
 
 2020-11-19 20:40:32,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 20:40:32,434 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:44,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:44,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select * from t_user where username=?  
 
 2020-11-19 20:40:44,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [zhangsan]  
 
 2020-11-19 20:40:44,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [VARCHAR]  
 
 2020-11-19 20:40:44,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 5.477 millis. select * from t_user where username=?  
 
 2020-11-19 20:40:44,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} open  
 
 2020-11-19 20:40:44,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 20:40:44,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 20:40:44,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50008} closed  
 
 2020-11-19 20:40:44,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 20:40:44,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:51,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 20:40:51,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:40:51,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : [1]  
 
 2020-11-19 20:40:51,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : [INTEGER]  
 
 2020-11-19 20:40:51,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 3.3864 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:40:51,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} open  
 
 2020-11-19 20:40:51,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Header: [count(0)]  
 
 2020-11-19 20:40:51,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} Result: [2]  
 
 2020-11-19 20:40:51,312 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50009} closed  
 
 2020-11-19 20:40:51,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 20:40:51,317 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:40:51,319 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [1, 5]  
 
 2020-11-19 20:40:51,320 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER, INTEGER]  
 
 2020-11-19 20:40:51,322 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.4831 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:40:51,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} open  
 
 2020-11-19 20:40:51,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 20:40:51,323 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 20:40:51,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 20:40:51,324 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:40:51,325 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 20:40:51,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Parameters : [1]  
 
 2020-11-19 20:40:51,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Types : [INTEGER]  
 
 2020-11-19 20:40:51,326 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50010} closed  
 
 2020-11-19 20:40:51,327 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 20:40:51,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 20:40:51,328 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} executed. 2.4239 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:40:51,329 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50011} open  
 
 2020-11-19 20:40:51,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50011} Header: [count(0)]  
 
 2020-11-19 20:40:51,330 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50011} Result: [2]  
 
 2020-11-19 20:40:51,331 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50011} closed  
 
 2020-11-19 20:40:51,332 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} clearParameters.   
 
 2020-11-19 20:40:51,333 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:40:51,335 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : [1, 5]  
 
 2020-11-19 20:40:51,336 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]  
 
 2020-11-19 20:40:51,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 2.3926 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:40:51,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50012} open  
 
 2020-11-19 20:40:51,338 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50012} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 20:40:51,339 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50012} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 20:40:51,340 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50012} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 20:40:51,341 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50012} closed  
 
 2020-11-19 20:40:51,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-19 20:40:51,342 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 20:40:52,622 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 20:40:52,626 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 20:40:52,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [11]  
 
 2020-11-19 20:40:52,629 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 20:40:52,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 8.9211 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 20:40:52,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} open  
 
 2020-11-19 20:40:52,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 20:40:52,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 20:40:52,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} Result: [11, Java基本语法, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 10, 搭建日记, 8, 方法论]  
 
 2020-11-19 20:40:52,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50013} closed  
 
 2020-11-19 20:40:52,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-19 20:40:52,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 20:40:52,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 20:40:52,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} created. select * from t_tages  
 
 2020-11-19 20:40:52,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Parameters : []  
 
 2020-11-19 20:40:52,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Types : []  
 
 2020-11-19 20:40:52,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} executed. 2.2964 millis. select * from t_tages  
 
 2020-11-19 20:40:52,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} open  
 
 2020-11-19 20:40:52,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Header: [id, tage]  
 
 2020-11-19 20:40:52,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [1, 学习日记]  
 
 2020-11-19 20:40:52,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [2, 错误笔记]  
 
 2020-11-19 20:40:52,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [3, 数据库笔记]  
 
 2020-11-19 20:40:52,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [4, 程序运行日记]  
 
 2020-11-19 20:40:52,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [5, 开发日记]  
 
 2020-11-19 20:40:52,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [8, 开发手册]  
 
 2020-11-19 20:40:52,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} Result: [10, 搭建日记]  
 
 2020-11-19 20:40:52,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50014} closed  
 
 2020-11-19 20:40:52,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} clearParameters.   
 
 2020-11-19 20:40:52,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 20:40:52,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 20:40:52,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} created. select * from t_types  
 
 2020-11-19 20:40:52,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : []  
 
 2020-11-19 20:40:52,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : []  
 
 2020-11-19 20:40:52,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 1.6223 millis. select * from t_types  
 
 2020-11-19 20:40:52,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} open  
 
 2020-11-19 20:40:52,665 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Header: [id, name]  
 
 2020-11-19 20:40:52,667 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Result: [8, 方法论]  
 
 2020-11-19 20:40:52,668 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Result: [9, 理论类]  
 
 2020-11-19 20:40:52,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Result: [21, 错误日记]  
 
 2020-11-19 20:40:52,670 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Result: [23, 开发日记]  
 
 2020-11-19 20:40:52,671 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Result: [24, 实践论]  
 
 2020-11-19 20:40:52,672 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} Result: [25, 想法论]  
 
 2020-11-19 20:40:52,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50015} closed  
 
 2020-11-19 20:40:52,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-19 20:40:52,675 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 20:40:55,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 20:40:55,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Parameters : [1]  
 
 2020-11-19 20:40:55,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} Types : [INTEGER]  
 
 2020-11-19 20:40:55,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} executed. 1.5356 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:40:55,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50016} open  
 
 2020-11-19 20:40:55,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50016} Header: [count(0)]  
 
 2020-11-19 20:40:55,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50016} Result: [2]  
 
 2020-11-19 20:40:55,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20007, rs-50016} closed  
 
 2020-11-19 20:40:55,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20007} clearParameters.   
 
 2020-11-19 20:40:55,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Parameters : [1, 5]  
 
 2020-11-19 20:40:55,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} Types : [INTEGER, INTEGER]  
 
 2020-11-19 20:40:55,890 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} executed. 1.336199 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:40:55,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50017} open  
 
 2020-11-19 20:40:55,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50017} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 20:40:55,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50017} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 20:40:55,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50017} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 20:40:55,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20008, rs-50017} closed  
 
 2020-11-19 20:40:55,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20008} clearParameters.   
 
 2020-11-19 20:40:55,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 20:40:57,059 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 20:40:57,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Parameters : [12]  
 
 2020-11-19 20:40:57,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} Types : [INTEGER]  
 
 2020-11-19 20:40:57,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} executed. 3.456299 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 20:40:57,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50018} open  
 
 2020-11-19 20:40:57,065 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50018} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 20:40:57,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50018} Result: [12, Java笔记, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 20:40:57,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50018} Result: [12, Java笔记, * 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型
````java
byte                 Byte
int                  Integer
short                Short
long                 Long
float                Flaot
double               Double
char                 Character
boolean              Boolean
````, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 5, 开发日记, 8, 方法论]  
 
 2020-11-19 20:40:57,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20009, rs-50018} closed  
 
 2020-11-19 20:40:57,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20009} clearParameters.   
 
 2020-11-19 20:40:57,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 20:40:57,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 20:40:57,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Parameters : []  
 
 2020-11-19 20:40:57,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} Types : []  
 
 2020-11-19 20:40:57,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} executed. 4.9152 millis. select * from t_tages  
 
 2020-11-19 20:40:57,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} open  
 
 2020-11-19 20:40:57,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} Header: [id, tage]  
 
 2020-11-19 20:40:57,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} Result: [1, 学习日记]  
 
 2020-11-19 20:40:57,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} Result: [2, 错误笔记]  
 
 2020-11-19 20:40:57,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} Result: [3, 数据库笔记]  
 
 2020-11-19 20:40:57,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} Result: [4, 程序运行日记]  
 
 2020-11-19 20:40:57,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} Result: [5, 开发日记]  
 
 2020-11-19 20:40:57,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} Result: [8, 开发手册]  
 
 2020-11-19 20:40:57,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} Result: [10, 搭建日记]  
 
 2020-11-19 20:40:57,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20010, rs-50019} closed  
 
 2020-11-19 20:40:57,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20010} clearParameters.   
 
 2020-11-19 20:40:57,087 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 20:40:57,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-connect  
 
 2020-11-19 20:40:57,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Parameters : []  
 
 2020-11-19 20:40:57,088 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} Types : []  
 
 2020-11-19 20:40:57,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} executed. 1.5869 millis. select * from t_types  
 
 2020-11-19 20:40:57,090 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} open  
 
 2020-11-19 20:40:57,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} Header: [id, name]  
 
 2020-11-19 20:40:57,092 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} Result: [8, 方法论]  
 
 2020-11-19 20:40:57,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} Result: [9, 理论类]  
 
 2020-11-19 20:40:57,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} Result: [21, 错误日记]  
 
 2020-11-19 20:40:57,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} Result: [23, 开发日记]  
 
 2020-11-19 20:40:57,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} Result: [24, 实践论]  
 
 2020-11-19 20:40:57,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} Result: [25, 想法论]  
 
 2020-11-19 20:40:57,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10004, pstmt-20011, rs-50020} closed  
 
 2020-11-19 20:40:57,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10004, pstmt-20011} clearParameters.   
 
 2020-11-19 20:40:57,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} pool-recycle  
 
 2020-11-19 20:45:53,490 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004} closed  
 
 2020-11-19 20:45:53,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} closed  
 
 2020-11-19 20:45:53,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003} closed  
 
 2020-11-19 20:45:53,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002} closed  
 
 2020-11-19 20:45:53,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001} closed  
 
 2020-11-19 20:45:53,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006,procId-830} connected  
 
 2020-11-19 20:45:53,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:53,522 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} created. update t_blog
         SET title='Java笔记'
            ,
                content='

* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 20:45:53.456' 
        where id=?  
 
 2020-11-19 20:45:53,524 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Parameters : [12]  
 
 2020-11-19 20:45:53,525 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} Types : [INTEGER]  
 
 2020-11-19 20:45:53,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} executed. 12.023201 millis. update t_blog
         SET title='Java笔记'
            ,
                content='

* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 20:45:53.456' 
        where id=?  
 
 2020-11-19 20:45:53,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20012} clearParameters.   
 
 2020-11-19 20:45:53,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:53,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:53,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} created. delete from t_blog_tages where bid=?  
 
 2020-11-19 20:45:53,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Parameters : [12]  
 
 2020-11-19 20:45:53,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} Types : [INTEGER]  
 
 2020-11-19 20:45:53,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} executed. 16.0306 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 20:45:53,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20013} clearParameters.   
 
 2020-11-19 20:45:53,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:53,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:53,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} created. delete from t_blog_type where bid=?  
 
 2020-11-19 20:45:53,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Parameters : [12]  
 
 2020-11-19 20:45:53,581 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} Types : [INTEGER]  
 
 2020-11-19 20:45:53,596 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} executed. 16.937399 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 20:45:53,599 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20014} clearParameters.   
 
 2020-11-19 20:45:53,601 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:53,607 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:53,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:45:53,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Parameters : [null, 1, 12]  
 
 2020-11-19 20:45:53,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 20:45:53,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} executed. 11.296 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:45:53,654 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} clearParameters.   
 
 2020-11-19 20:45:53,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:53,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:53,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Parameters : [null, 5, 12]  
 
 2020-11-19 20:45:53,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 20:45:53,674 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} executed. 11.5324 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:45:53,676 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20015} clearParameters.   
 
 2020-11-19 20:45:53,678 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:53,680 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:53,684 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:45:53,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Parameters : [null, 12, 8]  
 
 2020-11-19 20:45:53,688 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 20:45:53,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} executed. 9.8532 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:45:53,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20016} clearParameters.   
 
 2020-11-19 20:45:53,702 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:53,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:53,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:45:53,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Parameters : [1]  
 
 2020-11-19 20:45:53,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} Types : [INTEGER]  
 
 2020-11-19 20:45:53,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} executed. 4.5577 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:45:53,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} open  
 
 2020-11-19 20:45:53,763 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} Header: [count(0)]  
 
 2020-11-19 20:45:53,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} Result: [2]  
 
 2020-11-19 20:45:53,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20017, rs-50021} closed  
 
 2020-11-19 20:45:53,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20017} clearParameters.   
 
 2020-11-19 20:45:53,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:45:53,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} Parameters : [1, 5]  
 
 2020-11-19 20:45:53,774 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} Types : [INTEGER, INTEGER]  
 
 2020-11-19 20:45:53,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} executed. 4.2979 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:45:53,778 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20018, rs-50022} open  
 
 2020-11-19 20:45:53,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20018, rs-50022} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 20:45:53,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20018, rs-50022} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 20:45:53,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20018, rs-50022} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 20:45:53,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20018, rs-50022} closed  
 
 2020-11-19 20:45:53,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20018} clearParameters.   
 
 2020-11-19 20:45:53,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:55,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:55,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} created. select * from t_types  
 
 2020-11-19 20:45:55,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Parameters : []  
 
 2020-11-19 20:45:55,207 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} Types : []  
 
 2020-11-19 20:45:55,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} executed. 2.129501 millis. select * from t_types  
 
 2020-11-19 20:45:55,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} open  
 
 2020-11-19 20:45:55,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} Header: [id, name]  
 
 2020-11-19 20:45:55,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} Result: [8, 方法论]  
 
 2020-11-19 20:45:55,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} Result: [9, 理论类]  
 
 2020-11-19 20:45:55,213 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} Result: [21, 错误日记]  
 
 2020-11-19 20:45:55,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} Result: [23, 开发日记]  
 
 2020-11-19 20:45:55,216 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} Result: [24, 实践论]  
 
 2020-11-19 20:45:55,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} Result: [25, 想法论]  
 
 2020-11-19 20:45:55,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20019, rs-50023} closed  
 
 2020-11-19 20:45:55,218 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20019} clearParameters.   
 
 2020-11-19 20:45:55,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:55,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:55,221 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} created. select * from t_tages  
 
 2020-11-19 20:45:55,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Parameters : []  
 
 2020-11-19 20:45:55,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} Types : []  
 
 2020-11-19 20:45:55,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} executed. 1.9962 millis. select * from t_tages  
 
 2020-11-19 20:45:55,224 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} open  
 
 2020-11-19 20:45:55,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} Header: [id, tage]  
 
 2020-11-19 20:45:55,225 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} Result: [1, 学习日记]  
 
 2020-11-19 20:45:55,226 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} Result: [2, 错误笔记]  
 
 2020-11-19 20:45:55,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} Result: [3, 数据库笔记]  
 
 2020-11-19 20:45:55,227 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} Result: [4, 程序运行日记]  
 
 2020-11-19 20:45:55,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} Result: [5, 开发日记]  
 
 2020-11-19 20:45:55,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} Result: [8, 开发手册]  
 
 2020-11-19 20:45:55,229 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} Result: [10, 搭建日记]  
 
 2020-11-19 20:45:55,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20020, rs-50024} closed  
 
 2020-11-19 20:45:55,232 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20020} clearParameters.   
 
 2020-11-19 20:45:55,233 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:55,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:55,236 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 20:45:55,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Parameters : []  
 
 2020-11-19 20:45:55,238 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} Types : []  
 
 2020-11-19 20:45:55,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} executed. 2.5004 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 20:45:55,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50025} open  
 
 2020-11-19 20:45:55,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50025} Header: [count(0)]  
 
 2020-11-19 20:45:55,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50025} Result: [2]  
 
 2020-11-19 20:45:55,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20021, rs-50025} closed  
 
 2020-11-19 20:45:55,243 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20021} clearParameters.   
 
 2020-11-19 20:45:55,244 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 20:45:55,246 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Parameters : [4]  
 
 2020-11-19 20:45:55,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} Types : [INTEGER]  
 
 2020-11-19 20:45:55,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} executed. 3.6792 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 20:45:55,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50026} open  
 
 2020-11-19 20:45:55,251 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50026} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 20:45:55,252 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50026} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 20:45:55,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50026} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 

* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 20:45:55,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20022, rs-50026} closed  
 
 2020-11-19 20:45:55,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20022} clearParameters.   
 
 2020-11-19 20:45:55,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:45:56,681 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-connect  
 
 2020-11-19 20:45:56,685 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 20:45:56,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Parameters : [12]  
 
 2020-11-19 20:45:56,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} Types : [INTEGER]  
 
 2020-11-19 20:45:56,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} executed. 3.7293 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 20:45:56,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50027} open  
 
 2020-11-19 20:45:56,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50027} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 20:45:56,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50027} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 

* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 20:45:56,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10006, pstmt-20023, rs-50027} closed  
 
 2020-11-19 20:45:56,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10006, pstmt-20023} clearParameters.   
 
 2020-11-19 20:45:56,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} pool-recycle  
 
 2020-11-19 20:47:01,119 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10006} closed  
 
 2020-11-19 20:47:01,133 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007,procId-831} connected  
 
 2020-11-19 20:47:01,134 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:01,135 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} created. select * from t_types  
 
 2020-11-19 20:47:01,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Parameters : []  
 
 2020-11-19 20:47:01,136 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Types : []  
 
 2020-11-19 20:47:01,138 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} executed. 2.3959 millis. select * from t_types  
 
 2020-11-19 20:47:01,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} open  
 
 2020-11-19 20:47:01,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} Header: [id, name]  
 
 2020-11-19 20:47:01,139 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} Result: [8, 方法论]  
 
 2020-11-19 20:47:01,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} Result: [9, 理论类]  
 
 2020-11-19 20:47:01,140 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} Result: [21, 错误日记]  
 
 2020-11-19 20:47:01,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} Result: [23, 开发日记]  
 
 2020-11-19 20:47:01,141 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} Result: [24, 实践论]  
 
 2020-11-19 20:47:01,142 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} Result: [25, 想法论]  
 
 2020-11-19 20:47:01,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50028} closed  
 
 2020-11-19 20:47:01,144 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} clearParameters.   
 
 2020-11-19 20:47:01,145 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:01,146 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:01,147 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} created. select * from t_tages  
 
 2020-11-19 20:47:01,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Parameters : []  
 
 2020-11-19 20:47:01,148 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Types : []  
 
 2020-11-19 20:47:01,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} executed. 1.6142 millis. select * from t_tages  
 
 2020-11-19 20:47:01,150 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} open  
 
 2020-11-19 20:47:01,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} Header: [id, tage]  
 
 2020-11-19 20:47:01,151 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} Result: [1, 学习日记]  
 
 2020-11-19 20:47:01,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} Result: [2, 错误笔记]  
 
 2020-11-19 20:47:01,152 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} Result: [3, 数据库笔记]  
 
 2020-11-19 20:47:01,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} Result: [4, 程序运行日记]  
 
 2020-11-19 20:47:01,153 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} Result: [5, 开发日记]  
 
 2020-11-19 20:47:01,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} Result: [8, 开发手册]  
 
 2020-11-19 20:47:01,154 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} Result: [10, 搭建日记]  
 
 2020-11-19 20:47:01,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50029} closed  
 
 2020-11-19 20:47:01,155 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} clearParameters.   
 
 2020-11-19 20:47:01,156 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:01,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:01,158 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 20:47:01,159 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} Parameters : []  
 
 2020-11-19 20:47:01,160 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} Types : []  
 
 2020-11-19 20:47:01,164 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} executed. 4.9839 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 20:47:01,165 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50030} open  
 
 2020-11-19 20:47:01,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50030} Header: [count(0)]  
 
 2020-11-19 20:47:01,166 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50030} Result: [2]  
 
 2020-11-19 20:47:01,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50030} closed  
 
 2020-11-19 20:47:01,168 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} clearParameters.   
 
 2020-11-19 20:47:01,169 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 20:47:01,170 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} Parameters : [4]  
 
 2020-11-19 20:47:01,171 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} Types : [INTEGER]  
 
 2020-11-19 20:47:01,173 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} executed. 2.4305 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 20:47:01,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50031} open  
 
 2020-11-19 20:47:01,174 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50031} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 20:47:01,175 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50031} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 20:47:01,177 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50031} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 

* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 20:47:01,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50031} closed  
 
 2020-11-19 20:47:01,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} clearParameters.   
 
 2020-11-19 20:47:01,179 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:03,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:03,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:47:03,541 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} Parameters : [1]  
 
 2020-11-19 20:47:03,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} Types : [INTEGER]  
 
 2020-11-19 20:47:03,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} executed. 2.486201 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:47:03,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20028, rs-50032} open  
 
 2020-11-19 20:47:03,545 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20028, rs-50032} Header: [count(0)]  
 
 2020-11-19 20:47:03,546 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20028, rs-50032} Result: [2]  
 
 2020-11-19 20:47:03,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20028, rs-50032} closed  
 
 2020-11-19 20:47:03,548 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} clearParameters.   
 
 2020-11-19 20:47:03,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:47:03,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} Parameters : [1, 5]  
 
 2020-11-19 20:47:03,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} Types : [INTEGER, INTEGER]  
 
 2020-11-19 20:47:03,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} executed. 2.6917 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:47:03,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50033} open  
 
 2020-11-19 20:47:03,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50033} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 20:47:03,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50033} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 20:47:03,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50033} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 20:47:03,560 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50033} closed  
 
 2020-11-19 20:47:03,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} clearParameters.   
 
 2020-11-19 20:47:03,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:04,627 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:04,628 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20030} created. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 20:47:04,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20030} Parameters : [12]  
 
 2020-11-19 20:47:04,630 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20030} Types : [INTEGER]  
 
 2020-11-19 20:47:04,633 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20030} executed. 3.579299 millis. select tb.id,tb.title,tb.content,tb.firstpicture,tb.appreciation,tb.opencomment,tb.sharestatment,tb.recommend ,tb.views,tb.flag,
            tage.id tageid,tage.tage tagename,types.id typeid ,types.name typename
         from
            t_blog tb,t_blog_tages tbt,t_tages tage,t_blog_type tbty,t_types types
        where
            tbt.bid=tb.id and tbty.bid=tb.id and tbt.tid=tage.id and tbty.tyid=types.id
        and tb.id=?  
 
 2020-11-19 20:47:04,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20030, rs-50034} open  
 
 2020-11-19 20:47:04,634 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20030, rs-50034} Header: [id, title, content, firstpicture, appreciation, opencomment, sharestatment, recommend, views, flag, id, tage, id, name]  
 
 2020-11-19 20:47:04,635 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20030, rs-50034} Result: [12, Java笔记, 

* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 1, 学习日记, 8, 方法论]  
 
 2020-11-19 20:47:04,636 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20030, rs-50034} Result: [12, Java笔记, 

* 数据类型的从小到大顺序
````java
（byte，short，char)-int-long-float-double
````
* 基本类型：
````java
public class shuju{
public static void main(String[] args){
double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
System.out.println(num1);
int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, true, true, true, true, 0, 是, 5, 开发日记, 8, 方法论]  
 
 2020-11-19 20:47:04,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20030, rs-50034} closed  
 
 2020-11-19 20:47:04,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20030} clearParameters.   
 
 2020-11-19 20:47:04,638 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:04,639 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:04,640 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Parameters : []  
 
 2020-11-19 20:47:04,641 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Types : []  
 
 2020-11-19 20:47:04,643 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} executed. 2.849099 millis. select * from t_tages  
 
 2020-11-19 20:47:04,644 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} open  
 
 2020-11-19 20:47:04,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} Header: [id, tage]  
 
 2020-11-19 20:47:04,645 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} Result: [1, 学习日记]  
 
 2020-11-19 20:47:04,646 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} Result: [2, 错误笔记]  
 
 2020-11-19 20:47:04,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} Result: [3, 数据库笔记]  
 
 2020-11-19 20:47:04,647 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} Result: [4, 程序运行日记]  
 
 2020-11-19 20:47:04,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} Result: [5, 开发日记]  
 
 2020-11-19 20:47:04,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} Result: [8, 开发手册]  
 
 2020-11-19 20:47:04,649 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} Result: [10, 搭建日记]  
 
 2020-11-19 20:47:04,650 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50035} closed  
 
 2020-11-19 20:47:04,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} clearParameters.   
 
 2020-11-19 20:47:04,651 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:04,652 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:04,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Parameters : []  
 
 2020-11-19 20:47:04,653 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Types : []  
 
 2020-11-19 20:47:04,655 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} executed. 2.2354 millis. select * from t_types  
 
 2020-11-19 20:47:04,656 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} open  
 
 2020-11-19 20:47:04,657 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} Header: [id, name]  
 
 2020-11-19 20:47:04,658 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} Result: [8, 方法论]  
 
 2020-11-19 20:47:04,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} Result: [9, 理论类]  
 
 2020-11-19 20:47:04,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} Result: [21, 错误日记]  
 
 2020-11-19 20:47:04,660 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} Result: [23, 开发日记]  
 
 2020-11-19 20:47:04,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} Result: [24, 实践论]  
 
 2020-11-19 20:47:04,661 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} Result: [25, 想法论]  
 
 2020-11-19 20:47:04,662 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50036} closed  
 
 2020-11-19 20:47:04,663 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} clearParameters.   
 
 2020-11-19 20:47:04,664 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:35,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:35,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20031} created. update t_blog
         SET title='Java笔记'
            ,
                content='
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 20:47:35.481' 
        where id=?  
 
 2020-11-19 20:47:35,486 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20031} Parameters : [12]  
 
 2020-11-19 20:47:35,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20031} Types : [INTEGER]  
 
 2020-11-19 20:47:35,502 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20031} executed. 15.4957 millis. update t_blog
         SET title='Java笔记'
            ,
                content='
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |'
            ,
                firstpicture='https://picsum.photos/seed/picsum/800/450'
            ,
                flag='是'
            ,
                views='0'
            ,
                updatetime='2020-11-19 20:47:35.481' 
        where id=?  
 
 2020-11-19 20:47:35,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20031} clearParameters.   
 
 2020-11-19 20:47:35,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:35,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:35,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20032} created. delete from t_blog_tages where bid=?  
 
 2020-11-19 20:47:35,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20032} Parameters : [12]  
 
 2020-11-19 20:47:35,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20032} Types : [INTEGER]  
 
 2020-11-19 20:47:35,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20032} executed. 9.0625 millis. delete from t_blog_tages where bid=?  
 
 2020-11-19 20:47:35,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20032} clearParameters.   
 
 2020-11-19 20:47:35,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:35,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:35,519 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20033} created. delete from t_blog_type where bid=?  
 
 2020-11-19 20:47:35,520 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20033} Parameters : [12]  
 
 2020-11-19 20:47:35,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20033} Types : [INTEGER]  
 
 2020-11-19 20:47:35,527 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20033} executed. 6.3997 millis. delete from t_blog_type where bid=?  
 
 2020-11-19 20:47:35,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20033} clearParameters.   
 
 2020-11-19 20:47:35,529 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:35,530 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:35,531 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} created. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:47:35,532 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} Parameters : [null, 1, 12]  
 
 2020-11-19 20:47:35,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 20:47:35,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} executed. 5.582501 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:47:35,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} clearParameters.   
 
 2020-11-19 20:47:35,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:35,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:35,543 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} Parameters : [null, 5, 12]  
 
 2020-11-19 20:47:35,544 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 20:47:35,550 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} executed. 6.278 millis. insert into t_blog_tages
         (  
            id
         , 
            tid
         , 
            bid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:47:35,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20034} clearParameters.   
 
 2020-11-19 20:47:35,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:35,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:35,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20035} created. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:47:35,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20035} Parameters : [null, 12, 8]  
 
 2020-11-19 20:47:35,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20035} Types : [OTHER, INTEGER, INTEGER]  
 
 2020-11-19 20:47:35,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20035} executed. 6.444 millis. insert into t_blog_type
         (  
            id
         , 
            bid
         , 
            tyid
         ) 
        values
         (  
            ?
         , 
            ?
         , 
            ?
         )  
 
 2020-11-19 20:47:35,562 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20035} clearParameters.   
 
 2020-11-19 20:47:35,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:35,567 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:35,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} Parameters : [1]  
 
 2020-11-19 20:47:35,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} Types : [INTEGER]  
 
 2020-11-19 20:47:35,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} executed. 2.322499 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 20:47:35,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20028, rs-50037} open  
 
 2020-11-19 20:47:35,572 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20028, rs-50037} Header: [count(0)]  
 
 2020-11-19 20:47:35,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20028, rs-50037} Result: [2]  
 
 2020-11-19 20:47:35,575 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20028, rs-50037} closed  
 
 2020-11-19 20:47:35,576 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20028} clearParameters.   
 
 2020-11-19 20:47:35,579 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} Parameters : [1, 5]  
 
 2020-11-19 20:47:35,580 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} Types : [INTEGER, INTEGER]  
 
 2020-11-19 20:47:35,583 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} executed. 3.8604 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 20:47:35,584 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50038} open  
 
 2020-11-19 20:47:35,585 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50038} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 20:47:35,586 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50038} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 20:47:35,587 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50038} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 20:47:35,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20029, rs-50038} closed  
 
 2020-11-19 20:47:35,590 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20029} clearParameters.   
 
 2020-11-19 20:47:35,591 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:37,030 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:37,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Parameters : []  
 
 2020-11-19 20:47:37,031 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} Types : []  
 
 2020-11-19 20:47:37,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} executed. 2.1884 millis. select * from t_types  
 
 2020-11-19 20:47:37,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} open  
 
 2020-11-19 20:47:37,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} Header: [id, name]  
 
 2020-11-19 20:47:37,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} Result: [8, 方法论]  
 
 2020-11-19 20:47:37,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} Result: [9, 理论类]  
 
 2020-11-19 20:47:37,035 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} Result: [21, 错误日记]  
 
 2020-11-19 20:47:37,037 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} Result: [23, 开发日记]  
 
 2020-11-19 20:47:37,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} Result: [24, 实践论]  
 
 2020-11-19 20:47:37,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} Result: [25, 想法论]  
 
 2020-11-19 20:47:37,038 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20024, rs-50039} closed  
 
 2020-11-19 20:47:37,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20024} clearParameters.   
 
 2020-11-19 20:47:37,039 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:37,040 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:37,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Parameters : []  
 
 2020-11-19 20:47:37,041 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} Types : []  
 
 2020-11-19 20:47:37,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} executed. 1.706599 millis. select * from t_tages  
 
 2020-11-19 20:47:37,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} open  
 
 2020-11-19 20:47:37,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} Header: [id, tage]  
 
 2020-11-19 20:47:37,043 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} Result: [1, 学习日记]  
 
 2020-11-19 20:47:37,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} Result: [2, 错误笔记]  
 
 2020-11-19 20:47:37,045 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} Result: [3, 数据库笔记]  
 
 2020-11-19 20:47:37,046 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} Result: [4, 程序运行日记]  
 
 2020-11-19 20:47:37,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} Result: [5, 开发日记]  
 
 2020-11-19 20:47:37,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} Result: [8, 开发手册]  
 
 2020-11-19 20:47:37,047 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} Result: [10, 搭建日记]  
 
 2020-11-19 20:47:37,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20025, rs-50040} closed  
 
 2020-11-19 20:47:37,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20025} clearParameters.   
 
 2020-11-19 20:47:37,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:37,053 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:37,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} Parameters : []  
 
 2020-11-19 20:47:37,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} Types : []  
 
 2020-11-19 20:47:37,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} executed. 2.5243 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 20:47:37,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50041} open  
 
 2020-11-19 20:47:37,058 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50041} Header: [count(0)]  
 
 2020-11-19 20:47:37,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50041} Result: [2]  
 
 2020-11-19 20:47:37,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20026, rs-50041} closed  
 
 2020-11-19 20:47:37,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20026} clearParameters.   
 
 2020-11-19 20:47:37,063 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} Parameters : [4]  
 
 2020-11-19 20:47:37,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} Types : [INTEGER]  
 
 2020-11-19 20:47:37,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} executed. 3.003699 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 20:47:37,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50042} open  
 
 2020-11-19 20:47:37,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50042} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 20:47:37,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50042} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 20:47:37,069 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50042} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 20:47:37,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20027, rs-50042} closed  
 
 2020-11-19 20:47:37,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20027} clearParameters.   
 
 2020-11-19 20:47:37,073 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:47:40,010 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:47:40,012 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 20:47:40,014 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} Parameters : [12]  
 
 2020-11-19 20:47:40,015 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} Types : [INTEGER]  
 
 2020-11-19 20:47:40,017 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} executed. 3.428299 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 20:47:40,018 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20036, rs-50043} open  
 
 2020-11-19 20:47:40,019 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20036, rs-50043} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 20:47:40,020 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20036, rs-50043} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 是, 方法论, 8]  
 
 2020-11-19 20:47:40,023 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20036, rs-50043} closed  
 
 2020-11-19 20:47:40,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} clearParameters.   
 
 2020-11-19 20:47:40,024 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 20:48:24,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-connect  
 
 2020-11-19 20:48:24,295 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} Parameters : [12]  
 
 2020-11-19 20:48:24,296 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} Types : [INTEGER]  
 
 2020-11-19 20:48:24,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} executed. 3.7964 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 20:48:24,300 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20036, rs-50044} open  
 
 2020-11-19 20:48:24,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20036, rs-50044} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 20:48:24,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20036, rs-50044} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-19 20:48:24,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10007, pstmt-20036, rs-50044} closed  
 
 2020-11-19 20:48:24,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10007, pstmt-20036} clearParameters.   
 
 2020-11-19 20:48:24,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10007} pool-recycle  
 
 2020-11-19 21:00:02,624 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-835} connected  
 
 2020-11-19 21:00:02,637 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-836} connected  
 
 2020-11-19 21:00:02,648 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-837} connected  
 
 2020-11-19 21:00:02,659 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-838} connected  
 
 2020-11-19 21:00:02,669 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-839} connected  
 
 2020-11-19 21:00:02,673 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:02,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 21:00:02,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [12]  
 
 2020-11-19 21:00:02,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [INTEGER]  
 
 2020-11-19 21:00:02,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 17.4524 millis. select us.username uname,us.avator avgtor, tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture,tb.blogdescribe, us.id uid,tb.publish,tb.recommend,tb.flag,
         typ.name tname,typ.id typid
          from
        t_blog tb,t_user_blog tub,t_user us,t_types typ,t_blog_type tbt
         where
        tb.id=tub.bid and tub.uid=us.id and tbt.bid=tb.id and tbt.tyid=typ.id
        and tb.id=?  
 
 2020-11-19 21:00:02,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 21:00:02,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend, flag, name, id]  
 
 2020-11-19 21:00:02,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true, 原创, 方法论, 8]  
 
 2020-11-19 21:00:02,921 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 21:00:02,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 21:00:02,925 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:00:12,480 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:12,482 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_types  
 
 2020-11-19 21:00:12,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 21:00:12,484 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 21:00:12,487 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.1275 millis. select * from t_types  
 
 2020-11-19 21:00:12,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 21:00:12,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, name]  
 
 2020-11-19 21:00:12,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 方法论]  
 
 2020-11-19 21:00:12,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [9, 理论类]  
 
 2020-11-19 21:00:12,491 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [21, 错误日记]  
 
 2020-11-19 21:00:12,492 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [23, 开发日记]  
 
 2020-11-19 21:00:12,493 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [24, 实践论]  
 
 2020-11-19 21:00:12,494 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [25, 想法论]  
 
 2020-11-19 21:00:12,495 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 21:00:12,496 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 21:00:12,497 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:00:12,498 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:12,500 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_tages  
 
 2020-11-19 21:00:12,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:00:12,501 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:00:12,503 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3752 millis. select * from t_tages  
 
 2020-11-19 21:00:12,504 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 21:00:12,505 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, tage]  
 
 2020-11-19 21:00:12,506 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [1, 学习日记]  
 
 2020-11-19 21:00:12,507 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2, 错误笔记]  
 
 2020-11-19 21:00:12,508 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [3, 数据库笔记]  
 
 2020-11-19 21:00:12,509 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [4, 程序运行日记]  
 
 2020-11-19 21:00:12,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [5, 开发日记]  
 
 2020-11-19 21:00:12,511 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 开发手册]  
 
 2020-11-19 21:00:12,512 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [10, 搭建日记]  
 
 2020-11-19 21:00:12,513 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 21:00:12,514 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:00:12,515 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:00:12,517 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:12,518 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:00:12,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:12,555 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:00:12,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-19 21:00:12,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-19 21:00:12,556 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.7352 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:00:12,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 21:00:12,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-19 21:00:12,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-19 21:00:12,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 21:00:12,561 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:00:12,563 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:00:12,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [4]  
 
 2020-11-19 21:00:12,565 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-19 21:00:12,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.9769 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:00:12,568 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 21:00:12,569 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:00:12,570 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:00:12,571 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:00:12,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 21:00:12,573 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 21:00:12,574 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:00:14,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:14,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 21:00:14,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 21:00:14,894 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 6.4411 millis. select * from t_types  
 
 2020-11-19 21:00:14,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} open  
 
 2020-11-19 21:00:14,895 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Header: [id, name]  
 
 2020-11-19 21:00:14,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [8, 方法论]  
 
 2020-11-19 21:00:14,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [9, 理论类]  
 
 2020-11-19 21:00:14,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [21, 错误日记]  
 
 2020-11-19 21:00:14,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [23, 开发日记]  
 
 2020-11-19 21:00:14,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [24, 实践论]  
 
 2020-11-19 21:00:14,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} Result: [25, 想法论]  
 
 2020-11-19 21:00:14,903 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50005} closed  
 
 2020-11-19 21:00:14,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 21:00:14,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:00:14,908 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:14,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-19 21:00:14,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-19 21:00:14,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.6058 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:00:14,912 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} open  
 
 2020-11-19 21:00:14,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Header: [count(0)]  
 
 2020-11-19 21:00:14,914 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [2]  
 
 2020-11-19 21:00:14,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} closed  
 
 2020-11-19 21:00:14,917 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:00:14,919 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [4]  
 
 2020-11-19 21:00:14,920 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-19 21:00:14,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.5661 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:00:14,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} open  
 
 2020-11-19 21:00:14,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:00:14,926 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:00:14,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:00:14,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50007} closed  
 
 2020-11-19 21:00:14,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 21:00:14,932 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:00:16,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:16,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:00:16,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:00:16,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.959 millis. select * from t_tages  
 
 2020-11-19 21:00:16,286 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} open  
 
 2020-11-19 21:00:16,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Header: [id, tage]  
 
 2020-11-19 21:00:16,287 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [1, 学习日记]  
 
 2020-11-19 21:00:16,288 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [2, 错误笔记]  
 
 2020-11-19 21:00:16,289 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [3, 数据库笔记]  
 
 2020-11-19 21:00:16,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [4, 程序运行日记]  
 
 2020-11-19 21:00:16,290 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [5, 开发日记]  
 
 2020-11-19 21:00:16,291 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [8, 开发手册]  
 
 2020-11-19 21:00:16,292 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [10, 搭建日记]  
 
 2020-11-19 21:00:16,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} closed  
 
 2020-11-19 21:00:16,293 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:00:16,294 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:00:16,297 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:00:16,298 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : []  
 
 2020-11-19 21:00:16,299 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : []  
 
 2020-11-19 21:00:16,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.1846 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:00:16,301 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} open  
 
 2020-11-19 21:00:16,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Header: [count(0)]  
 
 2020-11-19 21:00:16,302 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Result: [2]  
 
 2020-11-19 21:00:16,303 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} closed  
 
 2020-11-19 21:00:16,304 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:00:16,305 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [4]  
 
 2020-11-19 21:00:16,306 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER]  
 
 2020-11-19 21:00:16,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 3.0808 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:00:16,309 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} open  
 
 2020-11-19 21:00:16,310 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:00:16,311 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:00:16,313 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:00:16,314 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} closed  
 
 2020-11-19 21:00:16,315 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 21:00:16,316 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:27,476 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-840} connected  
 
 2020-11-19 21:02:27,499 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-841} connected  
 
 2020-11-19 21:02:27,510 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-842} connected  
 
 2020-11-19 21:02:27,521 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-843} connected  
 
 2020-11-19 21:02:27,533 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-844} connected  
 
 2020-11-19 21:02:27,536 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:28,003 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_types  
 
 2020-11-19 21:02:28,033 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 21:02:28,034 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 21:02:28,049 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 21.8886 millis. select * from t_types  
 
 2020-11-19 21:02:28,057 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 21:02:28,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, name]  
 
 2020-11-19 21:02:28,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [8, 方法论]  
 
 2020-11-19 21:02:28,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [9, 理论类]  
 
 2020-11-19 21:02:28,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [21, 错误日记]  
 
 2020-11-19 21:02:28,081 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [23, 开发日记]  
 
 2020-11-19 21:02:28,082 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [24, 实践论]  
 
 2020-11-19 21:02:28,083 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [25, 想法论]  
 
 2020-11-19 21:02:28,084 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 21:02:28,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 21:02:28,089 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:28,091 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:28,093 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 21:02:28,094 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 21:02:28,095 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 21:02:28,097 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.9469 millis. select * from t_tages  
 
 2020-11-19 21:02:28,098 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 21:02:28,099 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 21:02:28,100 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 21:02:28,101 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 21:02:28,102 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 21:02:28,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 21:02:28,103 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 21:02:28,104 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 21:02:28,105 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 21:02:28,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 21:02:28,107 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 21:02:28,108 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:28,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:28,111 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:28,143 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:28,215 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:02:28,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:02:28,217 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:02:28,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.9845 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:02:28,219 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 21:02:28,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [count(0)]  
 
 2020-11-19 21:02:28,220 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [2]  
 
 2020-11-19 21:02:28,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 21:02:28,222 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:02:28,228 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:02:28,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 21:02:28,230 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 21:02:28,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.4591 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:02:28,234 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 21:02:28,235 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:02:28,237 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:02:28,240 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:02:28,241 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 21:02:28,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:02:28,242 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:29,247 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:29,249 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 21:02:29,250 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 21:02:29,253 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 3.6927 millis. select * from t_types  
 
 2020-11-19 21:02:29,254 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} open  
 
 2020-11-19 21:02:29,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Header: [id, name]  
 
 2020-11-19 21:02:29,255 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [8, 方法论]  
 
 2020-11-19 21:02:29,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [9, 理论类]  
 
 2020-11-19 21:02:29,256 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [21, 错误日记]  
 
 2020-11-19 21:02:29,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [23, 开发日记]  
 
 2020-11-19 21:02:29,257 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [24, 实践论]  
 
 2020-11-19 21:02:29,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} Result: [25, 想法论]  
 
 2020-11-19 21:02:29,258 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50004} closed  
 
 2020-11-19 21:02:29,259 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 21:02:29,260 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:29,262 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:29,263 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:02:29,264 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:02:29,265 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3701 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:02:29,266 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} open  
 
 2020-11-19 21:02:29,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Header: [count(0)]  
 
 2020-11-19 21:02:29,267 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} Result: [2]  
 
 2020-11-19 21:02:29,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50005} closed  
 
 2020-11-19 21:02:29,268 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:02:29,270 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 21:02:29,271 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 21:02:29,275 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 5.1268 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:02:29,276 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} open  
 
 2020-11-19 21:02:29,277 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:02:29,278 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:02:29,280 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:02:29,282 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50006} closed  
 
 2020-11-19 21:02:29,283 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:02:29,284 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:30,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:30,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 21:02:30,879 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 21:02:30,882 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 2.8956 millis. select * from t_tages  
 
 2020-11-19 21:02:30,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} open  
 
 2020-11-19 21:02:30,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Header: [id, tage]  
 
 2020-11-19 21:02:30,884 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [1, 学习日记]  
 
 2020-11-19 21:02:30,885 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [2, 错误笔记]  
 
 2020-11-19 21:02:30,886 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [3, 数据库笔记]  
 
 2020-11-19 21:02:30,887 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [4, 程序运行日记]  
 
 2020-11-19 21:02:30,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [5, 开发日记]  
 
 2020-11-19 21:02:30,889 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [8, 开发手册]  
 
 2020-11-19 21:02:30,891 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} Result: [10, 搭建日记]  
 
 2020-11-19 21:02:30,892 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50007} closed  
 
 2020-11-19 21:02:30,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 21:02:30,893 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:30,896 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:30,897 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:02:30,898 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:02:30,899 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.3013 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:02:30,900 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} open  
 
 2020-11-19 21:02:30,901 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Header: [count(0)]  
 
 2020-11-19 21:02:30,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} Result: [2]  
 
 2020-11-19 21:02:30,904 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50008} closed  
 
 2020-11-19 21:02:30,905 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:02:30,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 21:02:30,907 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 21:02:30,909 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.767 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:02:30,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} open  
 
 2020-11-19 21:02:30,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:02:30,911 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:02:30,913 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:02:30,915 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} closed  
 
 2020-11-19 21:02:30,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:02:30,916 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:41,687 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:41,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 21:02:41,689 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 21:02:41,690 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 1.7645 millis. select * from t_tages  
 
 2020-11-19 21:02:41,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} open  
 
 2020-11-19 21:02:41,691 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Header: [id, tage]  
 
 2020-11-19 21:02:41,692 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [1, 学习日记]  
 
 2020-11-19 21:02:41,693 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [2, 错误笔记]  
 
 2020-11-19 21:02:41,695 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [3, 数据库笔记]  
 
 2020-11-19 21:02:41,696 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [4, 程序运行日记]  
 
 2020-11-19 21:02:41,697 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [5, 开发日记]  
 
 2020-11-19 21:02:41,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [8, 开发手册]  
 
 2020-11-19 21:02:41,698 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} Result: [10, 搭建日记]  
 
 2020-11-19 21:02:41,699 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50010} closed  
 
 2020-11-19 21:02:41,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 21:02:41,700 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:41,703 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:41,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:02:41,704 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:02:41,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.7923 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:02:41,706 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} open  
 
 2020-11-19 21:02:41,707 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Header: [count(0)]  
 
 2020-11-19 21:02:41,708 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} Result: [2]  
 
 2020-11-19 21:02:41,709 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50011} closed  
 
 2020-11-19 21:02:41,710 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:02:41,712 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 21:02:41,713 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 21:02:41,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.3795 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:02:41,714 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} open  
 
 2020-11-19 21:02:41,716 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:02:41,717 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:02:41,718 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:02:41,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50012} closed  
 
 2020-11-19 21:02:41,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:02:41,722 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:42,850 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:42,851 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 21:02:42,852 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 21:02:42,853 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 1.5485 millis. select * from t_types  
 
 2020-11-19 21:02:42,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} open  
 
 2020-11-19 21:02:42,854 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Header: [id, name]  
 
 2020-11-19 21:02:42,855 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [8, 方法论]  
 
 2020-11-19 21:02:42,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [9, 理论类]  
 
 2020-11-19 21:02:42,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [21, 错误日记]  
 
 2020-11-19 21:02:42,857 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [23, 开发日记]  
 
 2020-11-19 21:02:42,859 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [24, 实践论]  
 
 2020-11-19 21:02:42,860 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} Result: [25, 想法论]  
 
 2020-11-19 21:02:42,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50013} closed  
 
 2020-11-19 21:02:42,861 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 21:02:42,862 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:42,866 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:42,867 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:02:42,868 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:02:42,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 1.5675 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:02:42,869 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} open  
 
 2020-11-19 21:02:42,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Header: [count(0)]  
 
 2020-11-19 21:02:42,870 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} Result: [2]  
 
 2020-11-19 21:02:42,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50014} closed  
 
 2020-11-19 21:02:42,871 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:02:42,873 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 21:02:42,874 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 21:02:42,875 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 2.1267 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:02:42,876 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} open  
 
 2020-11-19 21:02:42,877 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:02:42,878 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:02:42,880 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:02:42,881 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50015} closed  
 
 2020-11-19 21:02:42,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:02:42,883 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:43,745 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:43,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : []  
 
 2020-11-19 21:02:43,747 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : []  
 
 2020-11-19 21:02:43,749 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 2.0793 millis. select * from t_types  
 
 2020-11-19 21:02:43,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} open  
 
 2020-11-19 21:02:43,750 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Header: [id, name]  
 
 2020-11-19 21:02:43,751 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [8, 方法论]  
 
 2020-11-19 21:02:43,752 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [9, 理论类]  
 
 2020-11-19 21:02:43,753 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [21, 错误日记]  
 
 2020-11-19 21:02:43,754 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [23, 开发日记]  
 
 2020-11-19 21:02:43,755 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [24, 实践论]  
 
 2020-11-19 21:02:43,756 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} Result: [25, 想法论]  
 
 2020-11-19 21:02:43,757 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50016} closed  
 
 2020-11-19 21:02:43,758 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 21:02:43,759 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:43,760 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:43,761 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 21:02:43,762 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 21:02:43,764 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.0999 millis. select * from t_tages  
 
 2020-11-19 21:02:43,765 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} open  
 
 2020-11-19 21:02:43,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Header: [id, tage]  
 
 2020-11-19 21:02:43,766 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [1, 学习日记]  
 
 2020-11-19 21:02:43,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [2, 错误笔记]  
 
 2020-11-19 21:02:43,767 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [3, 数据库笔记]  
 
 2020-11-19 21:02:43,768 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [4, 程序运行日记]  
 
 2020-11-19 21:02:43,769 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [5, 开发日记]  
 
 2020-11-19 21:02:43,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [8, 开发手册]  
 
 2020-11-19 21:02:43,770 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} Result: [10, 搭建日记]  
 
 2020-11-19 21:02:43,771 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50017} closed  
 
 2020-11-19 21:02:43,772 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 21:02:43,773 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:02:43,775 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:02:43,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:02:43,777 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:02:43,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.1198 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id  
 
 2020-11-19 21:02:43,779 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} open  
 
 2020-11-19 21:02:43,780 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Header: [count(0)]  
 
 2020-11-19 21:02:43,781 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} Result: [2]  
 
 2020-11-19 21:02:43,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50018} closed  
 
 2020-11-19 21:02:43,782 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:02:43,784 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [4]  
 
 2020-11-19 21:02:43,785 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 21:02:43,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 3.7123 millis. select us.username uname, us.avator avgtor,tb.id,tb.title ,tb.createtime,tb.views,tb.content,tb.firstpicture, tb.blogdescribe, us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id LIMIT ?   
 
 2020-11-19 21:02:43,788 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} open  
 
 2020-11-19 21:02:43,789 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Header: [username, avator, id, title, createtime, views, content, firstpicture, blogdescribe, id, publish, recommend]  
 
 2020-11-19 21:02:43,790 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 11, Java基本语法, 2020-11-19 16:11:12.0, 0, ## 基本语法
##### 编写 Java 程序时，应注意以下几点：

* 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。
* 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组 成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。
* 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。
* 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。
* 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。

 ```java
 public static void main(String[] args){};
 ```, https://picsum.photos/seed/picsum/800/450, 这是有关于Java语法的基本使用，请着重查看代码块里面的内容, 1, true, true]  
 
 2020-11-19 21:02:43,792 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} Result: [zhangsan, https://picsum.photos/seed/picsum/200/300, 12, Java笔记, 2020-11-19 17:00:12.0, 0, 
* 数据类型的从小到大顺序
	````java
	（byte，short，char)-int-long-float-double
	````
* 基本类型：
````java
	public class shuju{
	public static void main(String[] args){
	double num1=2F;//自动转换数据类型，数据范围小的转换为数据大的
	System.out.println(num1);
	int num2=(int)100L;//强制转换数据类型。数据大的转换为数据小的
````
* 三元运算：需要三个数据才可以进行运算的运算符；
````java
	格式： 数据类型 变量名称=条件判断 ？表达式A ：表达式B
	注意，俩边的数据类型一点要一样的。
````
* 参数传递的过程中，有俩项规则
 >  1.对于基本数据类型（以及String）来说，形式参数的操作不会影响实际参数；
>  2.对于引用数据类型（除了String）来说，形式参数的操作会影响实际参数；

* 对于基本类型是比较内容是否相等，但对于引用数据类型就是比较地址，像什么String啊。


* 基本类型 对应的  包装类型



	| 基本类型 | 包装类型|
	| :----:| :----:|
	| int | Integer|
	| byte | Byte |
	| short | Short |
	| float | Float |
	| double | Double |
	| char | Char |
	| boolean | Boolean |
	| long | Long |, https://picsum.photos/seed/picsum/800/450, 这是一些有关于java基础的内容, 1, true, true]  
 
 2020-11-19 21:02:43,795 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50019} closed  
 
 2020-11-19 21:02:43,796 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:02:43,797 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:03:54,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10001,procId-845} connected  
 
 2020-11-19 21:03:55,032 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10002,procId-846} connected  
 
 2020-11-19 21:03:55,086 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10003,procId-847} connected  
 
 2020-11-19 21:03:55,129 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10004,procId-848} connected  
 
 2020-11-19 21:03:55,167 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005,procId-849} connected  
 
 2020-11-19 21:03:55,180 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:03:55,787 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} created. select * from t_user where username=?  
 
 2020-11-19 21:03:55,856 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Parameters : [zhangsan]  
 
 2020-11-19 21:03:55,858 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} Types : [VARCHAR]  
 
 2020-11-19 21:03:55,888 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} executed. 43.6466 millis. select * from t_user where username=?  
 
 2020-11-19 21:03:55,902 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} open  
 
 2020-11-19 21:03:55,910 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Header: [id, username, password, email, type, avator, time, updatetime]  
 
 2020-11-19 21:03:55,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} Result: [1, zhangsan, $2a$10$MqW9MEpSHtHfWFLp6egUmura2I/R1i40h9xN6vTy45FepVlEe6Mxy, 1799749389@qq.com, 1, https://picsum.photos/seed/picsum/200/300, 2020-11-12 04:35:11.0, 2020-11-12 04:35:11.0]  
 
 2020-11-19 21:03:55,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20000, rs-50000} closed  
 
 2020-11-19 21:03:55,965 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20000} clearParameters.   
 
 2020-11-19 21:03:55,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:03:59,918 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:03:59,922 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} created. select * from t_tages  
 
 2020-11-19 21:03:59,923 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Parameters : []  
 
 2020-11-19 21:03:59,924 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} Types : []  
 
 2020-11-19 21:03:59,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} executed. 3.9117 millis. select * from t_tages  
 
 2020-11-19 21:03:59,928 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} open  
 
 2020-11-19 21:03:59,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Header: [id, tage]  
 
 2020-11-19 21:03:59,929 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [1, 学习日记]  
 
 2020-11-19 21:03:59,930 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [2, 错误笔记]  
 
 2020-11-19 21:03:59,931 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [3, 数据库笔记]  
 
 2020-11-19 21:03:59,933 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [4, 程序运行日记]  
 
 2020-11-19 21:03:59,934 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [5, 开发日记]  
 
 2020-11-19 21:03:59,936 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [8, 开发手册]  
 
 2020-11-19 21:03:59,937 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} Result: [10, 搭建日记]  
 
 2020-11-19 21:03:59,938 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20001, rs-50001} closed  
 
 2020-11-19 21:03:59,939 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20001} clearParameters.   
 
 2020-11-19 21:03:59,940 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:03:59,941 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:03:59,943 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} created. select * from t_types  
 
 2020-11-19 21:03:59,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Parameters : []  
 
 2020-11-19 21:03:59,944 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} Types : []  
 
 2020-11-19 21:03:59,946 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} executed. 2.4104 millis. select * from t_types  
 
 2020-11-19 21:03:59,947 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} open  
 
 2020-11-19 21:03:59,948 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Header: [id, name]  
 
 2020-11-19 21:03:59,949 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [8, 方法论]  
 
 2020-11-19 21:03:59,950 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [9, 理论类]  
 
 2020-11-19 21:03:59,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [21, 错误日记]  
 
 2020-11-19 21:03:59,951 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [23, 开发日记]  
 
 2020-11-19 21:03:59,952 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [24, 实践论]  
 
 2020-11-19 21:03:59,954 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} Result: [25, 想法论]  
 
 2020-11-19 21:03:59,956 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20002, rs-50002} closed  
 
 2020-11-19 21:03:59,957 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20002} clearParameters.   
 
 2020-11-19 21:03:59,958 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:04:02,488 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:04:02,489 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:04:02,528 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:04:02,535 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} created. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 21:04:02,537 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-19 21:04:02,538 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 21:04:02,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.8533 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 21:04:02,539 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} open  
 
 2020-11-19 21:04:02,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Header: [count(0)]  
 
 2020-11-19 21:04:02,540 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} Result: [2]  
 
 2020-11-19 21:04:02,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50003} closed  
 
 2020-11-19 21:04:02,542 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:04:02,547 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} created. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 21:04:02,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-19 21:04:02,549 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-19 21:04:02,551 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 1.9293 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 21:04:02,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} open  
 
 2020-11-19 21:04:02,552 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 21:04:02,554 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 21:04:02,557 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 21:04:02,558 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50004} closed  
 
 2020-11-19 21:04:02,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 21:04:02,559 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:04:04,050 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:04:04,052 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} created. SELECT count(0) FROM t_types  
 
 2020-11-19 21:04:04,054 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Parameters : []  
 
 2020-11-19 21:04:04,055 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} Types : []  
 
 2020-11-19 21:04:04,060 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} executed. 6.4966 millis. SELECT count(0) FROM t_types  
 
 2020-11-19 21:04:04,061 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} open  
 
 2020-11-19 21:04:04,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Header: [count(0)]  
 
 2020-11-19 21:04:04,062 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} Result: [6]  
 
 2020-11-19 21:04:04,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20005, rs-50005} closed  
 
 2020-11-19 21:04:04,064 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20005} clearParameters.   
 
 2020-11-19 21:04:04,066 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} created. select * from t_types LIMIT ?   
 
 2020-11-19 21:04:04,067 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Parameters : [5]  
 
 2020-11-19 21:04:04,068 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} Types : [INTEGER]  
 
 2020-11-19 21:04:04,070 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} executed. 2.9201 millis. select * from t_types LIMIT ?   
 
 2020-11-19 21:04:04,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} open  
 
 2020-11-19 21:04:04,071 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Header: [id, name]  
 
 2020-11-19 21:04:04,072 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [8, 方法论]  
 
 2020-11-19 21:04:04,074 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [9, 理论类]  
 
 2020-11-19 21:04:04,075 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [21, 错误日记]  
 
 2020-11-19 21:04:04,076 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [23, 开发日记]  
 
 2020-11-19 21:04:04,077 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} Result: [24, 实践论]  
 
 2020-11-19 21:04:04,078 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20006, rs-50006} closed  
 
 2020-11-19 21:04:04,079 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20006} clearParameters.   
 
 2020-11-19 21:04:04,080 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:04:05,185 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:04:05,187 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} created. SELECT count(0) FROM t_tages  
 
 2020-11-19 21:04:05,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Parameters : []  
 
 2020-11-19 21:04:05,189 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} Types : []  
 
 2020-11-19 21:04:05,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} executed. 2.9394 millis. SELECT count(0) FROM t_tages  
 
 2020-11-19 21:04:05,192 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} open  
 
 2020-11-19 21:04:05,193 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Header: [count(0)]  
 
 2020-11-19 21:04:05,194 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} Result: [7]  
 
 2020-11-19 21:04:05,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20007, rs-50007} closed  
 
 2020-11-19 21:04:05,196 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20007} clearParameters.   
 
 2020-11-19 21:04:05,198 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} created. select * from t_tages LIMIT ?   
 
 2020-11-19 21:04:05,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Parameters : [5]  
 
 2020-11-19 21:04:05,200 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} Types : [INTEGER]  
 
 2020-11-19 21:04:05,202 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} executed. 2.5512 millis. select * from t_tages LIMIT ?   
 
 2020-11-19 21:04:05,203 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} open  
 
 2020-11-19 21:04:05,204 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Header: [id, tage]  
 
 2020-11-19 21:04:05,205 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [1, 学习日记]  
 
 2020-11-19 21:04:05,206 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [2, 错误笔记]  
 
 2020-11-19 21:04:05,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [3, 数据库笔记]  
 
 2020-11-19 21:04:05,208 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [4, 程序运行日记]  
 
 2020-11-19 21:04:05,209 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} Result: [5, 开发日记]  
 
 2020-11-19 21:04:05,210 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20008, rs-50008} closed  
 
 2020-11-19 21:04:05,211 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20008} clearParameters.   
 
 2020-11-19 21:04:05,212 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 
 2020-11-19 21:04:06,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-connect  
 
 2020-11-19 21:04:06,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Parameters : [1]  
 
 2020-11-19 21:04:06,970 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} Types : [INTEGER]  
 
 2020-11-19 21:04:06,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} executed. 1.6218 millis. SELECT count(0) FROM t_blog tb, t_user_blog tub, t_user us WHERE tb.id = tub.bid AND tub.uid = us.id AND us.id = ?  
 
 2020-11-19 21:04:06,972 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} open  
 
 2020-11-19 21:04:06,973 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Header: [count(0)]  
 
 2020-11-19 21:04:06,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} Result: [2]  
 
 2020-11-19 21:04:06,974 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20003, rs-50009} closed  
 
 2020-11-19 21:04:06,975 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20003} clearParameters.   
 
 2020-11-19 21:04:06,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Parameters : [1, 5]  
 
 2020-11-19 21:04:06,977 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} Types : [INTEGER, INTEGER]  
 
 2020-11-19 21:04:06,979 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} executed. 2.3612 millis. select us.username uname, tb.id,tb.title ,tb.createtime,us.id uid,tb.publish,tb.recommend
          from
        t_blog tb,t_user_blog tub,t_user us
         where
        tb.id=tub.bid and tub.uid=us.id
         and 
        us.id=? LIMIT ?   
 
 2020-11-19 21:04:06,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} open  
 
 2020-11-19 21:04:06,980 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Header: [username, id, title, createtime, id, publish, recommend]  
 
 2020-11-19 21:04:06,982 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Result: [zhangsan, 11, Java基本语法, 2020-11-19 16:11:12.0, 1, true, true]  
 
 2020-11-19 21:04:06,983 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} Result: [zhangsan, 12, Java笔记, 2020-11-19 17:00:12.0, 1, true, true]  
 
 2020-11-19 21:04:06,985 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.resultSetLog(Log4jFilter.java:142)] {conn-10005, pstmt-20004, rs-50010} closed  
 
 2020-11-19 21:04:06,986 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.statementLog(Log4jFilter.java:137)] {conn-10005, pstmt-20004} clearParameters.   
 
 2020-11-19 21:04:06,987 DEBUG [com.alibaba.druid.filter.logging.Log4jFilter.connectionLog(Log4jFilter.java:132)] {conn-10005} pool-recycle  
 